calcpa.c:  ut=(double)tmpt->tm_hour+(double)(TIMEZONE_SUBARU-hg->timezone)
calcpa.c:  hg->lst_hour=(gint)flst;
calcpa.c:  hg->lst_min=(gint)((flst-(double)hg->lst_hour)*60.);
calcpa.c:  hg->lst_sec=(gint)((flst-(double)hg->lst_hour-(double)hg->lst_min/60.)*60.*60.);
calcpa.c:  for(i_list=0;i_list<hg->i_max;i_list++){
calcpa.c:    a0s=hg->obj[i_list].ra;
calcpa.c:    d0s=hg->obj[i_list].dec;
calcpa.c:      hg->obj[i_list].c_az=-1;
calcpa.c:      hg->obj[i_list].c_el=-1;
calcpa.c:      hg->obj[i_list].c_ha=-1;
calcpa.c:      hg->obj[i_list].c_pa=-1;
calcpa.c:      hg->obj[i_list].c_ad=-1;
calcpa.c:      ad1=adrad(zrad,(double)hg->wave1/10000.,h,(double)hg->temp+t,
calcpa.c:		(double)hg->pres,f);  //@3500A default
calcpa.c:      ad0=adrad(zrad,(double)hg->wave0/10000,h,(double)hg->temp+t,
calcpa.c:		(double)hg->pres,f);  //@5500A default
calcpa.c:      hg->obj[i_list].c_az=az0deg-180;
calcpa.c:      hg->obj[i_list].c_el=el0deg;
calcpa.c:      hg->obj[i_list].c_ha=ha1;
calcpa.c:      hg->obj[i_list].c_pa=padeg;
calcpa.c:      hg->obj[i_list].c_ad=adsec;
calcpa.c:    a0s=(gdouble)hg->moon.c_ra.hours*10000.
calcpa.c:    + (gdouble)hg->moon.c_ra.minutes*100. + hg->moon.c_ra.seconds; 
calcpa.c:    //a0s=hg->moon.ra;
calcpa.c:      hg->moon.c_dec.neg==1 ? 
calcpa.c:      -1.* ((gdouble)hg->moon.c_dec.degrees*10000. 
calcpa.c:	  + (gdouble)hg->moon.c_dec.minutes*100. + hg->moon.c_dec.seconds)
calcpa.c:    : (gdouble)hg->moon.c_dec.degrees*10000.
calcpa.c:    + (gdouble)hg->moon.c_dec.minutes*100. + hg->moon.c_dec.seconds;
calcpa.c:    //d0s=hg->moon.dec;
calcpa.c:      hg->moon.c_az=-1;
calcpa.c:      hg->moon.c_el=-1;
calcpa.c:      hg->moon.c_ha=-1;
calcpa.c:      ad1=adrad(zrad,(double)hg->wave1/10000.,h,(double)hg->temp+t,
calcpa.c:		(double)hg->pres,f);  //@3500A default
calcpa.c:      ad0=adrad(zrad,(double)hg->wave0/10000,h,(double)hg->temp+t,
calcpa.c:		(double)hg->pres,f);  //@5500A default
calcpa.c:      hg->moon.c_az=az0deg-180;
calcpa.c:      hg->moon.c_el=el0deg;
calcpa.c:      hg->moon.c_ha=ha1;
calcpa.c:  iyear=hg->skymon_year;
calcpa.c:  month=hg->skymon_month;
calcpa.c:  iday=hg->skymon_day;
calcpa.c:  ut=(double)hg->skymon_hour+(double)(TIMEZONE_SUBARU-hg->timezone)
calcpa.c:    +(double)hg->skymon_min/60.
calcpa.c:  if(hg->skymon_hour>14)
calcpa.c:  hg->skymon_lst_hour=(gint)flst;
calcpa.c:  hg->skymon_lst_min=(gint)((flst-(double)hg->skymon_lst_hour)*60.);
calcpa.c:  hg->skymon_lst_sec=(gint)((flst-(double)hg->skymon_lst_hour-(double)hg->skymon_lst_min/60.)*60.*60.);
calcpa.c:  for(i_list=0;i_list<hg->i_max;i_list++){
calcpa.c:    a0s=hg->obj[i_list].ra;
calcpa.c:    d0s=hg->obj[i_list].dec;
calcpa.c:      hg->obj[i_list].s_az=-1;
calcpa.c:      hg->obj[i_list].s_el=-1;
calcpa.c:      hg->obj[i_list].s_ha=-1;
calcpa.c:      hg->obj[i_list].s_pa=-1;
calcpa.c:      hg->obj[i_list].s_ad=-1;
calcpa.c:      ad1=adrad(zrad,(double)hg->wave1/10000.,h,(double)hg->temp+t,
calcpa.c:		(double)hg->pres,f);  //@3500A default
calcpa.c:      ad0=adrad(zrad,(double)hg->wave0/10000,h,(double)hg->temp+t,
calcpa.c:		(double)hg->pres,f);  //@5500A default
calcpa.c:      hg->obj[i_list].s_az=az0deg-180;
calcpa.c:      hg->obj[i_list].s_el=el0deg;
calcpa.c:      hg->obj[i_list].s_ha=ha1;
calcpa.c:      hg->obj[i_list].s_pa=padeg;
calcpa.c:      hg->obj[i_list].s_ad=adsec;
calcpa.c:  iyear=hg->fr_year;
calcpa.c:  month=hg->fr_month;
calcpa.c:  iday0=hg->fr_day;
calcpa.c:  for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
calcpa.c:    if((hg->plan[i_plan].type==PLAN_TYPE_OBJ)&&(!hg->plan[i_plan].backup)){
calcpa.c:      ut=hg->plan[i_plan].sod/3600.-14.0;
calcpa.c:	a0s=hg->obj[hg->plan[i_plan].obj_i].ra;
calcpa.c:	d0s=hg->obj[hg->plan[i_plan].obj_i].dec;
calcpa.c:	  hg->pp[i_pp].az=-1;
calcpa.c:	  hg->pp[i_pp].el=-1;
calcpa.c:	  ad1=adrad(zrad,(double)hg->wave1/10000.,h,(double)hg->temp+t,
calcpa.c:		    (double)hg->pres,f);  //@3500A default
calcpa.c:	  ad0=adrad(zrad,(double)hg->wave0/10000,h,(double)hg->temp+t,
calcpa.c:		    (double)hg->pres,f);  //@5500A default
calcpa.c:	  hg->pp[i_pp].az=az0deg-180;
calcpa.c:	  hg->pp[i_pp].el=el0deg;
calcpa.c:	  hg->pp[i_pp].ut=ut;
calcpa.c:	  hg->pp[i_pp].i_plan=i_plan;
calcpa.c:	  hg->pp[i_pp].start=flag_start;
calcpa.c:      }while((ut<(hg->plan[i_plan].sod+hg->plan[i_plan].time)/3600.-14.)
calcpa.c:  hg->i_pp_max=i_pp;
calcpa.c:  hg->moon.c_ra=hms;
calcpa.c:  hg->moon.c_dec=dms;
calcpa.c:  hg->moon.ra=(gdouble)hms.hours*10000.
calcpa.c:  hg->moon.dec=
calcpa.c:  hg->moon.c_disk=ln_get_lunar_disk(JD);
calcpa.c:  hg->moon.c_phase=ln_get_lunar_phase(JD);
calcpa.c:  hg->moon.c_limb=ln_get_lunar_bright_limb(JD);
calcpa.c:    hg->moon.c_circum=TRUE;
calcpa.c:    hg->moon.c_circum=FALSE;
calcpa.c:    hg->moon.c_rise.hours=rise.hours;
calcpa.c:    hg->moon.c_rise.minutes=rise.minutes;
calcpa.c:    hg->moon.c_rise.seconds=rise.seconds;
calcpa.c:    hg->moon.c_set.hours=set.hours;
calcpa.c:    hg->moon.c_set.minutes=set.minutes;
calcpa.c:    hg->moon.c_set.seconds=set.seconds;
calcpa.c:    hg->moon.c_set.seconds+=d_ss;
calcpa.c:    if(hg->moon.c_set.seconds>=60){
calcpa.c:      hg->moon.c_set.minutes+=1;
calcpa.c:      hg->moon.c_set.seconds-=60;
calcpa.c:    hg->moon.c_set.minutes+=d_mm;
calcpa.c:    if(hg->moon.c_set.minutes>=60){
calcpa.c:      hg->moon.c_set.hours+=1;
calcpa.c:      hg->moon.c_set.minutes-=60;
calcpa.c:      if(hg->moon.c_set.hours>=24){
calcpa.c:	hg->moon.c_set.hours-=24;
calcpa.c:    hg->moon.c_rise.seconds-=d_ss;
calcpa.c:    if(hg->moon.c_rise.seconds<0){
calcpa.c:      hg->moon.c_rise.minutes-=1;
calcpa.c:      hg->moon.c_rise.seconds+=60;
calcpa.c:    hg->moon.c_rise.minutes-=d_mm;
calcpa.c:    if(hg->moon.c_rise.minutes<0){
calcpa.c:      hg->moon.c_rise.hours-=1;
calcpa.c:      hg->moon.c_rise.minutes+=60;
calcpa.c:      if(hg->moon.c_rise.hours<0){
calcpa.c:	hg->moon.c_rise.hours+=24;
calcpa.c:    hg->sun.c_circum=TRUE;
calcpa.c:    hg->sun.c_circum=FALSE;
calcpa.c:    hg->sun.c_set.hours=set.hours;
calcpa.c:    hg->sun.c_set.minutes=set.minutes;
calcpa.c:    hg->sun.c_set.seconds=set.seconds;
calcpa.c:    hg->sun.c_rise.hours=rise.hours;
calcpa.c:    hg->sun.c_rise.minutes=rise.minutes;
calcpa.c:    hg->sun.c_rise.seconds=rise.seconds;
calcpa.c:    hg->sun.c_set.seconds+=d_ss;
calcpa.c:    if(hg->sun.c_set.seconds>=60){
calcpa.c:      hg->sun.c_set.minutes+=1;
calcpa.c:      hg->sun.c_set.seconds-=60;
calcpa.c:    hg->sun.c_set.minutes+=d_mm;
calcpa.c:    if(hg->sun.c_set.minutes>=60){
calcpa.c:      hg->sun.c_set.hours+=1;
calcpa.c:      hg->sun.c_set.minutes-=60;
calcpa.c:      if(hg->sun.c_set.hours>=24){
calcpa.c:	hg->sun.c_set.hours-=24;
calcpa.c:    hg->sun.c_rise.seconds-=d_ss;
calcpa.c:    if(hg->sun.c_rise.seconds<0){
calcpa.c:      hg->sun.c_rise.minutes-=1;
calcpa.c:      hg->sun.c_rise.seconds+=60;
calcpa.c:    hg->sun.c_rise.minutes-=d_mm;
calcpa.c:    if(hg->sun.c_rise.minutes<0){
calcpa.c:      hg->sun.c_rise.hours-=1;
calcpa.c:      hg->sun.c_rise.minutes+=60;
calcpa.c:      if(hg->sun.c_rise.hours<0){
calcpa.c:	hg->sun.c_rise.hours+=24;
calcpa.c:  local_date.years=hg->skymon_year;
calcpa.c:  local_date.months=hg->skymon_month;
calcpa.c:  local_date.days=hg->skymon_day;
calcpa.c:  local_date.hours=hg->skymon_hour;
calcpa.c:  local_date.minutes=hg->skymon_min;
calcpa.c:  hg->moon.s_ra=hms;
calcpa.c:  hg->moon.s_dec=dms;
calcpa.c:  hg->moon.s_az=hrz.az;
calcpa.c:  hg->moon.s_el=hrz.alt;
calcpa.c:  hg->moon.s_disk=ln_get_lunar_disk(JD);
calcpa.c:  hg->moon.s_phase=ln_get_lunar_phase(JD);
calcpa.c:  hg->moon.s_limb=ln_get_lunar_bright_limb(JD);
calcpa.c:    hg->moon.s_circum=TRUE;
calcpa.c:    hg->moon.s_circum=FALSE;
calcpa.c:    hg->moon.s_rise.hours=rise.hours;
calcpa.c:    hg->moon.s_rise.minutes=rise.minutes;
calcpa.c:    hg->moon.s_rise.seconds=set.seconds;
calcpa.c:    hg->moon.s_set.hours=set.hours;
calcpa.c:    hg->moon.s_set.minutes=set.minutes;
calcpa.c:    hg->moon.s_set.seconds=set.seconds;
calcpa.c:    hg->moon.s_set.seconds+=d_ss;
calcpa.c:    if(hg->moon.s_set.seconds>=60){
calcpa.c:      hg->moon.s_set.minutes+=1;
calcpa.c:      hg->moon.s_set.seconds-=60;
calcpa.c:    hg->moon.s_set.minutes+=d_mm;
calcpa.c:    if(hg->moon.s_set.minutes>=60){
calcpa.c:      hg->moon.s_set.hours+=1;
calcpa.c:      hg->moon.s_set.minutes-=60;
calcpa.c:      if(hg->moon.s_set.hours>=24){
calcpa.c:	hg->moon.s_set.hours-=24;
calcpa.c:    hg->moon.s_rise.seconds-=d_ss;
calcpa.c:    if(hg->moon.s_rise.seconds<0){
calcpa.c:      hg->moon.s_rise.minutes-=1;
calcpa.c:      hg->moon.s_rise.seconds+=60;
calcpa.c:    hg->moon.s_rise.minutes-=d_mm;
calcpa.c:    if(hg->moon.s_rise.minutes<0){
calcpa.c:      hg->moon.s_rise.hours-=1;
calcpa.c:      hg->moon.s_rise.minutes+=60;
calcpa.c:      if(hg->moon.s_rise.hours<0){
calcpa.c:	hg->moon.s_rise.hours+=24;
calcpa.c:    hg->sun.s_circum=TRUE;
calcpa.c:    hg->sun.s_circum=FALSE;
calcpa.c:    hg->sun.s_rise.hours=rise.hours;
calcpa.c:    hg->sun.s_rise.minutes=rise.minutes;
calcpa.c:    hg->sun.s_rise.seconds=set.seconds;
calcpa.c:    hg->sun.s_set.hours=set.hours;
calcpa.c:    hg->sun.s_set.minutes=set.minutes;
calcpa.c:    hg->sun.s_set.seconds=set.seconds;
calcpa.c:    hg->sun.s_set.seconds+=d_ss;
calcpa.c:    if(hg->sun.s_set.seconds>=60){
calcpa.c:      hg->sun.s_set.minutes+=1;
calcpa.c:      hg->sun.s_set.seconds-=60;
calcpa.c:    hg->sun.s_set.minutes+=d_mm;
calcpa.c:    if(hg->sun.s_set.minutes>=60){
calcpa.c:      hg->sun.s_set.hours+=1;
calcpa.c:      hg->sun.s_set.minutes-=60;
calcpa.c:      if(hg->sun.s_set.hours>=24){
calcpa.c:	hg->sun.s_set.hours-=24;
calcpa.c:    hg->sun.s_rise.seconds-=d_ss;
calcpa.c:    if(hg->sun.s_rise.seconds<0){
calcpa.c:      hg->sun.s_rise.minutes-=1;
calcpa.c:      hg->sun.s_rise.seconds+=60;
calcpa.c:    hg->sun.s_rise.minutes-=d_mm;
calcpa.c:    if(hg->sun.s_rise.minutes<0){
calcpa.c:      hg->sun.s_rise.hours-=1;
calcpa.c:      hg->sun.s_rise.minutes+=60;
calcpa.c:      if(hg->sun.s_rise.hours<0){
calcpa.c:	hg->sun.s_rise.hours+=24;
calcpa.c:  local_date.years=hg->fr_year;
calcpa.c:  local_date.months=hg->fr_month;
calcpa.c:  local_date.days=hg->fr_day;
calcpa.c:  local_date.hours=hg->atw.s_set.hours;
calcpa.c:  local_date.minutes=hg->atw.s_set.minutes;
calcpa.c:  local_date.years=hg->fr_year;
calcpa.c:  local_date.months=hg->fr_month;
calcpa.c:  local_date.days=hg->fr_day+1;
calcpa.c:  local_date.hours=hg->atw.s_rise.hours;
calcpa.c:  local_date.minutes=hg->atw.s_rise.minutes;
calcpa.c:    hg->moon.p_ra[i_pp]=hms;
calcpa.c:    hg->moon.p_dec[i_pp]=dms;
calcpa.c:    hg->moon.p_az[i_pp]=hrz.az;
calcpa.c:    hg->moon.p_el[i_pp]=hrz.alt;
calcpa.c:  hg->i_pp_moon_max=i_pp;
calcpa.c:  local_date.years=hg->fr_year;
calcpa.c:  local_date.months=hg->fr_month;
calcpa.c:  local_date.days=hg->fr_day;
calcpa.c:  hg->moon.s_ra=hms;
calcpa.c:  hg->moon.s_dec=dms;
calcpa.c:  hg->moon.s_disk=ln_get_lunar_disk(JD);
calcpa.c:  hg->moon.s_phase=ln_get_lunar_phase(JD);
calcpa.c:  hg->moon.s_limb=ln_get_lunar_bright_limb(JD);
calcpa.c:    hg->moon.s_circum=TRUE;
calcpa.c:    hg->moon.s_circum=FALSE;
calcpa.c:    hg->moon.s_rise.hours=rise.hours;
calcpa.c:    hg->moon.s_rise.minutes=rise.minutes;
calcpa.c:    hg->moon.s_rise.seconds=set.seconds;
calcpa.c:    hg->moon.s_set.hours=set.hours;
calcpa.c:    hg->moon.s_set.minutes=set.minutes;
calcpa.c:    hg->moon.s_set.seconds=set.seconds;
calcpa.c:    hg->moon.s_set.seconds+=d_ss;
calcpa.c:    if(hg->moon.s_set.seconds>=60){
calcpa.c:      hg->moon.s_set.minutes+=1;
calcpa.c:      hg->moon.s_set.seconds-=60;
calcpa.c:    hg->moon.s_set.minutes+=d_mm;
calcpa.c:    if(hg->moon.s_set.minutes>=60){
calcpa.c:      hg->moon.s_set.hours+=1;
calcpa.c:      hg->moon.s_set.minutes-=60;
calcpa.c:      if(hg->moon.s_set.hours>=24){
calcpa.c:	hg->moon.s_set.hours-=24;
calcpa.c:    hg->moon.s_rise.seconds-=d_ss;
calcpa.c:    if(hg->moon.s_rise.seconds<0){
calcpa.c:      hg->moon.s_rise.minutes-=1;
calcpa.c:      hg->moon.s_rise.seconds+=60;
calcpa.c:    hg->moon.s_rise.minutes-=d_mm;
calcpa.c:    if(hg->moon.s_rise.minutes<0){
calcpa.c:      hg->moon.s_rise.hours-=1;
calcpa.c:      hg->moon.s_rise.minutes+=60;
calcpa.c:      if(hg->moon.s_rise.hours<0){
calcpa.c:	hg->moon.s_rise.hours+=24;
calcpa.c:    hg->sun.s_circum=TRUE;
calcpa.c:    hg->sun.s_circum=FALSE;
calcpa.c:    hg->sun.s_rise.hours=rise.hours;
calcpa.c:    hg->sun.s_rise.minutes=rise.minutes;
calcpa.c:    hg->sun.s_rise.seconds=set.seconds;
calcpa.c:    hg->sun.s_set.hours=set.hours;
calcpa.c:    hg->sun.s_set.minutes=set.minutes;
calcpa.c:    hg->sun.s_set.seconds=set.seconds;
calcpa.c:    hg->sun.s_set.seconds+=d_ss;
calcpa.c:    if(hg->sun.s_set.seconds>=60){
calcpa.c:      hg->sun.s_set.minutes+=1;
calcpa.c:      hg->sun.s_set.seconds-=60;
calcpa.c:    hg->sun.s_set.minutes+=d_mm;
calcpa.c:    if(hg->sun.s_set.minutes>=60){
calcpa.c:      hg->sun.s_set.hours+=1;
calcpa.c:      hg->sun.s_set.minutes-=60;
calcpa.c:      if(hg->sun.s_set.hours>=24){
calcpa.c:	hg->sun.s_set.hours-=24;
calcpa.c:    hg->sun.s_rise.seconds-=d_ss;
calcpa.c:    if(hg->sun.s_rise.seconds<0){
calcpa.c:      hg->sun.s_rise.minutes-=1;
calcpa.c:      hg->sun.s_rise.seconds+=60;
calcpa.c:    hg->sun.s_rise.minutes-=d_mm;
calcpa.c:    if(hg->sun.s_rise.minutes<0){
calcpa.c:      hg->sun.s_rise.hours-=1;
calcpa.c:      hg->sun.s_rise.minutes+=60;
calcpa.c:      if(hg->sun.s_rise.hours<0){
calcpa.c:	hg->sun.s_rise.hours+=24;
calcpa.c:    hg->atw.s_circum=TRUE;
calcpa.c:    hg->atw.s_circum=FALSE;
calcpa.c:    hg->atw.s_rise.hours=rise.hours;
calcpa.c:    hg->atw.s_rise.minutes=rise.minutes;
calcpa.c:    hg->atw.s_rise.seconds=set.seconds;
calcpa.c:    hg->atw.s_set.hours=set.hours;
calcpa.c:    hg->atw.s_set.minutes=set.minutes;
calcpa.c:    hg->atw.s_set.seconds=set.seconds;
calcpa.c:  gtk_widget_destroy(GTK_WIDGET(hg->plot_main));
calcpa.c:  if(hg->plot_all==PLOT_ALL_ALL){
calcpa.c:  if(hg->plot_output==PLOT_OUTPUT_PDF){
calcpa.c:    surface = cairo_pdf_surface_create(hg->filename_pdf, width, height);
calcpa.c:      gtk_window_get_size(GTK_WINDOW(hg->plot_main), &width, &height);
calcpa.c:  if(hg->plot_output==PLOT_OUTPUT_PDF){
calcpa.c:  //if(hg->plot_target==PLOT_OBJTREE){
calcpa.c:  if(hg->plot_all!=PLOT_ALL_PLAN){
calcpa.c:	  hg->obj[hg->plot_i].name,
calcpa.c:	   hg->obj[hg->plot_i].ra,
calcpa.c:	    hg->obj[hg->plot_i].dec,
calcpa.c:	    hg->obj[hg->plot_i].equinox);
calcpa.c:  switch(hg->plot_mode){
calcpa.c:      sprintf(tmp,"AD[\"] (%d-%dA)", hg->wave1,hg->wave0);
calcpa.c:    //if(hg->skymon_mode==SKYMON_SET){
calcpa.c:	      hg->sun.s_set.hours,hg->sun.s_set.minutes);
calcpa.c:      if(hg->sun.s_set.hours>=ihst0){
calcpa.c:	x=lx*((gfloat)hg->sun.s_set.hours-ihst0
calcpa.c:	      +(gfloat)hg->sun.s_set.minutes/60.)/(gfloat)(ihst1-ihst0);
calcpa.c:	      hg->sun.s_rise.hours,hg->sun.s_rise.minutes);
calcpa.c:      if(hg->sun.s_rise.hours<(ihst1-24)){
calcpa.c:	x=lx*((ihst1-24)-(gfloat)hg->sun.s_rise.hours
calcpa.c:	      -(gfloat)hg->sun.s_rise.minutes/60.)/(gfloat)(ihst1-ihst0);
calcpa.c:	      hg->atw.s_set.hours,hg->atw.s_set.minutes);
calcpa.c:      if(hg->atw.s_set.hours>=ihst0){
calcpa.c:	x=lx*((gfloat)hg->atw.s_set.hours-ihst0
calcpa.c:	      +(gfloat)hg->atw.s_set.minutes/60.)/(gfloat)(ihst1-ihst0);
calcpa.c:	      hg->atw.s_rise.hours,hg->atw.s_rise.minutes);
calcpa.c:      if(hg->atw.s_rise.hours<(ihst1-24)){
calcpa.c:	x=lx*((ihst1-24)-(gfloat)hg->atw.s_rise.hours
calcpa.c:	      -(gfloat)hg->atw.s_rise.minutes/60.)/(gfloat)(ihst1-ihst0);
calcpa.c:    iyear=hg->fr_year;
calcpa.c:    month=hg->fr_month;
calcpa.c:    iday=hg->fr_day;
calcpa.c:    if(hg->skymon_mode==SKYMON_SET){
calcpa.c:      iyear=hg->skymon_year;
calcpa.c:      month=hg->skymon_month;
calcpa.c:      iday=hg->skymon_day;
calcpa.c:      hour=hg->skymon_hour;
calcpa.c:      min=hg->skymon_min;
calcpa.c:  //alambda=hg->obs_longitude;  //longitude[deg]
calcpa.c:  //phi=hg->obs_latitude;       //latitude [deg]      
calcpa.c:  //if(hg->plot_target==PLOT_OBJTREE){
calcpa.c:  if(hg->plot_all!=PLOT_ALL_PLAN){
calcpa.c:    //zonedate.gmtoff=(long)hg->obs_timezone*3600;
calcpa.c:    if(hg->plot_moon){
calcpa.c:      switch(hg->plot_mode){
calcpa.c:    for(i_list=0;i_list<hg->i_max;i_list++){
calcpa.c:      switch(hg->plot_all){ 
calcpa.c:	if(i_list==hg->plot_i)
calcpa.c:	plot_flag=hg->obj[i_list].check_sm;
calcpa.c:	//a0s=hg->obj[hg->plot_i].ra;
calcpa.c:	a0s=hg->obj[i_list].ra;
calcpa.c:	//d0s=hg->obj[hg->plot_i].dec;
calcpa.c:	d0s=hg->obj[i_list].dec;
calcpa.c:	  ad1=adrad(zrad,(double)hg->wave1/10000.,h,(double)hg->temp+t,
calcpa.c:		    (double)hg->pres,f);  //@3500A default
calcpa.c:	  ad0=adrad(zrad,(double)hg->wave0/10000,h,(double)hg->temp+t,
calcpa.c:		    (double)hg->pres,f);  //@5500A default
calcpa.c:	switch(hg->plot_mode){
calcpa.c:	    if(i_list==hg->plot_i){
calcpa.c:	      if(i_list==hg->plot_i){
calcpa.c:	      cairo_text_extents (cr, hg->obj[i_list].name, &extents);
calcpa.c:	      cairo_show_text(cr,hg->obj[i_list].name);
calcpa.c:	    if(i_list==hg->plot_i){
calcpa.c:	    if(i_list==hg->plot_i){
calcpa.c:	    if(i_list==hg->plot_i){
calcpa.c:    if(hg->plot_moon){
calcpa.c:      switch(hg->plot_mode){
calcpa.c:  for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
calcpa.c:    if(hg->plan[i_plan].type==PLAN_TYPE_OBJ){
calcpa.c:      a0s=hg->obj[hg->plan[i_plan].obj_i].ra;
calcpa.c:      d0s=hg->obj[hg->plan[i_plan].obj_i].dec;
calcpa.c:      zonedate.hours=(gint)(hg->plan[i_plan].sod/60/60);
calcpa.c:      zonedate.minutes=(hg->plan[i_plan].sod-(gint)zonedate.hours*60*60)/60;
calcpa.c:      //zonedate.gmtoff=(long)hg->obs_timezone*3600;
calcpa.c:      dhst0=(gdouble)hg->plan[i_plan].sod/60./60.;
calcpa.c:      utend=utstart+(double)hg->plan[i_plan].time/60./60.;
calcpa.c:      hst=(gdouble)hg->plan[i_plan].sod/60./60.;
calcpa.c:	ad1=adrad(zrad,(double)hg->wave1/10000.,h,(double)hg->temp+t,
calcpa.c:		  (double)hg->pres,f);  //@3500A default
calcpa.c:	ad0=adrad(zrad,(double)hg->wave0/10000,h,(double)hg->temp+t,
calcpa.c:		  (double)hg->pres,f);  //@5500A default
calcpa.c:      switch(hg->plot_mode){
calcpa.c:	  if(i_plan==hg->plot_i_plan){
calcpa.c:	      if(i_plan==hg->plot_i_plan){
calcpa.c:	      cairo_text_extents (cr, hg->obj[hg->plan[i_plan].obj_i].name,
calcpa.c:	      cairo_translate(cr, dx+lx*(phst[i]+(double)hg->plan[i_plan].time/60./60./2.-ihst0)/(gfloat)(ihst1-ihst0), dy+ly*(90-3)/90);
calcpa.c:	      cairo_show_text(cr, hg->obj[hg->plan[i_plan].obj_i].name);
calcpa.c:	  if(i_plan==hg->plot_i_plan){
calcpa.c:	  if(i_plan==hg->plot_i_plan){
calcpa.c:	  if(i_plan==hg->plot_i_plan){
calcpa.c:  if(hg->plot_output==PLOT_OUTPUT_PDF){
calcpa.c:  if(hg->plot_output==PLOT_OUTPUT_WINDOW){
calcpa.c:  hg->plot_output=PLOT_OUTPUT_WINDOW;
calcpa.c:    draw_plot_cairo(hg->plot_dw,NULL,
calcpa.c:  hg->plot_moon=gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(w));
calcpa.c:    draw_plot_cairo(hg->plot_dw,NULL,
calcpa.c:  hg->plot_output=PLOT_OUTPUT_PDF;
calcpa.c:    draw_plot_cairo(hg->plot_dw,NULL,
calcpa.c:  hg->plot_output=PLOT_OUTPUT_WINDOW;
calcpa.c:    hg->plot_mode=n;
calcpa.c:    hg->plot_all=n;
calcpa.c:  hg->plot_main = gtk_window_new(GTK_WINDOW_TOPLEVEL);
calcpa.c:  gtk_window_set_title(GTK_WINDOW(hg->plot_main), "HOE : Plot Window");
calcpa.c:  my_signal_connect(hg->plot_main,
calcpa.c:  gtk_widget_set_app_paintable(hg->plot_main, TRUE);
calcpa.c:  gtk_container_add (GTK_CONTAINER (hg->plot_main), vbox);
calcpa.c:    if(hg->plot_mode==PLOT_EL) iter_set=iter;
calcpa.c:    if(hg->plot_mode==PLOT_AZ) iter_set=iter;
calcpa.c:    if(hg->plot_mode==PLOT_AD) iter_set=iter;
calcpa.c:  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(button),hg->plot_moon);
calcpa.c:    if(hg->plot_all==PLOT_ALL_SINGLE) iter_set=iter;
calcpa.c:    if(hg->plot_all==PLOT_ALL_SELECTED) iter_set=iter;
calcpa.c:    if(hg->plot_all==PLOT_ALL_ALL) iter_set=iter;
calcpa.c:    if(hg->plot_all==PLOT_ALL_PLAN) iter_set=iter;
calcpa.c:  hg->plot_dw = gtk_drawing_area_new();
calcpa.c:  gtk_widget_set_size_request (hg->plot_dw, PLOT_WIDTH, PLOT_HEIGHT);
calcpa.c:  gtk_box_pack_start(GTK_BOX(vbox), hg->plot_dw, TRUE, TRUE, 0);
calcpa.c:  gtk_widget_set_app_paintable(hg->plot_dw, TRUE);
calcpa.c:  gtk_widget_show(hg->plot_dw);
calcpa.c:  my_signal_connect(hg->plot_dw, 
calcpa.c:  gtk_widget_show_all(hg->plot_main);
calcpa.c:  gdk_window_raise(hg->plot_main->window);
edit.c:  title_tmp=g_strconcat("HOE : ",g_path_get_basename(hg->filename_write),NULL);
edit.c:    if(hg->setup[i_use].use){
edit.c:    if(hg->setup[i_use].use){
edit.c:    for(i_list=0;i_list<hg->i_max;i_list++){
edit.c:      if(hg->obj[0].name){
edit.c:	gtk_list_store_set(store, &iter, 0, hg->obj[i_list].name,
edit.c:    hg->e_list=0;
edit.c:  hg->e_entry = gtk_entry_new ();
edit.c:  gtk_box_pack_start(GTK_BOX(hbox),hg->e_entry,FALSE,FALSE,0);
edit.c:  if(hg->obj[0].name){
edit.c:    sprintf(tmp,"%d",hg->obj[0].exp);
edit.c:    hg->e_exp=hg->obj[0].exp;
edit.c:    gtk_entry_set_text(GTK_ENTRY(hg->e_entry),tmp);
edit.c:  gtk_entry_set_editable(GTK_ENTRY(hg->e_entry),TRUE);
edit.c:  my_entry_set_width_chars(GTK_ENTRY(hg->e_entry),4);
edit.c:  my_signal_connect (hg->e_entry,
edit.c:		     &hg->e_exp);
edit.c:  hg->e_times=hg->obj[0].repeat;
edit.c:  hg->e_adj = (GtkAdjustment *)gtk_adjustment_new(hg->e_times,
edit.c:  my_signal_connect (hg->e_adj, "value_changed",
edit.c:		     &hg->e_times);
edit.c:  spinner =  gtk_spin_button_new (hg->e_adj, 0, 0);
edit.c:    hg->e_button[i_use]=gtk_button_new_with_label(tmp);
edit.c:    gtk_box_pack_start(GTK_BOX(hbox),hg->e_button[i_use],TRUE,TRUE,0);
edit.c:    if((hg->obj[0].setup[i_use])&&(hg->setup[i_use].use)){
edit.c:      gtk_widget_set_sensitive(hg->e_button[i_use], TRUE);
edit.c:      gtk_widget_set_sensitive(hg->e_button[i_use], FALSE);
edit.c:    my_signal_connect(hg->e_button[i_use],"pressed",
edit.c:  if(hg->setup[i_use].use){
edit.c:  infile=fopen(hg->filename_write,"r");
edit.c:  outfile = fopen(hg->filename_write, "w");
edit.c:      fprintf(stderr," File Write Error  \"%s\" \n", hg->filename_write);
edit.c:    fprintf(stderr," File Write Error  \"%s\" \n", hg->filename_write);
edit.c:  if(cdata->hg->setup[i_use].use){
edit.c:    if(cdata->hg->setup[i_use].setup<0){ // NonStd
edit.c:      i_set=-cdata->hg->setup[i_use].setup-1;
edit.c:	      cdata->hg->setup[i_use].slit_length);
edit.c:      if(cdata->hg->nonstd[i_set].col==COL_BLUE){
edit.c:		cdata->hg->setup[i_use].fil1,cdata->hg->setup[i_use].fil2,
edit.c:		cdata->hg->nonstd[i_set].cross);
edit.c:	if(cdata->hg->nonstd[i_set].echelle!=1440){
edit.c:	  sprintf(tmp, " ECHELLE=%d", cdata->hg->nonstd[i_set].echelle);
edit.c:	if(cdata->hg->nonstd[i_set].camr!=-3600){
edit.c:	  sprintf(tmp, " CAMERA_ROTATE=%d", cdata->hg->nonstd[i_set].camr);
edit.c:		cdata->hg->setup[i_use].fil1,cdata->hg->setup[i_use].fil2,
edit.c:		cdata->hg->nonstd[i_set].cross);
edit.c:	if(cdata->hg->nonstd[i_set].echelle!=1440){
edit.c:	  sprintf(tmp, " ECHELLE=%d", cdata->hg->nonstd[i_set].echelle);
edit.c:	if(cdata->hg->nonstd[i_set].camr!=-3600){
edit.c:	  sprintf(tmp, " CAMERA_ROTATE=%d", cdata->hg->nonstd[i_set].camr);
edit.c:      i_set=cdata->hg->setup[i_use].setup;
edit.c:	      cdata->hg->setup[i_use].slit_length);
edit.c:		cdata->hg->setup[i_use].fil1,
edit.c:		cdata->hg->setup[i_use].fil2,
edit.c:		cdata->hg->setup[i_use].fil1,
edit.c:		cdata->hg->setup[i_use].fil2,
edit.c:  if(cdata->hg->setup[i_use].use){
edit.c:      i_bin=cdata->hg->setup[i_use].binning;
edit.c:      if(cdata->hg->setup[i_use].setup < 0){ // NonStd
edit.c:		-cdata->hg->setup[i_use].setup,cdata->hg->binning[i_bin].x, cdata->hg->binning[i_bin].y);
edit.c:		setups[cdata->hg->setup[i_use].setup].initial,cdata->hg->binning[i_bin].x, cdata->hg->binning[i_bin].y);
edit.c:	      ,cdata->hg->setup[i_use].slit_length,cdata->hg->setup[i_use].slit_width);
edit.c:	      20/cdata->hg->binning[i_bin].x/cdata->hg->binning[i_bin].y);
edit.c:  i_list=cdata->hg->e_list;
edit.c:  switch(cdata->hg->obj[i_list].guide){
edit.c:    if(cdata->hg->obj[i_list].note){
edit.c:      sprintf(tmp, "# %s   No Guide,   %s\n",cdata->hg->obj[i_list].name,
edit.c:	      cdata->hg->obj[i_list].note);
edit.c:      sprintf(tmp, "# %s   No Guide\n",cdata->hg->obj[i_list].name);
edit.c:    if(cdata->hg->setup[i_use].setup < 0){ //Non-Std
edit.c:	      -cdata->hg->setup[i_use].setup,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].x,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].y);
edit.c:	      setups[cdata->hg->setup[i_use].setup].initial,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].x,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].y);
edit.c:    if(cdata->hg->setup[i_use].imr){
edit.c:      tgt=make_tgt(cdata->hg->obj[i_list].name);
edit.c:	      cdata->hg->sv_region,cdata->hg->exptime_sv,
edit.c:	      cdata->hg->obj[i_list].pa, 
edit.c:	      cdata->hg->setup[i_use].slit_length,
edit.c:	      cdata->hg->setup[i_use].slit_width,
edit.c:	      cdata->hg->sv_integrate);
edit.c:      tgt=make_tgt(cdata->hg->obj[i_list].name);
edit.c:	      cdata->hg->sv_region,cdata->hg->exptime_sv,
edit.c:	      cdata->hg->setup[i_use].slit_length,
edit.c:	      cdata->hg->setup[i_use].slit_width,
edit.c:	      cdata->hg->sv_integrate);
edit.c:    if(cdata->hg->obj[i_list].note){
edit.c:      sprintf(tmp, "# %s   AG Guide,   %s\n",cdata->hg->obj[i_list].name,
edit.c:	      cdata->hg->obj[i_list].note);
edit.c:      sprintf(tmp, "# %s   AG Guide\n",cdata->hg->obj[i_list].name);
edit.c:    if(cdata->hg->setup[i_use].setup < 0){ //Non-Std
edit.c:	      -cdata->hg->setup[i_use].setup,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].x,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].y);
edit.c:	      setups[cdata->hg->setup[i_use].setup].initial,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].x,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].y);
edit.c:    if(cdata->hg->setup[i_use].imr){
edit.c:      tgt=make_tgt(cdata->hg->obj[i_list].name);
edit.c:	      cdata->hg->sv_region,cdata->hg->exptime_sv,
edit.c:	      cdata->hg->obj[i_list].pa, 
edit.c:	      cdata->hg->setup[i_use].slit_length,
edit.c:	      cdata->hg->setup[i_use].slit_width,
edit.c:	      cdata->hg->exptime_factor,cdata->hg->brightness,cdata->hg->sv_integrate);
edit.c:      tgt=make_tgt(cdata->hg->obj[i_list].name);
edit.c:	      cdata->hg->sv_region,cdata->hg->exptime_sv,
edit.c:	      cdata->hg->setup[i_use].slit_length,
edit.c:	      cdata->hg->setup[i_use].slit_width,
edit.c:	      cdata->hg->exptime_factor,cdata->hg->brightness,cdata->hg->sv_integrate);
edit.c:    if(cdata->hg->obj[i_list].note){
edit.c:      sprintf(tmp, "# %s   SV Guide,   %s\n",cdata->hg->obj[i_list].name,
edit.c:	      cdata->hg->obj[i_list].note);
edit.c:      sprintf(tmp, "# %s   SV Guide\n",cdata->hg->obj[i_list].name);
edit.c:    if(cdata->hg->setup[i_use].setup < 0){ //Non-Std
edit.c:	      -cdata->hg->setup[i_use].setup,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].x,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].y);
edit.c:	      setups[cdata->hg->setup[i_use].setup].initial,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].x,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].y);
edit.c:    if(cdata->hg->setup[i_use].imr){
edit.c:      tgt=make_tgt(cdata->hg->obj[i_list].name);
edit.c:	      cdata->hg->sv_region,cdata->hg->sv_calc,cdata->hg->exptime_sv,
edit.c:	      cdata->hg->obj[i_list].pa, 
edit.c:	      cdata->hg->setup[i_use].slit_length,
edit.c:	      cdata->hg->setup[i_use].slit_width,
edit.c:	      cdata->hg->exptime_factor,cdata->hg->brightness,cdata->hg->sv_integrate);
edit.c:      tgt=make_tgt(cdata->hg->obj[i_list].name);
edit.c:	      cdata->hg->sv_region,cdata->hg->sv_calc,cdata->hg->exptime_sv,
edit.c:	      cdata->hg->setup[i_use].slit_length,
edit.c:	      cdata->hg->setup[i_use].slit_width,
edit.c:	      cdata->hg->exptime_factor,cdata->hg->brightness,cdata->hg->sv_integrate);
edit.c:    if(cdata->hg->obj[i_list].note){
edit.c:      sprintf(tmp, "# %s   SV[Safe] Guide,   %s\n",cdata->hg->obj[i_list].name,
edit.c:	      cdata->hg->obj[i_list].note);
edit.c:      sprintf(tmp, "# %s   SV[Safe] Guide\n",cdata->hg->obj[i_list].name);
edit.c:    if(cdata->hg->setup[i_use].setup < 0){ //Non-Std
edit.c:	      -cdata->hg->setup[i_use].setup,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].x,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].y);
edit.c:	      setups[cdata->hg->setup[i_use].setup].initial,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].x,
edit.c:	      cdata->hg->binning[cdata->hg->setup[i_use].binning].y);
edit.c:    if(cdata->hg->setup[i_use].imr){
edit.c:      tgt=make_tgt(cdata->hg->obj[i_list].name);
edit.c:	      cdata->hg->sv_region,cdata->hg->sv_calc,cdata->hg->exptime_sv,
edit.c:	      cdata->hg->obj[i_list].pa, 
edit.c:	      cdata->hg->setup[i_use].slit_length,
edit.c:	      cdata->hg->setup[i_use].slit_width,
edit.c:	      cdata->hg->exptime_factor,cdata->hg->brightness,cdata->hg->sv_integrate);
edit.c:      tgt=make_tgt(cdata->hg->obj[i_list].name);
edit.c:	      cdata->hg->sv_region,cdata->hg->sv_calc,cdata->hg->exptime_sv,
edit.c:	      cdata->hg->setup[i_use].slit_length,
edit.c:	      cdata->hg->setup[i_use].slit_width,
edit.c:	      cdata->hg->exptime_factor,cdata->hg->brightness,cdata->hg->sv_integrate);
edit.c:  tgt=make_tgt(cdata->hg->obj[i_list].name);
edit.c:	  cdata->hg->e_exp, cdata->hg->sv_integrate, tgt);
edit.c:  for(i_times=0;i_times<cdata->hg->e_times;i_times++){
edit.c:      gtk_tree_model_get (model, &iter, 1, &hg->e_list, -1);
edit.c:  sprintf(tmp,"%d",hg->obj[hg->e_list].exp);
edit.c:  hg->e_exp=hg->obj[hg->e_list].exp;
edit.c:  gtk_entry_set_text(GTK_ENTRY(hg->e_entry),tmp);
edit.c:  gtk_adjustment_set_value(hg->e_adj,(gdouble)hg->obj[hg->e_list].repeat);
edit.c:    if((hg->obj[hg->e_list].setup[i_use])&&(hg->setup[i_use].use)){
edit.c:      gtk_widget_set_sensitive(hg->e_button[i_use], TRUE);
edit.c:      gtk_widget_set_sensitive(hg->e_button[i_use], FALSE);
edit.c:  i_list=hg->e_list;
edit.c:  if(hg->obj[i_list].name){
edit.c:    tgt=make_tgt(hg->obj[i_list].name);
edit.c:	    tgt, hg->obj[i_list].name, 
edit.c:	    hg->obj[i_list].ra,  hg->obj[i_list].dec, hg->obj[i_list].equinox);
efs.c:  gtk_widget_destroy(GTK_WIDGET(hg->efs_main));
efs.c:    gdk_window_raise(hg->efs_main->window);
efs.c:    draw_efs_cairo(hg->efs_dw,NULL,(gpointer)hg);
efs.c:  hg->efs_main = gtk_window_new(GTK_WINDOW_TOPLEVEL);
efs.c:  gtk_window_set_title(GTK_WINDOW(hg->efs_main), "HOE : Echelle Format Simulator");
efs.c:  //gtk_widget_set_usize(hg->skymon_main, SKYMON_SIZE, SKYMON_SIZE);
efs.c:  my_signal_connect(hg->efs_main,
efs.c:  gtk_widget_set_app_paintable(hg->efs_main, TRUE);
efs.c:  gtk_container_add (GTK_CONTAINER (hg->efs_main), vbox);
efs.c:    if(hg->efs_mode==EFS_PLOT_EFS) iter_set=iter;
efs.c:    if(hg->efs_mode==EFS_PLOT_FSR) iter_set=iter;
efs.c:  hg->efs_dw = gtk_drawing_area_new();
efs.c:  gtk_widget_set_size_request (hg->efs_dw, EFS_WIDTH, EFS_HEIGHT);
efs.c:  gtk_box_pack_start(GTK_BOX(vbox), hg->efs_dw, TRUE, TRUE, 0);
efs.c:  gtk_widget_set_app_paintable(hg->efs_dw, TRUE);
efs.c:  gtk_widget_show(hg->efs_dw);
efs.c:  my_signal_connect(hg->efs_dw, 
efs.c:  gtk_widget_show_all(hg->efs_main);
efs.c:  gdk_window_raise(hg->efs_main->window);
efs.c:  if(hg->efs_output==EFS_OUTPUT_PDF){
efs.c:    surface = cairo_pdf_surface_create(hg->filename_pdf, width, height);
efs.c:      gtk_window_get_size(GTK_WINDOW(hg->efs_main), &width, &height);
efs.c:      if((hg->line[i].name)&&(hg->line[i].wave>0)){
efs.c:	strcpy(line_name[line_max+1],hg->line[i].name);
efs.c:	wl[line_max+1]=(double)hg->line[i].wave/10.;
efs.c:    if(hg->setup[hg->efs_setup].setup<0){  // None Std
efs.c:      nonstd_iset=-hg->setup[hg->efs_setup].setup-1;
efs.c:      if(hg->nonstd[nonstd_iset].col==COL_BLUE){
efs.c:    else if(hg->setup[hg->efs_setup].setup<StdI2b){ // Std Blue
efs.c:    else{  //if (hg->setup[hg->efs_setup].setup<StdHa){  // Std Red
efs.c:    if(hg->setup[hg->efs_setup].setup<0){  // None Std
efs.c:      theta_C=((double)hg->nonstd[nonstd_iset].cross-(gdouble)hg->d_cross)/60/60;
efs.c:      theta_E_mes=(double)hg->nonstd[nonstd_iset].echelle/60./60.;
efs.c:      det_rot=(double)hg->nonstd[nonstd_iset].camr/60./60.;
efs.c:      theta_C=(double)(setups[hg->setup[hg->efs_setup].setup].cross_scan)/60./60.;
efs.c:    sprintf(crossrot,"Cross-rot=%.4lf[deg]",theta_C+(gdouble)hg->d_cross/60./60.);
efs.c:    if(hg->efs_mode==EFS_PLOT_EFS){
efs.c:    if(hg->efs_mode==EFS_PLOT_EFS){
efs.c:      switch(hg->setup[hg->efs_setup].is){
efs.c:	slit_pix=((double)hg->setup[hg->efs_setup].slit_length)/0.138/500;
efs.c:	    /hg->binning[hg->setup[hg->efs_setup].binning].x;
efs.c:      switch(hg->setup[hg->efs_setup].is){
efs.c:		min_sep,(float)hg->setup[hg->efs_setup].slit_length/500);
efs.c:  if(hg->setup[hg->efs_setup].setup<0){  // None Std
efs.c:	    hg->efs_setup+1,
efs.c:	    -hg->setup[hg->efs_setup].setup,
efs.c:	    hg->binning[hg->setup[hg->efs_setup].binning].x,
efs.c:	    hg->binning[hg->setup[hg->efs_setup].binning].y);
efs.c:	    hg->efs_setup+1,
efs.c:	    setups[hg->setup[hg->efs_setup].setup].initial,
efs.c:	    hg->binning[hg->setup[hg->efs_setup].binning].x,
efs.c:	    hg->binning[hg->setup[hg->efs_setup].binning].y);
efs.c:  if(hg->efs_mode==EFS_PLOT_EFS){
efs.c:		      ((4096+ccdgap)-ypt[i])/hg->binning[hg->setup[hg->efs_setup].binning].x,
efs.c:		      xpt[i]/hg->binning[hg->setup[hg->efs_setup].binning].y);
efs.c:		      ((4096+ccdgap)-ypt[i])/hg->binning[hg->setup[hg->efs_setup].binning].x,
efs.c:		      xpt[i]/hg->binning[hg->setup[hg->efs_setup].binning].y);
efs.c:		      ((2048-ccdgap)-ypt[i])/hg->binning[hg->setup[hg->efs_setup].binning].x,
efs.c:		      xpt[i]/hg->binning[hg->setup[hg->efs_setup].binning].y);
efs.c:		      ((2048-ccdgap)-ypt[i])/hg->binning[hg->setup[hg->efs_setup].binning].x,
efs.c:		      xpt[i]/hg->binning[hg->setup[hg->efs_setup].binning].y);
efs.c:  if(hg->efs_output==EFS_OUTPUT_PDF){
efs.c:  if(hg->efs_output==EFS_OUTPUT_WINDOW){
efs.c:  hg->efs_output=EFS_OUTPUT_WINDOW;
efs.c:    draw_efs_cairo(hg->efs_dw,NULL,
efs.c:  hg->efs_output=EFS_OUTPUT_PDF;
efs.c:    draw_efs_cairo(hg->efs_dw,NULL,
efs.c:  hg->efs_output=EFS_OUTPUT_WINDOW;
efs.c:    hg->efs_mode=n;
fc.c:  tgt=make_simbad_id(hg->addobj_name);
fc.c:  switch(hg->addobj_type){
fc.c:    if(hg->fcdb_path) g_free(hg->fcdb_path);
fc.c:    hg->fcdb_path=g_strdup_printf(ADDOBJ_SIMBAD_PATH,tgt);
fc.c:    if(hg->fcdb_host) g_free(hg->fcdb_host);
fc.c:    if(hg->fcdb_simbad==FCDB_SIMBAD_HARVARD){
fc.c:      hg->fcdb_host=g_strdup(FCDB_HOST_SIMBAD_HARVARD);
fc.c:      hg->fcdb_host=g_strdup(FCDB_HOST_SIMBAD_STRASBG);
fc.c:    if(hg->fcdb_path) g_free(hg->fcdb_path);
fc.c:    hg->fcdb_path=g_strdup_printf(ADDOBJ_NED_PATH,tgt);
fc.c:    if(hg->fcdb_host) g_free(hg->fcdb_host);
fc.c:    hg->fcdb_host=g_strdup(FCDB_HOST_NED);
fc.c:  if(hg->fcdb_file) g_free(hg->fcdb_file);
fc.c:  hg->fcdb_file=g_strconcat(hg->temp_dir,
fc.c:  switch(hg->addobj_type){
fc.c:  hg->pbar=gtk_progress_bar_new();
fc.c:  gtk_box_pack_start(GTK_BOX(GTK_DIALOG(dialog)->vbox),hg->pbar,TRUE,TRUE,0);
fc.c:  gtk_progress_bar_pulse(GTK_PROGRESS_BAR(hg->pbar));
fc.c:  gtk_progress_bar_set_orientation (GTK_PROGRESS_BAR (hg->pbar), 
fc.c:  gtk_progress_bar_set_pulse_step(GTK_PROGRESS_BAR(hg->pbar),0.05);
fc.c:  gtk_widget_show(hg->pbar);
fc.c:  unlink(hg->fcdb_file);
fc.c:  switch(hg->addobj_type){
fc.c:    hg->plabel=gtk_label_new("Searching objects in SIMBAD ...");
fc.c:    hg->plabel=gtk_label_new("Searching objects in NED ...");
fc.c:  gtk_misc_set_alignment (GTK_MISC (hg->plabel), 1.0, 0.5);
fc.c:		     hg->plabel,FALSE,FALSE,0);
fc.c:  if(hg->addobj_voname){
fc.c:    tmp=g_strdup_printf("%09.2lf",hg->addobj_ra);
fc.c:    gtk_entry_set_text(GTK_ENTRY(hg->addobj_entry_ra),tmp);
fc.c:    tmp=g_strdup_printf("%+010.2lf",hg->addobj_dec);
fc.c:    gtk_entry_set_text(GTK_ENTRY(hg->addobj_entry_dec),tmp);
fc.c:    switch(hg->addobj_type){
fc.c:			  hg->addobj_name, 
fc.c:			  hg->addobj_voname, 
fc.c:			  hg->addobj_votype);
fc.c:			  hg->addobj_name, 
fc.c:			  hg->addobj_voname, 
fc.c:			  hg->addobj_votype);
fc.c:    gtk_label_set_text(GTK_LABEL(hg->addobj_label),tmp);
fc.c:    switch(hg->addobj_type){
fc.c:			  hg->addobj_name); 
fc.c:			  hg->addobj_name); 
fc.c:    gtk_label_set_text(GTK_LABEL(hg->addobj_label),tmp);
fc.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
fc.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->objtree));
fc.c:    hg->dss_i=i;
fc.c:  switch(hg->fc_mode){
fc.c:  hg->pbar=gtk_progress_bar_new();
fc.c:  gtk_box_pack_start(GTK_BOX(GTK_DIALOG(dialog)->vbox),hg->pbar,TRUE,TRUE,0);
fc.c:  gtk_progress_bar_pulse(GTK_PROGRESS_BAR(hg->pbar));
fc.c:  gtk_progress_bar_set_orientation (GTK_PROGRESS_BAR (hg->pbar), 
fc.c:  gtk_progress_bar_set_pulse_step(GTK_PROGRESS_BAR(hg->pbar),0.05);
fc.c:  gtk_widget_show(hg->pbar);
fc.c:  unlink(hg->dss_file);
fc.c:  hg->plabel=gtk_label_new("Retrieving image from website ...");
fc.c:  gtk_misc_set_alignment (GTK_MISC (hg->plabel), 0.0, 0.5);
fc.c:		       hg->plabel,FALSE,FALSE,0);
fc.c:  hg->dss_arcmin_ip=hg->dss_arcmin;
fc.c:    pixbuf_fc = gdk_pixbuf_new_from_file(hg->dss_file, NULL);
fc.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
fc.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->objtree));
fc.c:  if(hg->i_max<=0) return;
fc.c:  switch(hg->fc_mode){
fc.c:  hg->pbar=gtk_progress_bar_new();
fc.c:  gtk_box_pack_start(GTK_BOX(GTK_DIALOG(dialog)->vbox),hg->pbar,TRUE,TRUE,0);
fc.c:  gtk_progress_bar_pulse(GTK_PROGRESS_BAR(hg->pbar));
fc.c:  gtk_progress_bar_set_orientation (GTK_PROGRESS_BAR (hg->pbar), 
fc.c:  gtk_progress_bar_set_pulse_step(GTK_PROGRESS_BAR(hg->pbar),0.05);
fc.c:  gtk_widget_show(hg->pbar);
fc.c:  hg->pbar2=gtk_progress_bar_new();
fc.c:  gtk_box_pack_start(GTK_BOX(GTK_DIALOG(dialog)->vbox),hg->pbar2,TRUE,TRUE,0);
fc.c:  gtk_progress_bar_set_orientation (GTK_PROGRESS_BAR (hg->pbar2), 
fc.c:  gtk_widget_show(hg->pbar2);
fc.c:  hg->plabel=gtk_label_new("Retrieving image from website ...");
fc.c:  gtk_misc_set_alignment (GTK_MISC (hg->plabel), 0.0, 0.5);
fc.c:		     hg->plabel,TRUE,TRUE,0);
fc.c:  hg->fc_output=FC_OUTPUT_PDF_ALL;
fc.c:  surface = cairo_pdf_surface_create(hg->filename_pdf, PLOT_HEIGHT, PLOT_HEIGHT);
fc.c:  for(i_list=0;i_list<hg->i_max;i_list++){
fc.c:    if(hg->obj[i_list].check_sm) total_check++;
fc.c:  for(i_list=0;i_list<hg->i_max;i_list++){
fc.c:    if((get_all) || (hg->obj[i_list].check_sm)){
fc.c:      hg->dss_i=i_list;
fc.c:      hg->dss_arcmin_ip=hg->dss_arcmin;
fc.c:      gtk_progress_bar_set_text(GTK_PROGRESS_BAR(hg->pbar),"Downloading ...");
fc.c:	gtk_progress_bar_set_text(GTK_PROGRESS_BAR(hg->pbar),"Creating PDF ...");
fc.c:	  pixbuf_fc = gdk_pixbuf_new_from_file(hg->dss_file, NULL);
fc.c:	gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(hg->pbar2),
fc.c:				      (gdouble)(hg->dss_i+1)/(gdouble)(hg->i_max) :
fc.c:				      (gdouble)(hg->dss_i+1)/(gdouble)(total_check));
fc.c:		(get_all) ? hg->i_max : total_check);
fc.c:	gtk_progress_bar_set_text(GTK_PROGRESS_BAR(hg->pbar2),tmp);
fc.c:  hg->fc_output=FC_OUTPUT_WINDOW;
fc.c:  if(GTK_WIDGET_REALIZED(hg->pbar)){
fc.c:      sz=get_file_size(hg->dss_file);
fc.c:      sz=get_file_size(hg->fcdb_file);
fc.c:    gtk_progress_bar_pulse(GTK_PROGRESS_BAR(hg->pbar));
fc.c:	if((hg->fc_mode<FC_SEP2)||(hg->fc_mode>FC_SEP3)){
fc.c:	switch(hg->fcdb_type){
fc.c:    gtk_label_set_text(GTK_LABEL(hg->plabel), tmp);
fc.c:    gdk_window_raise(hg->fc_main->window);
fc.c:    hg->fc_output=FC_OUTPUT_WINDOW;
fc.c:    draw_fc_cairo(hg->fc_dw,NULL,
fc.c:  if((hg->fc_mode>=FC_SKYVIEW_GALEXF)&&(hg->fc_mode<=FC_SKYVIEW_WISE22)){
fc.c:    gtk_widget_set_sensitive(hg->fc_frame_col,TRUE);
fc.c:    gtk_widget_set_sensitive(hg->fc_frame_col,FALSE);
fc.c:  if((hg->fc_mode>=FC_SKYVIEW_GALEXF)&&(hg->fc_mode<=FC_SKYVIEW_WISE22)){
fc.c:    gtk_widget_set_sensitive(hg->fc_frame_col_pdf,TRUE);
fc.c:    gtk_widget_set_sensitive(hg->fc_frame_col_pdf,FALSE);
fc.c:  hg->fc_main = gtk_window_new(GTK_WINDOW_TOPLEVEL);
fc.c:  gtk_window_set_title(GTK_WINDOW(hg->fc_main), "HOE : Finding Chart");
fc.c:  my_signal_connect(hg->fc_main,
fc.c:  gtk_widget_set_app_paintable(hg->fc_main, TRUE);
fc.c:  gtk_container_add (GTK_CONTAINER (hg->fc_main), vbox);
fc.c:    if(hg->fc_mode==FC_STSCI_DSS1R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_STSCI_DSS1B) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_STSCI_DSS2R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_STSCI_DSS2B) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_STSCI_DSS2IR) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_ESO_DSS1R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_ESO_DSS2R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_ESO_DSS2B) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_ESO_DSS2IR) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_GALEXF) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_GALEXN) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_DSS1R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_DSS1B) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_DSS2R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_DSS2B) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_DSS2IR) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_SDSSU) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_SDSSG) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_SDSSR) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_SDSSI) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_SDSSZ) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_2MASSJ) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_2MASSH) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_2MASSK) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_WISE34) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_WISE46) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_WISE12) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_WISE22) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SDSS) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SDSS13) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANCOL) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANG) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANR) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANI) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANZ) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANY) iter_set=iter;
fc.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->dss_arcmin,
fc.c:		     &hg->dss_arcmin);
fc.c:  hg->fc_frame_col = gtk_frame_new ("Scale");
fc.c:  gtk_table_attach (GTK_TABLE(table), hg->fc_frame_col, 3, 4, 0, 2,
fc.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->fc_frame_col), 0);
fc.c:  gtk_container_add (GTK_CONTAINER (hg->fc_frame_col), hbox2);
fc.c:  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(button),hg->dss_log);
fc.c:		    &hg->dss_log);
fc.c:    if(hg->dss_scale==FC_SCALE_LINEAR) iter_set=iter;
fc.c:    if(hg->dss_scale==FC_SCALE_LOG) iter_set=iter;
fc.c:    if(hg->dss_scale==FC_SCALE_SQRT) iter_set=iter;
fc.c:    if(hg->dss_scale==FC_SCALE_HISTEQ) iter_set=iter;
fc.c:    if(hg->dss_scale==FC_SCALE_LOGLOG) iter_set=iter;
fc.c:		       &hg->dss_scale);
fc.c:  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(button),hg->dss_invert);
fc.c:		    &hg->dss_invert);
fc.c:  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(button),hg->dss_hist);
fc.c:		    &hg->dss_hist);
fc.c:    if(hg->fc_inst==FC_INST_NONE) iter_set=iter;
fc.c:    if(hg->fc_inst==FC_INST_HDS) iter_set=iter;
fc.c:    if(hg->fc_inst==FC_INST_IRCS) iter_set=iter;
fc.c:    if(hg->fc_inst==FC_INST_FOCAS) iter_set=iter;
fc.c:    if(hg->fc_inst==FC_INST_MOIRCS) iter_set=iter;
fc.c:    if(hg->fc_inst==FC_INST_SPCAM) iter_set=iter;
fc.c:		       &hg->fc_inst);
fc.c:  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(button),hg->dss_draw_slit);
fc.c:		    &hg->dss_draw_slit);
fc.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->dss_pa,
fc.c:		     &hg->dss_pa);
fc.c:  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(button),hg->dss_flip);
fc.c:		    &hg->dss_flip);
fc.c:  hg->fc_dw = gtk_drawing_area_new();
fc.c:  gtk_widget_set_size_request (hg->fc_dw, FC_WIDTH, FC_HEIGHT);
fc.c:  gtk_box_pack_start(GTK_BOX(hbox), hg->fc_dw, TRUE, TRUE, 0);
fc.c:  gtk_widget_set_app_paintable(hg->fc_dw, TRUE);
fc.c:  gtk_widget_show(hg->fc_dw);
fc.c:  my_signal_connect(hg->fc_dw, 
fc.c:  gtk_widget_show_all(hg->fc_main);
fc.c:  gdk_window_raise(hg->fc_main->window);
fc.c:    if(hg->fc_mode==FC_STSCI_DSS1R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_STSCI_DSS1B) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_STSCI_DSS2R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_STSCI_DSS2B) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_STSCI_DSS2IR) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_ESO_DSS1R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_ESO_DSS2R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_ESO_DSS2B) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_ESO_DSS2IR) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_GALEXF) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_GALEXN) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_DSS1R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_DSS1B) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_DSS2R) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_DSS2B) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_DSS2IR) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_SDSSU) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_SDSSG) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_SDSSR) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_SDSSI) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_SDSSZ) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_2MASSJ) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_2MASSH) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_2MASSK) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_WISE34) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_WISE46) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_WISE12) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SKYVIEW_WISE22) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SDSS) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_SDSS13) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANCOL) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANG) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANR) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANI) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANZ) iter_set=iter;
fc.c:    if(hg->fc_mode==FC_PANY) iter_set=iter;
fc.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->dss_arcmin,
fc.c:		     &hg->dss_arcmin);
fc.c:  hg->fc_frame_col_pdf = gtk_frame_new ("Scale");
fc.c:  gtk_table_attach (GTK_TABLE(table), hg->fc_frame_col_pdf, 3, 4, 0, 2,
fc.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->fc_frame_col_pdf), 0);
fc.c:  gtk_container_add (GTK_CONTAINER (hg->fc_frame_col_pdf), hbox2);
fc.c:  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(button),hg->dss_log);
fc.c:		    &hg->dss_log);
fc.c:    if(hg->dss_scale==FC_SCALE_LINEAR) iter_set=iter;
fc.c:    if(hg->dss_scale==FC_SCALE_LOG) iter_set=iter;
fc.c:    if(hg->dss_scale==FC_SCALE_SQRT) iter_set=iter;
fc.c:    if(hg->dss_scale==FC_SCALE_HISTEQ) iter_set=iter;
fc.c:    if(hg->dss_scale==FC_SCALE_LOGLOG) iter_set=iter;
fc.c:		       &hg->dss_scale);
fc.c:  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(button),hg->dss_invert);
fc.c:		    &hg->dss_invert);
fc.c:    if(hg->fc_inst==FC_INST_NONE) iter_set=iter;
fc.c:    if(hg->fc_inst==FC_INST_HDS) iter_set=iter;
fc.c:    if(hg->fc_inst==FC_INST_IRCS) iter_set=iter;
fc.c:    if(hg->fc_inst==FC_INST_FOCAS) iter_set=iter;
fc.c:    if(hg->fc_inst==FC_INST_MOIRCS) iter_set=iter;
fc.c:    if(hg->fc_inst==FC_INST_SPCAM) iter_set=iter;
fc.c:		       &hg->fc_inst);
fc.c:  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(button),hg->dss_draw_slit);
fc.c:		    &hg->dss_draw_slit);
fc.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->dss_pa,
fc.c:		     &hg->dss_pa);
fc.c:  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(button),hg->dss_flip);
fc.c:		    &hg->dss_flip);
fc.c:  gtk_widget_destroy(GTK_WIDGET(hg->fc_main));
fc.c:  if(hg->dwThreadID_dss){
fc.c:    PostThreadMessage(hg->dwThreadID_dss, WM_QUIT, 0, 0);
fc.c:    WaitForSingleObject(hg->hThread_dss, INFINITE);
fc.c:    CloseHandle(hg->hThread_dss);
fc.c:  if(hg->dwThreadID_fcdb){
fc.c:    PostThreadMessage(hg->dwThreadID_fcdb, WM_QUIT, 0, 0);
fc.c:    WaitForSingleObject(hg->hThread_fcdb, INFINITE);
fc.c:    CloseHandle(hg->hThread_fcdb);
fc.c:    if(hg->dss_flip){
fc.c:    switch(hg->fc_inst){
fc.c:      if(hg->dss_flip){
fc.c:	cairo_rotate (cr,-M_PI*(gdouble)hg->dss_pa/180.);
fc.c:	cairo_rotate (cr,M_PI*(gdouble)hg->dss_pa/180.);
fc.c:      if(hg->dss_flip){
fc.c:	cairo_rotate (cr,-M_PI*(gdouble)(90-hg->dss_pa)/180.);
fc.c:	cairo_rotate (cr,M_PI*(gdouble)(90-hg->dss_pa)/180.);
fc.c:    switch(hg->fc_inst){
fc.c:      if(hg->dss_draw_slit){
fc.c:		  ((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.,
fc.c:	cairo_set_line_width (cr, (gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip/60.*HDS_SLIT_MASK_ARCSEC);
fc.c:		      ((gdouble)height_file*r)/2-((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.);
fc.c:		      ((gdouble)height_file*r)/2-(gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*(gdouble)hg->setup[0].slit_length/2./500./60.);
fc.c:		      ((gdouble)height_file*r)/2+(gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*(gdouble)hg->setup[0].slit_length/2./500./60.);
fc.c:		      ((gdouble)height_file*r)/2+((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.);
fc.c:	cairo_set_line_width (cr, (gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip/60.*hg->setup[0].slit_width/500.);
fc.c:		      ((gdouble)height_file*r)/2-(gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*(gdouble)hg->setup[0].slit_length/2./500./60.);
fc.c:		      ((gdouble)height_file*r)/2+(gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*(gdouble)hg->setup[0].slit_length/2./500./60.);
fc.c:		((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.,
fc.c:		    ((gdouble)width_file*r)/2+((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*cos(M_PI/4),
fc.c:		    ((gdouble)height_file*r)/2-((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*sin(M_PI/4));
fc.c:		    ((gdouble)width_file*r)/2+1.5*((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*cos(M_PI/4),
fc.c:		    ((gdouble)height_file*r)/2-1.5*((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*sin(M_PI/4));
fc.c:		    ((gdouble)width_file*r)/2+1.5*((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*cos(M_PI/4),
fc.c:		    ((gdouble)height_file*r)/2-1.5*((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*sin(M_PI/4));
fc.c:		      -((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*IRCS_X_ARCSEC/60.)/2.,
fc.c:		      -((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*IRCS_Y_ARCSEC/60.)/2.,
fc.c:		      (gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*IRCS_X_ARCSEC/60.,
fc.c:		      (gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*IRCS_Y_ARCSEC/60.);
fc.c:		    -((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*IRCS_Y_ARCSEC/60.)/2.-5);
fc.c:		((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*FOCAS_R_ARCMIN,
fc.c:		    -FOCAS_R_ARCMIN/2.*((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip)-5);
fc.c:      if(hg->dss_draw_slit){
fc.c:		  ((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*FOCAS_R_ARCMIN,
fc.c:	cairo_set_line_width (cr, FOCAS_GAP_ARCSEC/60.*((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip));
fc.c:		      cos(M_PI/4)*((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*FOCAS_R_ARCMIN+5,
fc.c:		      -sin(M_PI/4)*((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*FOCAS_R_ARCMIN-5);
fc.c:		      cos(M_PI/4)*((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*FOCAS_R_ARCMIN+5,
fc.c:		      sin(M_PI/4)*((gdouble)width_file*r)/(gdouble)hg->dss_arcmin_ip/2.*FOCAS_R_ARCMIN+extents.height+5);
fc.c:		      -((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN)/2.,
fc.c:		      -((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.,
fc.c:		      (gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN,
fc.c:		      (gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN);
fc.c:		    -((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.-5);
fc.c:      if(hg->dss_draw_slit){
fc.c:			-((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN)/2.,
fc.c:			-((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.,
fc.c:			(gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN,
fc.c:			(gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN);
fc.c:	cairo_set_line_width (cr, MOIRCS_GAP_ARCSEC/60.*((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip));
fc.c:		      -((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN)/2.,
fc.c:		      ((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.);
fc.c:		      -((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN)/2.+MOIRCS_VIG1X_ARCSEC/60.*((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip),
fc.c:		      ((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.);
fc.c:		      -((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN)/2.,
fc.c:		      ((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.-MOIRCS_VIG1Y_ARCSEC/60.*((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip));
fc.c:		      -((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN)/2.,
fc.c:		      -((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.);
fc.c:		      -((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN)/2.+MOIRCS_VIG2X_ARCSEC/60.*((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip),
fc.c:		      -((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.);
fc.c:		      -((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN)/2.,
fc.c:		      -((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.+MOIRCS_VIG2Y_ARCSEC/60.*((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip));
fc.c:		  (gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_VIGR_ARCMIN/2.,
fc.c:		      ((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN)/2.+5,
fc.c:		      -((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.+extents.height);
fc.c:		      ((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_X_ARCMIN)/2.+5,
fc.c:		      ((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_Y_ARCMIN)/2.);
fc.c:		      -(gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*MOIRCS_VIGR_ARCMIN/2.-5);
fc.c:		      -((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*SPCAM_X_ARCMIN)/2.,
fc.c:		      -((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*SPCAM_Y_ARCMIN)/2.,
fc.c:		      (gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip*SPCAM_X_ARCMIN,
fc.c:		      (gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*SPCAM_Y_ARCMIN);
fc.c:		    -((gdouble)height_file*r/(gdouble)hg->dss_arcmin_ip*SPCAM_Y_ARCMIN)/2.-5);
fc.c:      if(hg->dss_draw_slit){
fc.c:	x_ccd=0.20/60.*2048.*((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip);
fc.c:	y_ccd=0.20/60.*4096.*((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip);
fc.c:	gap_ccd=SPCAM_GAP_ARCSEC/60.*((gdouble)width_file*r/(gdouble)hg->dss_arcmin_ip);
fc.c:    ra_0=hg->obj[hg->dss_i].ra;
fc.c:    if(hg->obj[hg->dss_i].dec<0){
fc.c:      dec_0=-hg->obj[hg->dss_i].dec;
fc.c:      dec_0=hg->obj[hg->dss_i].dec;
fc.c:    cairo_show_text(cr,hg->obj[hg->dss_i].name);
fc.c:    switch(hg->fc_mode){
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:	      hg->dss_arcmin_ip,hg->dss_arcmin_ip);
fc.c:    switch(hg->fc_inst){
fc.c:      if(hg->dss_flip){
fc.c:	cairo_rotate (cr,-M_PI*(gdouble)hg->dss_pa/180.);
fc.c:	cairo_rotate (cr,M_PI*(gdouble)hg->dss_pa/180.);
fc.c:      if(hg->dss_flip){
fc.c:	cairo_rotate (cr,-M_PI*(gdouble)(90-hg->dss_pa)/180.);
fc.c:	cairo_rotate (cr,M_PI*(gdouble)(90-hg->dss_pa)/180.);
fc.c:    if(hg->dss_flip){
fc.c:    if(hg->dss_flip){
fc.c:  if(hg->fc_output!=FC_OUTPUT_WINDOW){
fc.c:  if(hg->fc_output!=FC_OUTPUT_WINDOW){
fc.c:    surface = cairo_pdf_surface_create(hg->filename_pdf, width, height);
fc.c:      gtk_window_get_size(GTK_WINDOW(hg->fc_main), &width, &height);
fc.c:  if(hg->fc_output!=FC_OUTPUT_WINDOW){
fc.c:  if(hg->fc_output==FC_OUTPUT_WINDOW){
fc.c:    hg->fc_output=FC_OUTPUT_WINDOW;
fc.c:    draw_fc_cairo(hg->fc_dw,NULL,
fc.c:  switch(hg->fc_mode){
fc.c:    if(hg->dss_host) g_free(hg->dss_host);
fc.c:    hg->dss_host             =g_strdup(FC_HOST_STSCI);
fc.c:    if(hg->dss_file) g_free(hg->dss_file);
fc.c:    hg->dss_file             =g_strconcat(hg->temp_dir,
fc.c:    if(hg->dss_path) g_free(hg->dss_path);
fc.c:    hg->dss_path             =g_strdup(FC_PATH_STSCI);
fc.c:    if(hg->dss_src) g_free(hg->dss_src);
fc.c:    switch(hg->fc_mode){
fc.c:      hg->dss_src             =g_strdup(FC_SRC_STSCI_DSS1R);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_STSCI_DSS1B);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_STSCI_DSS2R);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_STSCI_DSS2B);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_STSCI_DSS2IR);
fc.c:    if(hg->dss_host) g_free(hg->dss_host);
fc.c:    hg->dss_host             =g_strdup(FC_HOST_ESO);
fc.c:    if(hg->dss_path) g_free(hg->dss_path);
fc.c:    hg->dss_path             =g_strdup(FC_PATH_ESO);
fc.c:    if(hg->dss_file) g_free(hg->dss_file);
fc.c:    hg->dss_file             =g_strconcat(hg->temp_dir,
fc.c:    if(hg->dss_tmp) g_free(hg->dss_tmp);
fc.c:    hg->dss_tmp=g_strconcat(hg->temp_dir,
fc.c:    if(hg->dss_src) g_free(hg->dss_src);
fc.c:    switch(hg->fc_mode){
fc.c:      hg->dss_src             =g_strdup(FC_SRC_ESO_DSS1R);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_ESO_DSS2R);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_ESO_DSS2B);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_ESO_DSS2IR);
fc.c:    if(hg->dss_host) g_free(hg->dss_host);
fc.c:    hg->dss_host             =g_strdup(FC_HOST_SKYVIEW);
fc.c:    if(hg->dss_path) g_free(hg->dss_path);
fc.c:    hg->dss_path             =g_strdup(FC_PATH_SKYVIEW);
fc.c:    if(hg->dss_file) g_free(hg->dss_file);
fc.c:    hg->dss_file=g_strconcat(hg->temp_dir,
fc.c:    if(hg->dss_tmp) g_free(hg->dss_tmp);
fc.c:    hg->dss_tmp=g_strconcat(hg->temp_dir,
fc.c:    if(hg->dss_src) g_free(hg->dss_src);
fc.c:    switch(hg->fc_mode){
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_GALEXF);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_GALEXN);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_DSS1R);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_DSS1B);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_DSS2R);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_DSS2B);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_DSS2IR);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_SDSSU);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_SDSSG);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_SDSSR);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_SDSSI);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_SDSSZ);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_2MASSJ);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_2MASSH);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_2MASSK);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_WISE34);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_WISE46);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_WISE12);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_WISE22);
fc.c:    if(hg->dss_host) g_free(hg->dss_host);
fc.c:    hg->dss_host             =g_strdup(FC_HOST_SDSS);
fc.c:    if(hg->dss_path) g_free(hg->dss_path);
fc.c:    hg->dss_path             =g_strdup(FC_PATH_SDSS);
fc.c:    if(hg->dss_file) g_free(hg->dss_file);
fc.c:    hg->dss_file=g_strconcat(hg->temp_dir,
fc.c:    if(hg->dss_host) g_free(hg->dss_host);
fc.c:    hg->dss_host             =g_strdup(FC_HOST_SDSS13);
fc.c:    if(hg->dss_path) g_free(hg->dss_path);
fc.c:    hg->dss_path             =g_strdup(FC_PATH_SDSS13);
fc.c:    if(hg->dss_file) g_free(hg->dss_file);
fc.c:    hg->dss_file=g_strconcat(hg->temp_dir,
fc.c:    if(hg->dss_arcmin>PANSTARRS_MAX_ARCMIN){
fc.c:      gtk_adjustment_set_value(hg->fc_adj_dss_arcmin, 
fc.c:    if(hg->dss_tmp) g_free(hg->dss_tmp);
fc.c:    hg->dss_tmp=g_strconcat(hg->temp_dir,
fc.c:    if(hg->dss_host) g_free(hg->dss_host);
fc.c:    hg->dss_host             =g_strdup(FC_HOST_PANCOL);
fc.c:    if(hg->dss_path) g_free(hg->dss_path);
fc.c:    switch(hg->fc_mode){
fc.c:      hg->dss_path             =g_strdup(FC_PATH_PANCOL);
fc.c:      hg->dss_path             =g_strdup(FC_PATH_PANG);
fc.c:      hg->dss_path             =g_strdup(FC_PATH_PANR);
fc.c:      hg->dss_path             =g_strdup(FC_PATH_PANI);
fc.c:      hg->dss_path             =g_strdup(FC_PATH_PANZ);
fc.c:      hg->dss_path             =g_strdup(FC_PATH_PANY);
fc.c:    if(hg->dss_file) g_free(hg->dss_file);
fc.c:    hg->dss_file=g_strconcat(hg->temp_dir,
fc.c:    hg->fc_mode=n;
fc.c:    hg->fc_mode=n;
fc.c:    hg->fc_mode=n;
fc.c:    switch(hg->fc_mode){
fc.c:      if(hg->dss_host) g_free(hg->dss_host);
fc.c:      hg->dss_host             =g_strdup(FC_HOST_STSCI);
fc.c:      if(hg->dss_file) g_free(hg->dss_file);
fc.c:      hg->dss_file             =g_strdup(FC_FILE_GIF);
fc.c:      if(hg->dss_path) g_free(hg->dss_path);
fc.c:      hg->dss_path             =g_strdup(FC_PATH_STSCI);
fc.c:      if(hg->dss_src) g_free(hg->dss_src);
fc.c:      switch(hg->fc_mode){
fc.c:	hg->dss_src             =g_strdup(FC_SRC_STSCI_DSS1R);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_STSCI_DSS1B);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_STSCI_DSS2R);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_STSCI_DSS2B);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_STSCI_DSS2IR);
fc.c:      if(hg->dss_host) g_free(hg->dss_host);
fc.c:      hg->dss_host             =g_strdup(FC_HOST_ESO);
fc.c:      if(hg->dss_path) g_free(hg->dss_path);
fc.c:      hg->dss_path             =g_strdup(FC_PATH_ESO);
fc.c:      if(hg->dss_file) g_free(hg->dss_file);
fc.c:      hg->dss_file             =g_strdup(FC_FILE_GIF);
fc.c:      if(hg->dss_tmp) g_free(hg->dss_tmp);
fc.c:      hg->dss_tmp             =g_strdup(FC_FILE_HTML);
fc.c:      if(hg->dss_src) g_free(hg->dss_src);
fc.c:      hg->dss_src             =g_strdup(FC_SRC_ESO_DSS2R);
fc.c:      if(hg->dss_host) g_free(hg->dss_host);
fc.c:      hg->dss_host             =g_strdup(FC_HOST_SKYVIEW);
fc.c:      if(hg->dss_path) g_free(hg->dss_path);
fc.c:      hg->dss_path             =g_strdup(FC_PATH_SKYVIEW);
fc.c:      if(hg->dss_file) g_free(hg->dss_file);
fc.c:      hg->dss_file             =g_strdup(FC_FILE_JPEG);
fc.c:      if(hg->dss_tmp) g_free(hg->dss_tmp);
fc.c:      hg->dss_tmp             =g_strdup(FC_FILE_HTML);
fc.c:      if(hg->dss_src) g_free(hg->dss_src);
fc.c:      switch(hg->fc_mode){
fc.c:	hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_DSS1R);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_DSS1B);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_DSS2R);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_DSS2B);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_DSS2IR);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_2MASSJ);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_2MASSH);
fc.c:	hg->dss_src             =g_strdup(FC_SRC_SKYVIEW_2MASSK);
fc.c:      if(hg->dss_host) g_free(hg->dss_host);
fc.c:      hg->dss_host             =g_strdup(FC_HOST_SDSS);
fc.c:      if(hg->dss_path) g_free(hg->dss_path);
fc.c:      hg->dss_path             =g_strdup(FC_PATH_SDSS);
fc.c:      if(hg->dss_file) g_free(hg->dss_file);
fc.c:      hg->dss_file             =g_strdup(FC_FILE_JPEG);
fc.c:      if(hg->dss_host) g_free(hg->dss_host);
fc.c:      hg->dss_host             =g_strdup(FC_HOST_SDSS13);
fc.c:      if(hg->dss_path) g_free(hg->dss_path);
fc.c:      hg->dss_path             =g_strdup(FC_PATH_SDSS13);
fc.c:      if(hg->dss_file) g_free(hg->dss_file);
fc.c:      hg->dss_file             =g_strdup(FC_FILE_JPEG);
fc.c:  hg->fc_output=FC_OUTPUT_PDF;
fc.c:    draw_fc_cairo(hg->fc_dw,NULL,
fc.c:  hg->fc_output=FC_OUTPUT_WINDOW;
http-client.c:  sftp_py=g_strconcat(hg->temp_dir,
http-client.c:  sftp_log=g_strconcat(hg->temp_dir,
http-client.c:  fprintf(fp,"USER = \'%s\'\n", hg->prop_id);
http-client.c:  fprintf(fp,"PSWD = r\'%s\'\n\n", hg->prop_pass);
http-client.c:  fprintf(fp,"LOCAL_PATH = r\"%s\"\n", hg->filename_read);
http-client.c:	  hg->prop_id,SOSS_PATH,g_path_get_basename(hg->filename_read));
http-client.c:    msg=g_strconcat("   User : ",hg->prop_id, NULL);
http-client.c:    msg=g_strconcat("   Password : ",hg->prop_pass, NULL);
http-client.c:  sftp_py=g_strconcat(hg->temp_dir,
http-client.c:  sftp_log=g_strconcat(hg->temp_dir,
http-client.c:  fprintf(fp,"USER = \'%s\'\n", hg->prop_id);
http-client.c:  fprintf(fp,"PSWD = r\'%s\'\n\n", hg->prop_pass);
http-client.c:  fprintf(fp,"LOCAL_PATH = r\"%s\"\n", hg->filename_log);
http-client.c:	  hg->prop_id,
http-client.c:	  hg->fr_year,hg->fr_month,hg->fr_day);
http-client.c:    msg=g_strconcat("   User : ",hg->prop_id, NULL);
http-client.c:    msg=g_strconcat("   Password : ",hg->prop_pass, NULL);
http-client.c:    remove(hg->filename_log);
http-client.c:  if ((err = getaddrinfo(hg->dss_host, "http", &hints, &res)) !=0){
http-client.c:    fprintf(stderr, "Bad hostname [%s]\n", hg->dss_host);
http-client.c:    fprintf(stderr, "Failed to connect to %s .\n", hg->dss_host);
http-client.c:  object.ra=ra_to_deg(hg->obj[hg->dss_i].ra);
http-client.c:  object.dec=dec_to_deg(hg->obj[hg->dss_i].dec);
http-client.c:		    get_julian_day_of_epoch(hg->obj[hg->dss_i].equinox),
http-client.c:  switch(hg->fc_mode){
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			hg->dss_src,
http-client.c:			hg->dss_arcmin,hg->dss_arcmin);
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			hg->dss_arcmin,hg->dss_arcmin,hg->dss_src);
http-client.c:    switch(hg->dss_scale){
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			hg->dss_src, 2000.0,
http-client.c:			(hg->dss_invert) ? "&invert=on&" : "&",
http-client.c:			(gdouble)hg->dss_arcmin/60.,
http-client.c:			(gdouble)hg->dss_arcmin/60.,
http-client.c:			hg->dss_pix,
http-client.c:      xpix=(gint)((gfloat)hg->dss_arcmin*60/sdss_scale);
http-client.c:      ypix=(gint)((gfloat)hg->dss_arcmin*60/sdss_scale);
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			(hg->sdss_photo) ? "P" : "",
http-client.c:			(hg->sdss_spec) ? "S" : "",
http-client.c:			(hg->sdss_photo) ? "&PhotoObjs=on" : "",
http-client.c:			(hg->sdss_spec) ? "&SpecObjs=on" : "");
http-client.c:    sdss_scale=((gfloat)hg->dss_arcmin*60.)/(gfloat)xpix;
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			(hg->sdss_photo) ? "P" : "",
http-client.c:			(hg->sdss_spec) ? "S" : "",
http-client.c:			(hg->sdss_photo) ? "&PhotoObjs=on" : "",
http-client.c:			(hg->sdss_spec) ? "&SpecObjs=on" : "");
http-client.c:    if(hg->dss_arcmin>PANSTARRS_MAX_ARCMIN){
http-client.c:      gtk_adjustment_set_value(hg->fc_adj_dss_arcmin, 
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			hg->dss_arcmin*240);
http-client.c:  sprintf(send_mesg, "Host: %s\r\n", hg->dss_host);
http-client.c:  switch(hg->fc_mode){
http-client.c:    if((fp_write=fopen(hg->dss_tmp,"wb"))==NULL){
http-client.c:      fprintf(stderr," File Write Error  \"%s\" \n", hg->dss_tmp);
http-client.c:    if((chmod(hg->dss_tmp,(S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP |S_IROTH | S_IWOTH ))) != 0){
http-client.c:    g_print("Cannot Chmod Temporary File %s!  Please check!!!\n",hg->dss_tmp);
http-client.c:    if(chunked_flag) unchunk(hg->dss_tmp);
http-client.c:    fp_read=fopen(hg->dss_tmp,"r");
http-client.c:    switch(hg->fc_mode){
http-client.c:      fprintf(stderr, "Failed to connect to %s .\n", hg->dss_host);
http-client.c:      switch(hg->fc_mode){
http-client.c:      sprintf(send_mesg, "Host: %s\r\n", hg->dss_host);
http-client.c:      if((fp_write=fopen(hg->dss_file,"wb"))==NULL){
http-client.c:	fprintf(stderr," File Write Error  \"%s\" \n", hg->dss_file);
http-client.c:      fprintf(stderr," File Writing...  \"%s\" \n", hg->dss_file);
http-client.c:    if((fp_write=fopen(hg->dss_file,"wb"))==NULL){
http-client.c:      fprintf(stderr," File Write Error  \"%s\" \n", hg->dss_file);
http-client.c:  if(chunked_flag) unchunk(hg->dss_file);
http-client.c:    if((chmod(hg->dss_file,(S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP |S_IROTH | S_IWOTH ))) != 0){
http-client.c:    g_print("Cannot Chmod Temporary File %s!  Please check!!!\n",hg->dss_file);
http-client.c:  if ((err = getaddrinfo(hg->dss_host, "https", &hints, &res)) !=0){
http-client.c:    fprintf(stderr, "Bad hostname [%s]\n", hg->dss_host);
http-client.c:    fprintf(stderr, "Failed to connect to %s .\n", hg->dss_host);
http-client.c:  object.ra=ra_to_deg(hg->obj[hg->dss_i].ra);
http-client.c:  object.dec=dec_to_deg(hg->obj[hg->dss_i].dec);
http-client.c:		    get_julian_day_of_epoch(hg->obj[hg->dss_i].equinox),
http-client.c:  switch(hg->fc_mode){
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			hg->dss_src,
http-client.c:			hg->dss_arcmin,hg->dss_arcmin);
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			hg->dss_arcmin,hg->dss_arcmin,hg->dss_src);
http-client.c:    switch(hg->dss_scale){
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			hg->dss_src, 2000.0,
http-client.c:			(hg->dss_invert) ? "&invert=on&" : "&",
http-client.c:			(gdouble)hg->dss_arcmin/60.,
http-client.c:			(gdouble)hg->dss_arcmin/60.,
http-client.c:			hg->dss_pix,
http-client.c:      xpix=(gint)((gfloat)hg->dss_arcmin*60/sdss_scale);
http-client.c:      ypix=(gint)((gfloat)hg->dss_arcmin*60/sdss_scale);
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			(hg->sdss_photo) ? "P" : "",
http-client.c:			(hg->sdss_spec) ? "S" : "",
http-client.c:			(hg->sdss_photo) ? "&PhotoObjs=on" : "",
http-client.c:			(hg->sdss_spec) ? "&SpecObjs=on" : "");
http-client.c:    sdss_scale=((gfloat)hg->dss_arcmin*60.)/(gfloat)xpix;
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			(hg->sdss_photo) ? "P" : "",
http-client.c:			(hg->sdss_spec) ? "S" : "",
http-client.c:			(hg->sdss_photo) ? "&PhotoObjs=on" : "",
http-client.c:			(hg->sdss_spec) ? "&SpecObjs=on" : "");
http-client.c:    if(hg->dss_arcmin>PANSTARRS_MAX_ARCMIN){
http-client.c:      gtk_adjustment_set_value(hg->fc_adj_dss_arcmin, 
http-client.c:    tmp=g_strdup_printf(hg->dss_path,
http-client.c:			hg->dss_arcmin*240);
http-client.c:  sprintf(send_mesg, "Host: %s\r\n", hg->dss_host);
http-client.c:  switch(hg->fc_mode){
http-client.c:    if((fp_write=fopen(hg->dss_tmp,"wb"))==NULL){
http-client.c:      fprintf(stderr," File Write Error  \"%s\" \n", hg->dss_tmp);
http-client.c:    if((chmod(hg->dss_tmp,(S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP |S_IROTH | S_IWOTH ))) != 0){
http-client.c:    g_print("Cannot Chmod Temporary File %s!  Please check!!!\n",hg->dss_tmp);
http-client.c:    if(chunked_flag) unchunk(hg->dss_tmp);
http-client.c:    fp_read=fopen(hg->dss_tmp,"r");
http-client.c:    switch(hg->fc_mode){
http-client.c:      fprintf(stderr, "Failed to connect to %s .\n", hg->dss_host);
http-client.c:      switch(hg->fc_mode){
http-client.c:      sprintf(send_mesg, "Host: %s\r\n", hg->dss_host);
http-client.c:      if((fp_write=fopen(hg->dss_file,"wb"))==NULL){
http-client.c:	fprintf(stderr," File Write Error  \"%s\" \n", hg->dss_file);
http-client.c:      fprintf(stderr," File Writing...  \"%s\" \n", hg->dss_file);
http-client.c:    if((fp_write=fopen(hg->dss_file,"wb"))==NULL){
http-client.c:      fprintf(stderr," File Write Error  \"%s\" \n", hg->dss_file);
http-client.c:  if(chunked_flag) unchunk(hg->dss_file);
http-client.c:  if((chmod(hg->dss_file,(S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP |S_IROTH | S_IWOTH ))) != 0){
http-client.c:    g_print("Cannot Chmod Temporary File %s!  Please check!!!\n",hg->dss_file);
http-client.c:  if((hg->fc_mode<FC_SEP2)||(hg->fc_mode>FC_SEP3)){
http-client.c:    if((hg->fc_mode<FC_SKYVIEW_GALEXF)||(hg->fc_mode>FC_SKYVIEW_WISE22)){
http-client.c:  hg->hThread_stddb = (HANDLE)_beginthreadex(NULL,0,
http-client.c:					     &hg->dwThreadID_stddb);
http-client.c:  if (hg->hThread_stddb == NULL) {
http-client.c:    CloseHandle(hg->hThread_stddb);
http-client.c:  hg->dwThreadID_stddb=0;
http-client.c:  switch(hg->fcdb_type){
http-client.c:    hg->hThread_fcdb = (HANDLE)_beginthreadex(NULL,0,
http-client.c:					      &hg->dwThreadID_fcdb);
http-client.c:    hg->hThread_fcdb = (HANDLE)_beginthreadex(NULL,0,
http-client.c:					      &hg->dwThreadID_fcdb);
http-client.c:  hg->hThread_fcdb = (HANDLE)_beginthreadex(NULL,0,
http-client.c:					    &hg->dwThreadID_fcdb);
http-client.c:  if (hg->hThread_fcdb == NULL) {
http-client.c:    CloseHandle(hg->hThread_fcdb);
http-client.c:  hg->dwThreadID_fcdb=0;
http-client.c:    switch(hg->fcdb_type){
http-client.c:  if ((err = getaddrinfo(hg->std_host, "http", &hints, &res)) !=0){
http-client.c:    fprintf(stderr, "Bad hostname [%s]\n", hg->std_host);
http-client.c:    fprintf(stderr, "Failed to connect to %s .\n", hg->std_host);
http-client.c:  sprintf(send_mesg, "GET %s HTTP/1.1\r\n", hg->std_path);
http-client.c:  sprintf(send_mesg, "Host: %s\r\n", hg->std_host);
http-client.c:  if((fp_write=fopen(hg->std_file,"w"))==NULL){
http-client.c:    fprintf(stderr," File Write Error  \"%s\" \n", hg->std_file);
http-client.c:  if(chunked_flag) unchunk(hg->std_file);
http-client.c:    if((chmod(hg->std_file,(S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP |S_IROTH | S_IWOTH ))) != 0){
http-client.c:    g_print("Cannot Chmod Temporary File %s!  Please check!!!\n",hg->std_file);
http-client.c:  switch(hg->fcdb_type){
http-client.c:		  (hg->fcdb_sdss_search==FCDB_SDSS_SEARCH_IMAG) ? 
http-client.c:		  (hg->fcdb_sdss_search==FCDB_SDSS_SEARCH_IMAG) ? 
http-client.c:		  hg->fcdb_d_ra0);
http-client.c:		  hg->fcdb_d_dec0);
http-client.c:		  (hg->dss_arcmin < hg->fcdb_sdss_diam) ?
http-client.c:		  ((gdouble)hg->dss_arcmin/2.0) :
http-client.c:		  ((gdouble)hg->fcdb_sdss_diam/2.0));
http-client.c:	    if(hg->fcdb_sdss_fil[i]){
http-client.c:		      hg->fcdb_sdss_magmin[i]);
http-client.c:	    if(hg->fcdb_sdss_fil[i]){
http-client.c:		      hg->fcdb_sdss_magmax[i]);
http-client.c:		    hg->fcdb_d_ra0);
http-client.c:		  hg->fcdb_d_dec0);
http-client.c:		  hg->dss_arcmin*30.0);
http-client.c:		    hg->fcdb_d_ra0);
http-client.c:		  hg->fcdb_d_dec0);
http-client.c:	  switch(hg->fcdb_type){
http-client.c:		    hg->dss_arcmin/2.0);
http-client.c:		    hg->trdb_arcmin);
http-client.c:		    hg->trdb_arcmin_used);
http-client.c:	  switch(hg->fcdb_type){
http-client.c:	  switch(hg->fcdb_type){
http-client.c:	    if(((strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"SUP")==0)
http-client.c:		|| (strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"HSC")==0))
http-client.c:	       && (hg->trdb_smoka_shot)) {
http-client.c:	    if(((strcmp(smoka_subaru[hg->trdb_smoka_inst_used].prm,"SUP")==0)
http-client.c:		|| (strcmp(smoka_subaru[hg->trdb_smoka_inst_used].prm,"HSC")==0))
http-client.c:	       && (hg->trdb_smoka_shot_used)) {
http-client.c:	    if(hg->fcdb_smoka_shot){
http-client.c:	  switch(hg->fcdb_type){
http-client.c:		    hg->trdb_smoka_date);
http-client.c:		    hg->trdb_smoka_date_used);
http-client.c:	switch(hg->fcdb_type){
http-client.c:		  smoka_subaru[hg->trdb_smoka_inst].prm);
http-client.c:		  smoka_subaru[hg->trdb_smoka_inst_used].prm);
http-client.c:	    if(hg->fcdb_smoka_subaru[i]) {
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_smoka_kiso[i]) {
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_smoka_oao[i]) {
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_smoka_mtm[i]) {
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_smoka_kanata[i]) {
http-client.c:	switch(hg->fcdb_type){
http-client.c:	  if(hg->trdb_smoka_imag){
http-client.c:	  if(hg->trdb_smoka_imag_used){
http-client.c:	switch(hg->fcdb_type){
http-client.c:	  if(hg->trdb_smoka_spec){
http-client.c:	  if(hg->trdb_smoka_spec_used){
http-client.c:	switch(hg->fcdb_type){
http-client.c:	  if(hg->trdb_smoka_ipol){
http-client.c:	  if(hg->trdb_smoka_ipol_used){
http-client.c:		  hg->fcdb_d_ra0);
http-client.c:		  hg->fcdb_d_dec0);
http-client.c:	  switch(hg->fcdb_type){
http-client.c:		    hg->dss_arcmin/2.0);
http-client.c:		    hg->trdb_arcmin);
http-client.c:		    hg->trdb_arcmin);
http-client.c:	  switch(hg->fcdb_type){
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_hst_image[i]) {
http-client.c:	  if(hg->trdb_hst_mode==TRDB_HST_MODE_IMAGE){
http-client.c:		    hst_image[hg->trdb_hst_image].name);
http-client.c:	  if(hg->trdb_hst_mode_used==TRDB_HST_MODE_IMAGE){
http-client.c:		    hst_image[hg->trdb_hst_image_used].name);
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_hst_spec[i]) {
http-client.c:	  if(hg->trdb_hst_mode==TRDB_HST_MODE_SPEC){
http-client.c:		    hst_spec[hg->trdb_hst_spec].name);
http-client.c:	  if(hg->trdb_hst_mode_used==TRDB_HST_MODE_SPEC){
http-client.c:		    hst_spec[hg->trdb_hst_spec_used].name);
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_hst_other[i]) {
http-client.c:	  if(hg->trdb_hst_mode==TRDB_HST_MODE_OTHER){
http-client.c:		    hst_other[hg->trdb_hst_other].name);
http-client.c:	  if(hg->trdb_hst_mode_used==TRDB_HST_MODE_OTHER){
http-client.c:		    hst_other[hg->trdb_hst_other_used].name);
http-client.c:		  hg->fcdb_d_ra0);
http-client.c:		  hg->fcdb_d_dec0);
http-client.c:	  switch(hg->fcdb_type){
http-client.c:		    hg->dss_arcmin/2,
http-client.c:		    hg->dss_arcmin*30-(hg->dss_arcmin/2)*60);
http-client.c:		    hg->trdb_arcmin);
http-client.c:		    hg->trdb_arcmin_used);
http-client.c:	  switch(hg->fcdb_type){
http-client.c:	  switch(hg->fcdb_type){
http-client.c:		    hg->trdb_eso_stdate);
http-client.c:		    hg->trdb_eso_stdate_used);
http-client.c:	  switch(hg->fcdb_type){
http-client.c:		    hg->trdb_eso_eddate);
http-client.c:		    hg->trdb_eso_eddate_used);
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_eso_image[i]) {
http-client.c:	  if(hg->trdb_eso_mode==TRDB_ESO_MODE_IMAGE){
http-client.c:		    eso_image[hg->trdb_eso_image].prm);
http-client.c:	  if(hg->trdb_eso_mode_used==TRDB_ESO_MODE_IMAGE){
http-client.c:		    eso_image[hg->trdb_eso_image_used].prm);
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_eso_spec[i]) {
http-client.c:	  if(hg->trdb_eso_mode==TRDB_ESO_MODE_SPEC){
http-client.c:		    eso_spec[hg->trdb_eso_spec].prm);
http-client.c:	  if(hg->trdb_eso_mode_used==TRDB_ESO_MODE_SPEC){
http-client.c:		    eso_spec[hg->trdb_eso_spec_used].prm);
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_eso_vlti[i]) {
http-client.c:	  if(hg->trdb_eso_mode==TRDB_ESO_MODE_VLTI){
http-client.c:		    eso_vlti[hg->trdb_eso_vlti].prm);
http-client.c:	  if(hg->trdb_eso_mode_used==TRDB_ESO_MODE_VLTI){
http-client.c:		    eso_vlti[hg->trdb_eso_vlti_used].prm);
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_eso_pola[i]) {
http-client.c:	  if(hg->trdb_eso_mode==TRDB_ESO_MODE_POLA){
http-client.c:		    eso_pola[hg->trdb_eso_pola].prm);
http-client.c:	  if(hg->trdb_eso_mode_used==TRDB_ESO_MODE_POLA){
http-client.c:		    eso_pola[hg->trdb_eso_pola_used].prm);
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_eso_coro[i]) {
http-client.c:	  if(hg->trdb_eso_mode==TRDB_ESO_MODE_CORO){
http-client.c:		    eso_coro[hg->trdb_eso_coro].prm);
http-client.c:	  if(hg->trdb_eso_mode_used==TRDB_ESO_MODE_CORO){
http-client.c:		    eso_coro[hg->trdb_eso_coro_used].prm);
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_eso_other[i]) {
http-client.c:	  if(hg->trdb_eso_mode==TRDB_ESO_MODE_OTHER){
http-client.c:		    eso_other[hg->trdb_eso_other].prm);
http-client.c:	  if(hg->trdb_eso_mode_used==TRDB_ESO_MODE_OTHER){
http-client.c:		    eso_other[hg->trdb_eso_other_used].prm);
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_eso_sam[i]) {
http-client.c:	  if(hg->trdb_eso_mode==TRDB_ESO_MODE_SAM){
http-client.c:		    eso_sam[hg->trdb_eso_sam].prm);
http-client.c:	  if(hg->trdb_eso_mode_used==TRDB_ESO_MODE_SAM){
http-client.c:		    eso_sam[hg->trdb_eso_sam_used].prm);
http-client.c:	switch(hg->fcdb_type){
http-client.c:	    if(hg->fcdb_eso_image[i]) {
http-client.c:	    if(hg->fcdb_eso_spec[i]) {
http-client.c:	    if(hg->fcdb_eso_vlti[i]) {
http-client.c:	    if(hg->fcdb_eso_pola[i]) {
http-client.c:	    if(hg->fcdb_eso_coro[i]) {
http-client.c:	    if(hg->fcdb_eso_other[i]) {
http-client.c:	    if(hg->fcdb_eso_sam[i]) {
http-client.c:	  switch(hg->trdb_eso_mode){
http-client.c:	    strcat(send_mesg, eso_image[hg->trdb_eso_image].add);
http-client.c:	    strcat(send_mesg, eso_spec[hg->trdb_eso_spec].add);
http-client.c:	    strcat(send_mesg, eso_vlti[hg->trdb_eso_vlti].add);
http-client.c:	    strcat(send_mesg, eso_pola[hg->trdb_eso_pola].add);
http-client.c:	    strcat(send_mesg, eso_coro[hg->trdb_eso_coro].add);
http-client.c:	    strcat(send_mesg, eso_other[hg->trdb_eso_other].add);
http-client.c:	    strcat(send_mesg, eso_sam[hg->trdb_eso_sam].add);
http-client.c:	  switch(hg->trdb_eso_mode_used){
http-client.c:	    strcat(send_mesg, eso_image[hg->trdb_eso_image_used].add);
http-client.c:	    strcat(send_mesg, eso_spec[hg->trdb_eso_spec_used].add);
http-client.c:	    strcat(send_mesg, eso_vlti[hg->trdb_eso_vlti_used].add);
http-client.c:	    strcat(send_mesg, eso_pola[hg->trdb_eso_pola_used].add);
http-client.c:	    strcat(send_mesg, eso_coro[hg->trdb_eso_coro_used].add);
http-client.c:	    strcat(send_mesg, eso_other[hg->trdb_eso_other_used].add);
http-client.c:	    strcat(send_mesg, eso_sam[hg->trdb_eso_sam_used].add);
http-client.c:  if(hg->fcdb_post){
http-client.c:  if ((err = getaddrinfo(hg->fcdb_host, "http", &hints, &res)) !=0){
http-client.c:    fprintf(stderr, "Bad hostname [%s]\n", hg->fcdb_host);
http-client.c:    fprintf(stderr, "Failed to connect to %s .\n", hg->fcdb_host);
http-client.c:  if(hg->fcdb_post){
http-client.c:    sprintf(send_mesg, "POST %s HTTP/1.1\r\n", hg->fcdb_path);
http-client.c:    sprintf(send_mesg, "GET %s HTTP/1.1\r\n", hg->fcdb_path);
http-client.c:  sprintf(send_mesg, "Host: %s\r\n", hg->fcdb_host);
http-client.c:  if(hg->fcdb_post){
http-client.c:    switch(hg->fcdb_type){
http-client.c:  if(hg->fcdb_post){
http-client.c:  if((fp_write=fopen(hg->fcdb_file,"w"))==NULL){
http-client.c:    fprintf(stderr," File Write Error  \"%s\" \n", hg->fcdb_file);
http-client.c:  if(chunked_flag) unchunk(hg->fcdb_file);
http-client.c:  if(hg->fcdb_type==FCDB_TYPE_SDSS){ 
http-client.c:    str_replace(hg->fcdb_file, 
http-client.c:    if((chmod(hg->fcdb_file,(S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP |S_IROTH | S_IWOTH ))) != 0){
http-client.c:    g_print("Cannot Chmod Temporary File %s!  Please check!!!\n",hg->fcdb_file);
http-client.c:  if(hg->fcdb_post){
http-client.c:  if ((err = getaddrinfo(hg->fcdb_host, "https", &hints, &res)) !=0){
http-client.c:    fprintf(stderr, "Bad hostname [%s]\n", hg->fcdb_host);
http-client.c:    fprintf(stderr, "Failed to connect to %s .\n", hg->fcdb_host);
http-client.c:  if(hg->fcdb_post){
http-client.c:    sprintf(send_mesg, "POST %s HTTP/1.1\r\n", hg->fcdb_path);
http-client.c:    sprintf(send_mesg, "GET %s HTTP/1.1\r\n", hg->fcdb_path);
http-client.c:  sprintf(send_mesg, "Host: %s\r\n", hg->fcdb_host);
http-client.c:  //if(hg->fcdb_post){
http-client.c:  //if(hg->fcdb_post){
http-client.c:  if((fp_write=fopen(hg->fcdb_file,"w"))==NULL){
http-client.c:    fprintf(stderr," File Write Error  \"%s\" \n", hg->fcdb_file);
http-client.c:  if(chunked_flag) unchunk(hg->fcdb_file);
http-client.c:  if(hg->fcdb_type==FCDB_TYPE_SDSS){ 
http-client.c:    str_replace(hg->fcdb_file, 
http-client.c:    if((chmod(hg->fcdb_file,(S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP |S_IROTH | S_IWOTH ))) != 0){
http-client.c:    g_print("Cannot Chmod Temporary File %s!  Please check!!!\n",hg->fcdb_file);
linetree.c:  if(flag_make_line_tree)  gtk_widget_destroy(hg->linetree);
linetree.c:  hg->linetree = gtk_tree_view_new_with_model (items_model);
linetree.c:  gtk_tree_view_set_rules_hint (GTK_TREE_VIEW (hg->linetree), TRUE);
linetree.c:  gtk_tree_selection_set_mode (gtk_tree_view_get_selection (GTK_TREE_VIEW (hg->linetree)),
linetree.c:  linetree_add_columns (hg, GTK_TREE_VIEW (hg->linetree), 
linetree.c:  gtk_container_add (GTK_CONTAINER (hg->sw_linetree), hg->linetree);
linetree.c:  gtk_widget_show_all(hg->linetree);
linetree.c:		      hg->line[i_list].name,
linetree.c:		     hg->line[i_list].wave, 
linetree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->linetree));
linetree.c:	if(hg->line[i].name) g_free(hg->line[i].name);
linetree.c:	hg->line[i].name=g_strdup(new_text);
linetree.c:                            hg->line[i].name, -1);
linetree.c:	hg->line[i].wave=(gdouble)g_strtod(new_text,NULL);	
linetree.c:                            hg->line[i].wave, -1);
linetree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->linetree));
linetree.c:    if(hg->line[i_ln].name) g_free(hg->line[i_ln].name);
linetree.c:    hg->line[i_ln].name=g_strdup("");
linetree.c:    hg->line[i_ln].wave=0;
linetree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->linetree));
linetree.c:    if(hg->line[i_ln].name) g_free(hg->line[i_ln].name);
linetree.c:    hg->line[i_ln].name=g_strdup(line_nebula[i_ln].name);
linetree.c:    hg->line[i_ln].wave=line_nebula[i_ln].wave;
linetree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->linetree));
linetree.c:    if(hg->line[i_ln].name) g_free(hg->line[i_ln].name);
linetree.c:    hg->line[i_ln].name=g_strdup(line_star[i_ln].name);
linetree.c:    hg->line[i_ln].wave=line_star[i_ln].wave;
main.c:  hg->w_top = gtk_window_new(GTK_WINDOW_TOPLEVEL);
main.c:  my_signal_connect(hg->w_top, "destroy",
main.c:  gtk_container_set_border_width(GTK_CONTAINER(hg->w_top),0);
main.c:  gtk_window_set_title(GTK_WINDOW(hg->w_top),"HOE : HDS OPE file Editor");
main.c:  hg->w_box = gtk_vbox_new(FALSE,0);
main.c:  gtk_container_add (GTK_CONTAINER (hg->w_top), hg->w_box);
main.c:  gtk_box_pack_start(GTK_BOX(hg->w_box), menubar,FALSE, FALSE, 0);
main.c:  gtk_widget_show_all(hg->w_top);
main.c:    hg->all_note = gtk_notebook_new ();
main.c:    gtk_notebook_set_tab_pos (GTK_NOTEBOOK (hg->all_note), GTK_POS_TOP);
main.c:    gtk_notebook_set_scrollable (GTK_NOTEBOOK (hg->all_note), TRUE);
main.c:    gtk_box_pack_start(GTK_BOX(hg->w_box), hg->all_note,TRUE, TRUE, 5);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->fr_year,
main.c:						hg->fr_year-10, hg->fr_year+10,
main.c:			 &hg->fr_year);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->fr_month,
main.c:			 &hg->fr_month);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->fr_day,
main.c:			 &hg->fr_day);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->nights,
main.c:			 &hg->nights);
main.c:      gtk_entry_set_text(GTK_ENTRY(entry),hg->prop_id);
main.c:			 &hg->prop_id);
main.c:      if(hg->prop_pass)
main.c:	gtk_entry_set_text(GTK_ENTRY(entry),hg->prop_pass);
main.c:			 &hg->prop_pass);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->timezone,
main.c:			 &hg->timezone);
main.c:      if(hg->observer)
main.c:	gtk_entry_set_text(GTK_ENTRY(entry),hg->observer);
main.c:			 &hg->observer);
main.c:	if(hg->ocs==OCS_SOSS) iter_set=iter;
main.c:	if(hg->ocs==OCS_GEN2) iter_set=iter;
main.c:			   &hg->ocs);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->wave1,
main.c:			 &hg->wave1);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->wave0,
main.c:			 &hg->wave0);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->temp,
main.c:			 &hg->temp);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->pres,
main.c:			 &hg->pres);
main.c:			 hg->www_com);
main.c:		     &hg->www_com);
main.c:      gtk_notebook_append_page (GTK_NOTEBOOK (hg->all_note), scrwin, label);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->exptime_factor,
main.c:			 &hg->exptime_factor);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->brightness,
main.c:			 &hg->brightness);
main.c:	if(hg->sv_area==SV_PART) iter_set=iter;
main.c:	if(hg->sv_area==SV_FULL) iter_set=iter;
main.c:			   &hg->sv_area);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->exptime_sv,
main.c:			 &hg->exptime_sv);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->sv_region,
main.c:			 &hg->sv_region);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->sv_calc,
main.c:			 &hg->sv_calc);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->sv_integrate,
main.c:			 &hg->sv_integrate);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->sv_acq,
main.c:			 &hg->sv_acq);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->sv_slitx,
main.c:			 &hg->sv_slitx);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->sv_slity,
main.c:			 &hg->sv_slity);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->sv_isx,
main.c:			 &hg->sv_isx);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->sv_isy,
main.c:			 &hg->sv_isy);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->sv_is3x,
main.c:			 &hg->sv_is3x);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->sv_is3y,
main.c:			 &hg->sv_is3y);
main.c:      gtk_notebook_append_page (GTK_NOTEBOOK (hg->all_note), scrwin, label);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->camz_b,
main.c:			 &hg->camz_b);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->camz_r,
main.c:			 &hg->camz_r);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->d_cross,
main.c:			 &hg->d_cross);
main.c:	  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(check),hg->setup[i_use].use);
main.c:			     &hg->setup[i_use].use);
main.c:	      if(hg->setup[i_use].setup==i_set) iter_set=iter;
main.c:	      if(hg->setup[i_use].setup==-(i_nonstd+1)) iter_set=iter;
main.c:	      if(hg->setup[i_use].binning==i_bin) iter_set=iter;
main.c:			       &hg->setup[i_use].binning);
main.c:	  adj = (GtkAdjustment *)gtk_adjustment_new(hg->setup[i_use].slit_width,
main.c:			     &hg->setup[i_use].slit_width);
main.c:	  adj = (GtkAdjustment *)gtk_adjustment_new(hg->setup[i_use].slit_length,
main.c:			     &hg->setup[i_use].slit_length);
main.c:	    if(!hg->setup[i_use].fil1)
main.c:	      hg->setup[i_use].fil1=g_strdup(setups[StdUb].fil1);
main.c:			       hg->setup[i_use].fil1);
main.c:			       &hg->setup[i_use].fil1);
main.c:	    if(!hg->setup[i_use].fil2)
main.c:	      hg->setup[i_use].fil2=g_strdup(setups[StdUb].fil2);
main.c:			       hg->setup[i_use].fil2);
main.c:			       &hg->setup[i_use].fil2);
main.c:	    gtk_combo_box_set_active(GTK_COMBO_BOX(combo),hg->setup[i_use].imr);
main.c:			       &hg->setup[i_use].imr);
main.c:	    gtk_combo_box_set_active(GTK_COMBO_BOX(combo),hg->setup[i_use].is);
main.c:	    	       &hg->setup[i_use].is);
main.c:	    gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(check),hg->setup[i_use].i2);
main.c:			     &hg->setup[i_use].i2);
main.c:	    if(hg->nonstd[i].col==COL_RED) iter_set=iter;
main.c:	    if(hg->nonstd[i].col==COL_BLUE) iter_set=iter;
main.c:			       &hg->nonstd[i].col);
main.c:	  adj = (GtkAdjustment *)gtk_adjustment_new(hg->nonstd[i].cross,
main.c:			     &hg->nonstd[i].cross);
main.c:	  //		      &hg->nonstd[i].cross);
main.c:	  adj = (GtkAdjustment *)gtk_adjustment_new(hg->nonstd[i].echelle,
main.c:			     &hg->nonstd[i].echelle);
main.c:	  //		      &hg->nonstd[i].echelle);
main.c:	  adj = (GtkAdjustment *)gtk_adjustment_new(hg->nonstd[i].camr,
main.c:			     &hg->nonstd[i].camr);
main.c:	  //		      &hg->nonstd[i].camr);
main.c:      //      gtk_notebook_append_page (GTK_NOTEBOOK (hg->all_note), table, label);
main.c:      gtk_notebook_append_page (GTK_NOTEBOOK (hg->all_note), scrwin, label);
main.c:      hg->sw_objtree = gtk_scrolled_window_new (NULL, NULL);
main.c:      gtk_table_attach_defaults (GTK_TABLE(table), hg->sw_objtree, 0, 2, 0, 1);
main.c:      gtk_container_set_border_width (GTK_CONTAINER (hg->sw_objtree), 5);
main.c:      gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW(hg->sw_objtree),
main.c:      gtk_scrolled_window_set_placement(GTK_SCROLLED_WINDOW(hg->sw_objtree),
main.c:	if(hg->def_guide==NO_GUIDE) iter_set=iter;
main.c:	if(hg->def_guide==AG_GUIDE) iter_set=iter;
main.c:	if(hg->def_guide==SV_GUIDE) iter_set=iter;
main.c:	if(hg->def_guide==SVSAFE_GUIDE) iter_set=iter;
main.c:			   &hg->def_guide);
main.c:      adj = (GtkAdjustment *)gtk_adjustment_new(hg->def_pa,
main.c:			 &hg->def_pa);
main.c:      sprintf(tmp,"%d",hg->def_exp);
main.c:			 &hg->def_exp);
main.c:	if(hg->stddb_mode==STDDB_SSLOC) iter_set=iter;
main.c:	if(hg->stddb_mode==STDDB_RAPID) iter_set=iter;
main.c:	if(hg->stddb_mode==STDDB_MIRSTD) iter_set=iter;
main.c:	if(hg->stddb_mode==STDDB_ESOSTD) iter_set=iter;
main.c:	if(hg->stddb_mode==STDDB_IRAFSTD) iter_set=iter;
main.c:	if(hg->stddb_mode==STDDB_CALSPEC) iter_set=iter;
main.c:	if(hg->stddb_mode==STDDB_HDSSTD) iter_set=iter;
main.c:			   &hg->stddb_mode);
main.c:      hg->b_objtree_add=gtkut_button_new_from_stock("Add",GTK_STOCK_ADD);
main.c:      gtk_box_pack_start(GTK_BOX(hbox),hg->b_objtree_add,FALSE,FALSE,0);
main.c:      my_signal_connect(hg->b_objtree_add,"pressed",
main.c:      hg->b_objtree_remove=gtkut_button_new_from_stock("Remove",GTK_STOCK_REMOVE);
main.c:      gtk_box_pack_start(GTK_BOX(hbox),hg->b_objtree_remove,FALSE,FALSE,0);
main.c:      my_signal_connect(hg->b_objtree_remove,"pressed",
main.c:      hg->e_exp8mag = gtk_entry_new ();
main.c:      gtk_box_pack_start(GTK_BOX(hbox),hg->e_exp8mag,FALSE,FALSE,0);
main.c:      gtk_entry_set_editable(GTK_ENTRY(hg->e_exp8mag),TRUE);
main.c:      sprintf(tmp,"%d",hg->exp8mag);
main.c:      gtk_entry_set_text(GTK_ENTRY(hg->e_exp8mag),tmp);
main.c:      my_signal_connect (hg->e_exp8mag,
main.c:			 &hg->exp8mag);
main.c:      my_entry_set_width_chars(GTK_ENTRY(hg->e_exp8mag),4);
main.c:      gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(check),hg->flag_secz);
main.c:			 &hg->flag_secz);
main.c:      sprintf(tmp,"%4.2f",hg->secz_factor);
main.c:			 &hg->secz_factor);
main.c:      gtk_notebook_append_page (GTK_NOTEBOOK (hg->all_note), table, label);
main.c:      gtk_notebook_append_page (GTK_NOTEBOOK (hg->all_note), vbox, label);
main.c:      hg->stddb_button=gtkut_toggle_button_new_from_stock(NULL,GTK_STOCK_APPLY);
main.c:      gtk_container_set_border_width (GTK_CONTAINER (hg->stddb_button), 0);
main.c:      gtk_box_pack_start(GTK_BOX(hbox),hg->stddb_button,FALSE,FALSE,0);
main.c:      gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(hg->stddb_button),
main.c:				   hg->stddb_flag);
main.c:      //my_signal_connect(hg->stddb_button,"toggled",
main.c:      gtk_widget_set_tooltip_text(hg->stddb_button,
main.c:      hg->stddb_label= gtk_label_new (hg->stddb_label_text);
main.c:      gtk_box_pack_start(GTK_BOX(hbox), hg->stddb_label, TRUE, TRUE, 0);
main.c:      hg->stddb_tree = gtk_tree_view_new_with_model (items_model);
main.c:      gtk_tree_view_set_rules_hint (GTK_TREE_VIEW (hg->stddb_tree), TRUE);
main.c:      gtk_tree_selection_set_mode (gtk_tree_view_get_selection (GTK_TREE_VIEW (hg->stddb_tree)),
main.c:      std_add_columns (hg, GTK_TREE_VIEW (hg->stddb_tree), items_model);
main.c:      gtk_container_add (GTK_CONTAINER (sw), hg->stddb_tree);
main.c:      //my_signal_connect (hg->stddb_tree, "cursor-changed",
main.c:      hg->std_tgt = gtk_entry_new ();
main.c:      gtk_box_pack_start(GTK_BOX(hbox),hg->std_tgt,TRUE, TRUE, 0);
main.c:      gtk_entry_set_editable(GTK_ENTRY(hg->std_tgt),FALSE);
main.c:      my_entry_set_width_chars(GTK_ENTRY(hg->std_tgt),50);
main.c:      //		 G_CALLBACK (clip_copy), (gpointer)hg->std_tgt);
main.c:      hg->sw_linetree = gtk_scrolled_window_new (NULL, NULL);
main.c:      gtk_table_attach_defaults (GTK_TABLE(table), hg->sw_linetree, 0, 2, 0, 1);
main.c:      gtk_container_set_border_width (GTK_CONTAINER (hg->sw_linetree), 5);
main.c:      gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW(hg->sw_linetree),
main.c:      gtk_scrolled_window_set_placement(GTK_SCROLLED_WINDOW(hg->sw_linetree),
main.c:      gtk_notebook_append_page (GTK_NOTEBOOK (hg->all_note), table, label);
main.c:    gtk_widget_show_all(hg->all_note);
main.c:  cdata->hg->obj[cdata->i_obj].check_sm
main.c:      draw_skymon_cairo(cdata->hg->skymon_dw,NULL,
main.c:      gdk_window_raise(cdata->hg->skymon_main->window);
main.c:    cdata->hg->setup[cdata->i_use].setup = i_set;
main.c:    cdata->hg->setup[cdata->i_use].slit_length = setups[i_set].slit_length*500;
main.c:    g_free(cdata->hg->setup[cdata->i_use].fil1);
main.c:    cdata->hg->setup[cdata->i_use].fil1=g_strdup(setups[i_set].fil1);
main.c:    g_free(cdata->hg->setup[cdata->i_use].fil2);
main.c:    cdata->hg->setup[cdata->i_use].fil2=g_strdup(setups[i_set].fil2);
main.c:  if(access(hg->filename_read,F_OK)==0){
main.c:				   to_utf8(hg->filename_read));
main.c:				      to_utf8(hg->filename_read));
main.c:      if(hg->filename_read) g_free(hg->filename_read);
main.c:      hg->filename_read=g_strdup(dest_file);
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:      hg->i_plan_max=0;
main.c:  if(access(hg->filename_read,F_OK)==0){
main.c:				   to_utf8(hg->filename_read));
main.c:				      to_utf8(hg->filename_read));
main.c:      if(hg->filename_read) g_free(hg->filename_read);
main.c:      hg->filename_read=g_strdup(dest_file);
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:      hg->i_plan_max=0;
main.c:  if(access(hg->filename_read,F_OK)==0){
main.c:				   to_utf8(hg->filename_read));
main.c:				      to_utf8(hg->filename_read));
main.c:      if(hg->filename_read) g_free(hg->filename_read);
main.c:      hg->filename_read=g_strdup(dest_file);
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:  if(access(hg->filename_write,F_OK)==0){
main.c:				   to_utf8(hg->filename_write));
main.c:				      to_utf8(hg->filename_write));
main.c:      if(hg->filename_read) g_free(hg->filename_read);
main.c:      hg->filename_read=g_strdup(dest_file);
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:  if(hg->filename_log) g_free(hg->filename_log);
main.c:  if(hg->filename_write){
main.c:    hg->filename_log=g_strdup_printf("%s%shdslog-%04d%02d%02d.txt",
main.c:				     to_utf8(g_path_get_dirname(hg->filename_write)),
main.c:				     hg->fr_year,hg->fr_month,hg->fr_day);
main.c:    hg->filename_log=g_strdup_printf("%s%shdslog-%04d%02d%02d.txt",
main.c:				     hg->home_dir,
main.c:				     hg->fr_year,hg->fr_month,hg->fr_day);
main.c:				       to_utf8(g_path_get_dirname(hg->filename_log)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_log)));
main.c:      if(hg->filename_log) g_free(hg->filename_log);
main.c:      hg->filename_log=g_strdup(dest_file);
main.c:  if(access(hg->filename_read,F_OK)==0){
main.c:				   to_utf8(hg->filename_read));
main.c:				      to_utf8(hg->filename_read));
main.c:      if(hg->filename_read) g_free(hg->filename_read);
main.c:      hg->filename_read=g_strdup(dest_file);
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:  if(!hg->filename_write){
main.c:    if(hg->filehead){
main.c:      hg->filename_write=g_strconcat(hg->filehead,"." OPE_EXTENSION,NULL);
main.c:  if(access(hg->filename_write,F_OK)==0){
main.c:				   to_utf8(hg->filename_write));
main.c:				      to_utf8(hg->filename_write));
main.c:  else if(hg->filename_write){
main.c:					 to_utf8(g_path_get_dirname(hg->filename_write)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_write)));
main.c:      if(hg->filename_write) g_free(hg->filename_write);
main.c:      hg->filename_write=g_strdup(dest_file);
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:  if(hg->filehead){
main.c:    if(hg->filename_write) g_free(hg->filename_write);
main.c:    hg->filename_write=g_strconcat(hg->filehead,"." OPE_EXTENSION,NULL);
main.c:  if(access(hg->filename_write,F_OK)==0){
main.c:				   to_utf8(hg->filename_write));
main.c:				      to_utf8(hg->filename_write));
main.c:  else if(hg->filename_write){
main.c:					 to_utf8(g_path_get_dirname(hg->filename_write)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_write)));
main.c:      if(hg->filename_write) g_free(hg->filename_write);
main.c:      hg->filename_write=g_strdup(dest_file);
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:  if(hg->filehead){
main.c:    if(hg->filename_txt) g_free(hg->filename_txt);
main.c:    hg->filename_txt=g_strconcat(hg->filehead,PLAN_EXTENSION,NULL);
main.c:  if(access(hg->filename_txt,F_OK)==0){
main.c:				   to_utf8(hg->filename_txt));
main.c:				      to_utf8(hg->filename_txt));
main.c:  else if(hg->filename_txt){
main.c:					 to_utf8(g_path_get_dirname(hg->filename_txt)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_txt)));
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:      if(hg->filename_txt) g_free(hg->filename_txt);
main.c:      hg->filename_txt=g_strdup(dest_file);
main.c:  if(hg->filehead){
main.c:    if(hg->filename_txt) g_free(hg->filename_txt);
main.c:    hg->filename_txt=g_strconcat(hg->filehead,"." YAML_EXTENSION,NULL);
main.c:  if(access(hg->filename_txt,F_OK)==0){
main.c:				   to_utf8(hg->filename_txt));
main.c:				      to_utf8(hg->filename_txt));
main.c:  else if(hg->filename_txt){
main.c:					 to_utf8(g_path_get_dirname(hg->filename_txt)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_txt)));
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:      if(hg->filename_txt) g_free(hg->filename_txt);
main.c:      hg->filename_txt=g_strdup(dest_file);
main.c:  if(hg->filehead){
main.c:    if(hg->filename_pdf) g_free(hg->filename_pdf);
main.c:    hg->filename_pdf=g_strconcat(hg->filehead,"." PDF_EXTENSION,NULL);
main.c:  if(access(hg->filename_pdf,F_OK)==0){
main.c:				   to_utf8(hg->filename_pdf));
main.c:				      to_utf8(hg->filename_pdf));
main.c:  else if(hg->filename_pdf){
main.c:					 to_utf8(g_path_get_dirname(hg->filename_pdf)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_pdf)));
main.c:      if(hg->filename_pdf) g_free(hg->filename_pdf);
main.c:      hg->filename_pdf=g_strdup(dest_file);
main.c:  if(hg->filehead){
main.c:    if(hg->filename_pdf) g_free(hg->filename_pdf);
main.c:    hg->filename_pdf=g_strconcat(hg->filehead,"." PDF_EXTENSION,NULL);
main.c:  if(access(hg->filename_pdf,F_OK)==0){
main.c:				   to_utf8(hg->filename_pdf));
main.c:				      to_utf8(hg->filename_pdf));
main.c:  else if(hg->filename_pdf){
main.c:					 to_utf8(g_path_get_dirname(hg->filename_pdf)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_pdf)));
main.c:      if(hg->filename_pdf) g_free(hg->filename_pdf);
main.c:      hg->filename_pdf=g_strdup(dest_file);
main.c:  if(hg->filehead){
main.c:    if(hg->filename_pdf) g_free(hg->filename_pdf);
main.c:    hg->filename_pdf=g_strconcat(hg->filehead,"." PDF_EXTENSION,NULL);
main.c:  if(access(hg->filename_pdf,F_OK)==0){
main.c:				   to_utf8(hg->filename_pdf));
main.c:				      to_utf8(hg->filename_pdf));
main.c:  else if(hg->filename_pdf){
main.c:					 to_utf8(g_path_get_dirname(hg->filename_pdf)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_pdf)));
main.c:      if(hg->filename_pdf) g_free(hg->filename_pdf);
main.c:      hg->filename_pdf=g_strdup(dest_file);
main.c:  if(hg->filehead){
main.c:    if(hg->filename_pdf) g_free(hg->filename_pdf);
main.c:    hg->filename_pdf=g_strconcat(hg->filehead,"." PDF_EXTENSION,NULL);
main.c:  if(access(hg->filename_pdf,F_OK)==0){
main.c:				   to_utf8(hg->filename_pdf));
main.c:				      to_utf8(hg->filename_pdf));
main.c:  else if(hg->filename_pdf){
main.c:					 to_utf8(g_path_get_dirname(hg->filename_pdf)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_pdf)));
main.c:      if(hg->filename_pdf) g_free(hg->filename_pdf);
main.c:      hg->filename_pdf=g_strdup(dest_file);
main.c:  if(hg->filehead){
main.c:    if(hg->filename_pdf) g_free(hg->filename_pdf);
main.c:    hg->filename_pdf=g_strconcat(hg->filehead,"." PDF_EXTENSION,NULL);
main.c:  if(access(hg->filename_pdf,F_OK)==0){
main.c:				   to_utf8(hg->filename_pdf));
main.c:				      to_utf8(hg->filename_pdf));
main.c:  else if(hg->filename_pdf){
main.c:					 to_utf8(g_path_get_dirname(hg->filename_pdf)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_pdf)));
main.c:      if(hg->filename_pdf) g_free(hg->filename_pdf);
main.c:      hg->filename_pdf=g_strdup(dest_file);
main.c:  if(hg->filehead){
main.c:    if(hg->filename_hoe) g_free(hg->filename_hoe);
main.c:    hg->filename_hoe=g_strconcat(hg->filehead,"." HOE_EXTENSION,NULL);
main.c:  if(access(hg->filename_hoe,F_OK)==0){
main.c:				   to_utf8(hg->filename_hoe));
main.c:				      to_utf8(hg->filename_hoe));
main.c:  else if(hg->filename_hoe){
main.c:					 to_utf8(g_path_get_dirname(hg->filename_hoe)));
main.c:				       to_utf8(g_path_get_basename(hg->filename_hoe)));
main.c:      if(hg->filename_hoe) g_free(hg->filename_hoe);
main.c:      hg->filename_hoe=g_strdup(dest_file);
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:  if(hg->filename_hoe){
main.c:				   to_utf8(hg->filename_hoe));
main.c:				      to_utf8(hg->filename_hoe));
main.c:      if(hg->filename_hoe) g_free(hg->filename_hoe);
main.c:      hg->filename_hoe=g_strdup(dest_file);
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:  if(!hg->filename_write){
main.c:  gtk_widget_set_sensitive(hg->b_objtree_add,FALSE);
main.c:  gtk_widget_set_sensitive(hg->b_objtree_remove,FALSE);
main.c:    gdk_window_raise(hg->skymon_main->window);
main.c:  if(hg->filename_write){
main.c:				   to_utf8(hg->filename_write));
main.c:				      to_utf8(hg->filename_write));
main.c:      if(hg->filename_write) g_free(hg->filename_write);
main.c:      hg->filename_write=g_strdup(dest_file);
main.c:      if(hg->filehead) g_free(hg->filehead);
main.c:      hg->filehead=make_head(dest_file);
main.c:    hg->efs_setup=0;
main.c:      if(hg->setup[i_use].use){
main.c:	if(hg->setup[i_use].setup<0){
main.c:	  sprintf(tmp,"Setup-%d : NonStd-%d",i_use+1,-hg->setup[i_use].setup);
main.c:	  sprintf(tmp,"Setup-%d : Std%s",i_use+1,setups[hg->setup[i_use].setup].initial);
main.c:	  hg->efs_setup=i_use;
main.c:    gtk_combo_box_set_active(GTK_COMBO_BOX(combo),hg->efs_setup);
main.c:		       &hg->efs_setup);
main.c:  hg->i_max=0;
main.c:  hg->i_plan_max=0;
main.c:  hg->fr_year=tmpt->tm_year+1900;
main.c:  hg->fr_month=tmpt->tm_mon+1;
main.c:  hg->fr_day=tmpt->tm_mday;
main.c:  hg->nights=1;
main.c:  hg->prop_id=g_strdup("o00000");
main.c:  hg->prop_pass=NULL;
main.c:  hg->observer=NULL;
main.c:  hg->temp_dir=get_win_temp();
main.c:  hg->home_dir=get_win_home();
main.c:  hg->temp_dir=g_strdup("/tmp");
main.c:  hg->home_dir=g_strdup(g_get_home_dir());
main.c:  hg->ocs=OCS_GEN2;
main.c:  hg->timezone=TIMEZONE_SUBARU;
main.c:  hg->wave1=WAVE1_SUBARU;
main.c:  hg->wave0=WAVE0_SUBARU;
main.c:  hg->temp=TEMP_SUBARU;
main.c:  hg->pres=PRES_SUBARU;
main.c:  hg->dss_scale=FC_SCALE_LINEAR;
main.c:      hg->binning[i_bin]=binnings[i_bin];
main.c:  hg->camz_b=CAMZ_B;
main.c:  hg->camz_r=CAMZ_R;
main.c:  hg->d_cross=D_CROSS;
main.c:      hg->setup[i_use].setup=0;
main.c:      hg->setup[i_use].use=FALSE;
main.c:      hg->setup[i_use].binning=0;
main.c:      hg->setup[i_use].slit_width=200;
main.c:      hg->setup[i_use].slit_length=2200;
main.c:      hg->setup[i_use].imr=IMR_NO;
main.c:      hg->setup[i_use].is=IS_NO;
main.c:      hg->setup[i_use].i2=FALSE;
main.c:    hg->setup[0].use=TRUE;
main.c:  hg->exptime_factor=1;
main.c:  hg->brightness=2000;
main.c:  hg->sv_area=SV_PART;
main.c:  hg->sv_integrate=1;
main.c:  hg->sv_acq=TIME_ACQ;
main.c:  hg->sv_region=200;
main.c:  hg->sv_calc=DEF_SV_CALC;
main.c:  hg->exptime_sv=DEF_SV_EXP;
main.c:  hg->sv_slitx=DEF_SV_SLITX;
main.c:  hg->sv_slity=DEF_SV_SLITY;
main.c:  hg->sv_isx=DEF_SV_ISX;
main.c:  hg->sv_isy=DEF_SV_ISY;
main.c:  hg->sv_is3x=DEF_SV_IS3X;
main.c:  hg->sv_is3y=DEF_SV_IS3Y;
main.c:  hg->def_exp=DEF_EXP;
main.c:  hg->def_guide=SV_GUIDE;
main.c:  hg->def_pa=0;
main.c:    hg->nonstd[i].col=COL_RED;
main.c:    hg->nonstd[i].cross=15730;
main.c:    hg->nonstd[i].echelle=DEF_ECHELLE;
main.c:    hg->nonstd[i].camr=-3600;
main.c:    hg->line[i].name=NULL;
main.c:    hg->line[i].wave=0.;
main.c:    hg->obj[i].name=NULL;
main.c:  hg->efs_ps=g_strdup(PS_FILE);
main.c:  hg->filename_hoe=NULL;
main.c:  hg->filename_log=NULL;
main.c:  hg->azel_mode=AZEL_NORMAL;
main.c:  hg->flag_bunnei=FALSE;
main.c:  hg->flag_secz=FALSE;
main.c:  hg->exp8mag=100;
main.c:  hg->secz_factor=0.10;
main.c:  hg->skymon_mode=SKYMON_CUR;
main.c:  hg->skymon_objsz=SKYMON_DEF_OBJSZ;
main.c:  hg->www_com=g_strdup(WWW_BROWSER);
main.c:  hg->dss_arcmin          =DSS_ARCMIN;
main.c:  hg->dss_pix             =DSS_PIX;
main.c:  hg->dss_host             =g_strdup(FC_HOST_SKYVIEW);
main.c:  hg->dss_path             =g_strdup(FC_PATH_SKYVIEW);
main.c:  hg->dss_src              =g_strdup(FC_SRC_SKYVIEW_DSS2R);
main.c:  hg->dss_tmp=g_strconcat(hg->temp_dir,
main.c:  hg->dss_file=g_strconcat(hg->temp_dir,
main.c:  hg->fc_mode              =FC_SKYVIEW_DSS2R;
main.c:  hg->dss_pa=0;
main.c:  hg->dss_flip=FALSE;
main.c:  hg->dss_draw_slit=TRUE;
main.c:  hg->sdss_photo=FALSE;
main.c:  hg->sdss_spec=FALSE;
main.c:  hg->fc_inst=FC_INST_HDS;
main.c:  hg->plan_tmp_or=FALSE;
main.c:  hg->plan_tmp_sw=200;
main.c:  hg->plan_tmp_sl=2000;
main.c:  hg->plan_tmp_setup=0;
main.c:  hg->plan_obj_i=0;
main.c:  hg->plan_obj_exp=DEF_EXP;
main.c:  hg->plan_obj_repeat=1;
main.c:  hg->plan_obj_omode=PLAN_OMODE_FULL;
main.c:  hg->plan_obj_guide=SV_GUIDE;
main.c:  hg->plan_bias_repeat=5;
main.c:  hg->plan_flat_repeat=10;
main.c:  hg->plan_focus_mode=PLAN_FOCUS_SV;
main.c:  hg->plan_setup_cmode=PLAN_CMODE_FULL;
main.c:  hg->plan_i2_pos=PLAN_I2_IN;
main.c:  hg->plan_setaz=-90.;
main.c:  hg->plan_setel=90.;
main.c:  hg->plan_start=PLAN_START_EVENING;
main.c:  hg->plan_start_hour=24;
main.c:  hg->plan_start_min=20;
main.c:  hg->plan_delay=SUNSET_OFFSET;
main.c:  hg->plan_comment=NULL;
main.c:  hg->plot_all=PLOT_ALL_SINGLE;
main.c:  hg->plot_moon=FALSE;
main.c:  hg->plot_output=PLOT_OUTPUT_WINDOW;
main.c:  hg->skymon_output=SKYMON_OUTPUT_WINDOW;
main.c:  hg->efs_output=EFS_OUTPUT_WINDOW;
main.c:  hg->std_i_max=0;
main.c:  hg->std_file=g_strconcat(hg->temp_dir,
main.c:  hg->stddb_mode=STDDB_IRAFSTD;
main.c:  hg->std_dra   =STD_DRA;
main.c:  hg->std_ddec  =STD_DDEC;
main.c:  hg->std_vsini =STD_VSINI;
main.c:  hg->std_vmag  =STD_VMAG;
main.c:  hg->std_sptype=g_strdup(STD_SPTYPE);
main.c:  hg->std_iras12=STD_IRAS12;
main.c:  hg->std_iras25=STD_IRAS25;
main.c:  hg->std_cat   =g_strdup(STD_CAT);
main.c:  hg->std_mag1  =STD_MAG1;
main.c:  hg->std_mag2  =STD_MAG2;
main.c:  hg->std_band  =g_strdup(STD_BAND);
main.c:  hg->std_sptype2  =g_strdup(STD_SPTYPE_ALL);
main.c:  hg->flag_bunnei=FALSE;
main.c:  if((fp=fopen(hg->filename_read,"rb"))==NULL){
main.c:    fprintf(stderr," File Read Error  \"%s\" \n", hg->filename_read);
main.c:      if(hg->obj[i_list].name) g_free(hg->obj[i_list].name);
main.c:      hg->obj[i_list].name=g_strdup(tmp_char);
main.c:      hg->obj[i_list].name=cut_spc(tmp_char);
main.c:      hg->obj[i_list].ra=(gdouble)g_strtod(tmp_char,NULL);
main.c:      //hg->obj[i_list].ra=read_radec(tmp_char);
main.c:      hg->obj[i_list].dec=(gdouble)g_strtod(tmp_char,NULL);
main.c:      //hg->obj[i_list].dec=read_radec(tmp_char);
main.c:      hg->obj[i_list].equinox=(gdouble)g_strtod(tmp_char,NULL);
main.c:	hg->obj[i_list].note=g_strdup(tmp_char);
main.c:	hg->obj[i_list].note=cut_spc(tmp_char);
main.c:	hg->obj[i_list].note=NULL;
main.c:      hg->obj[i_list].exp=DEF_EXP;
main.c:      hg->obj[i_list].repeat=1;
main.c:      hg->obj[i_list].guide=SV_GUIDE;
main.c:      hg->obj[i_list].pa=0;
main.c:      hg->obj[i_list].setup[0]=TRUE;
main.c:	hg->obj[i_list].setup[i_use]=FALSE;
main.c:  hg->i_max=i_list;
main.c:  if((fp=fopen(hg->filename_read,"rb"))==NULL){
main.c:    fprintf(stderr," File Read Error  \"%s\" \n", hg->filename_read);
main.c:  hg->flag_bunnei=TRUE;
main.c:      if(hg->obj[i_list].name) g_free(hg->obj[i_list].name);
main.c:      hg->obj[i_list].name=g_strdup(tmp_char);
main.c:      hg->obj[i_list].name=cut_spc(tmp_char);
main.c:      hg->obj[i_list].ra=(gdouble)g_strtod(tmp_char,NULL);
main.c:      hg->obj[i_list].dec=(gdouble)g_strtod(tmp_char,NULL);
main.c:      hg->obj[i_list].equinox=(gdouble)g_strtod(tmp_char,NULL);
main.c:      hg->obj[i_list].mag=(gdouble)g_strtod(tmp_char,NULL);
main.c:	hg->obj[i_list].note=g_strdup(tmp_char);
main.c:	hg->obj[i_list].note=cut_spc(tmp_char);
main.c:	hg->obj[i_list].note=NULL;
main.c:      hg->obj[i_list].exp=DEF_EXP;
main.c:      hg->obj[i_list].repeat=1;
main.c:      hg->obj[i_list].guide=SV_GUIDE;
main.c:      hg->obj[i_list].pa=0;
main.c:      hg->obj[i_list].setup[0]=TRUE;
main.c:	hg->obj[i_list].setup[i_use]=FALSE;
main.c:  hg->i_max=i_list;
main.c:  hg->flag_bunnei=FALSE;
main.c:  if((fp=fopen(hg->filename_read,"rb"))==NULL){
main.c:    fprintf(stderr," File Read Error  \"%s\" \n", hg->filename_read);
main.c:		  if(hg->obj[i_list].name) g_free(hg->obj[i_list].name);
main.c:		  hg->obj[i_list].name=g_strndup(cp,strlen(cp)-strlen(cp2));
main.c:		  if(hg->obj[i_list].name) g_free(hg->obj[i_list].name);
main.c:		      hg->obj[i_list].name=g_strndup(cp,strlen(cp)-strlen(cp2));
main.c:		  else hg->obj[i_list].name=g_strdup(cp);
main.c:		  hg->obj[i_list].ra=(gdouble)g_strtod(cp3,NULL);
main.c:		  hg->obj[i_list].dec=(gdouble)g_strtod(cp3,NULL);
main.c:		  hg->obj[i_list].equinox=(gdouble)g_strtod(cp3,NULL);
main.c:	    hg->obj[i_list].note=NULL;
main.c:	    hg->obj[i_list].exp=DEF_EXP;
main.c:	    hg->obj[i_list].repeat=1;
main.c:	    hg->obj[i_list].guide=SV_GUIDE;
main.c:	    hg->obj[i_list].pa=0;
main.c:	    hg->obj[i_list].setup[0]=TRUE;
main.c:	      hg->obj[i_list].setup[i_use]=FALSE;
main.c:  hg->i_max=i_list;
main.c:  if((fp=fopen(hg->filename_read,"r"))==NULL){
main.c:    fprintf(stderr," File Read Error  \"%s\" \n", hg->filename_read);
main.c:  i_base=hg->i_max;
main.c:      for(i_list=0;i_list<hg->i_max;i_list++){
main.c:	if(strcmp(tmp_obj.name,hg->obj[i_list].name)==0){
main.c:	if(!is_number(tmp_char,hg->i_max-i_base+1,"RA")) break;
main.c:	if(!is_number(tmp_char,hg->i_max-i_base+1,"Dec")) break;
main.c:	if(!is_number(tmp_char,hg->i_max-i_base+1,"Equinox")) break;
main.c:	hg->obj[hg->i_max]=tmp_obj;
main.c:	hg->i_max++;
main.c:  if((fp=fopen(hg->filename_write,"w"))==NULL){
main.c:    fprintf(stderr," File Write Error  \"%s\" \n", hg->filename_write);
main.c:  to_year=hg->fr_year;
main.c:  to_month=hg->fr_month;
main.c:  to_day=hg->fr_day;
main.c:  add_day(hg, &to_year, &to_month, &to_day, hg->nights);
main.c:  if(hg->observer) fprintf(fp, "######  Observer : %s ######\n",hg->observer);
main.c:	  hg->fr_year,hg->fr_month,hg->fr_day,
main.c:  fprintf(fp, "PROPOSALID=%s\n",hg->prop_id);
main.c:  if(hg->setup[0].is==IS_NO){
main.c:  fprintf(fp, "SV_X=SV_SLIT_X=%5.1f\n",hg->sv_slitx);
main.c:  fprintf(fp, "SV_Y=SV_SLIT_Y=%5.1f CALC_MODE=SLIT SV_COUNT=(-100)\n",hg->sv_slity);
main.c:  fprintf(fp, "SV_IS_X=SV_SLIT_X=%5.1f\n",hg->sv_isx);
main.c:  fprintf(fp, "SV_IS_Y=SV_SLIT_Y=%5.1f CALC_MODE=CTR SV_COUNT=(-160)\n",hg->sv_isy);
main.c:  fprintf(fp, "SV_IS3_X=SV_SLIT_X=%5.1f\n",hg->sv_is3x);
main.c:  fprintf(fp, "SV_IS3_Y=SV_SLIT_Y=%5.1f CALC_MODE=CTR SV_COUNT=(-160)\n",hg->sv_is3y);
main.c:  fprintf(fp, "CAMZ_B=CAM_Z=%d\n",hg->camz_b);
main.c:  fprintf(fp, "CAMZ_R=CAM_Z=%d\n",hg->camz_r);
main.c:	  hg->exptime_factor,
main.c:	  hg->brightness,
main.c:	  hg->sv_integrate);
main.c:  for(i_list=0;i_list<hg->i_max;i_list++){
main.c:    tgt=make_tgt(hg->obj[i_list].name);
main.c:	    tgt, hg->obj[i_list].name, 
main.c:      	    hg->obj[i_list].ra,  hg->obj[i_list].dec, hg->obj[i_list].equinox);
main.c:  if(hg->ocs!=OCS_GEN2){
main.c:    if(hg->setup[i_use].use){
main.c:      if(hg->setup[i_use].setup<0){ // NonStd
main.c:	i_set=-hg->setup[i_use].setup-1;
main.c:	if(hg->nonstd[i_set].col==COL_BLUE){
main.c:		  (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000,
main.c:		  hg->setup[i_use].fil1,hg->setup[i_use].fil2,
main.c:		  hg->nonstd[i_set].cross);
main.c:	  if(hg->nonstd[i_set].echelle!=DEF_ECHELLE){
main.c:	    fprintf(fp, " ECHELLE=%d", hg->nonstd[i_set].echelle);
main.c:	  if(hg->nonstd[i_set].camr!=-3600){
main.c:	    fprintf(fp, " CAMERA_ROTATE=%d", hg->nonstd[i_set].camr);
main.c:		  (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000,
main.c:		  hg->setup[i_use].fil1,hg->setup[i_use].fil2,
main.c:		  hg->nonstd[i_set].cross);
main.c:		  (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000,
main.c:		  hg->setup[i_use].fil1,hg->setup[i_use].fil2,
main.c:		  hg->nonstd[i_set].cross);
main.c:	  if(hg->nonstd[i_set].echelle!=DEF_ECHELLE){
main.c:	    fprintf(fp, " ECHELLE=%d", hg->nonstd[i_set].echelle);
main.c:	  if(hg->nonstd[i_set].camr!=-3600){
main.c:	    fprintf(fp, " CAMERA_ROTATE=%d", hg->nonstd[i_set].camr);
main.c:		  (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000,
main.c:		  hg->setup[i_use].fil1,hg->setup[i_use].fil2,
main.c:		  hg->nonstd[i_set].cross);
main.c:	  switch(hg->setup[i_use].is){
main.c:	    if((strcmp(hg->setup[i_use].fil1,"Free")!=0)||
main.c:	       (strcmp(hg->setup[i_use].fil2,"Free")!=0)){
main.c:	    if((strcmp(hg->setup[i_use].fil1,"Free")!=0)||
main.c:	       (strcmp(hg->setup[i_use].fil2,"Free")!=0)){
main.c:	    if((strcmp(hg->setup[i_use].fil1,"Free")!=0)||
main.c:	       (strcmp(hg->setup[i_use].fil2,"Free")!=0)){
main.c:	i_set=hg->setup[i_use].setup;
main.c:		  (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000,
main.c:		  hg->setup[i_use].fil1,hg->setup[i_use].fil2,
main.c:		  (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000,
main.c:		  hg->setup[i_use].fil1,hg->setup[i_use].fil2,
main.c:		(hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000,
main.c:		hg->setup[i_use].fil1,hg->setup[i_use].fil2,
main.c:	switch(hg->setup[i_use].is){
main.c:	  if((strcmp(hg->setup[i_use].fil1,"Free")!=0)||
main.c:	     (strcmp(hg->setup[i_use].fil2,"Free")!=0)){
main.c:	  if((strcmp(hg->setup[i_use].fil1,"Free")!=0)||
main.c:	     (strcmp(hg->setup[i_use].fil2,"Free")!=0)){
main.c:	  if((strcmp(hg->setup[i_use].fil1,"Free")!=0)||
main.c:	     (strcmp(hg->setup[i_use].fil2,"Free")!=0)){
main.c:	  hg->fr_month,hg->fr_day,hg->fr_year);
main.c:  if(hg->ocs!=OCS_GEN2){
main.c:    for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
main.c:      switch(hg->plan[i_plan].type){
main.c:	WriteOPE_COMMENT_plan(fp,hg,hg->plan[i_plan]);
main.c:	WriteOPE_OBJ_plan(fp,hg,hg->plan[i_plan]);
main.c:	fprintf(fp, "### SetAzEl  Az=%d El=%d  via Launcher ###\n\n",(int)hg->plan[i_plan].az1,(int)hg->plan[i_plan].el1);
main.c:	if(hg->plan[i_plan].sod>0)  fprintf(fp, "## [%s]\n", get_txt_tod(hg->plan[i_plan].sod));
main.c:	fprintf(fp, "###### %s #####\n", hg->plan[i_plan].txt);
main.c:	switch(hg->plan[i_plan].focus_mode){
main.c:	WriteOPE_BIAS_plan(fp,hg->plan[i_plan]);
main.c:	WriteOPE_FLAT_plan(fp,hg,hg->plan[i_plan]);
main.c:	WriteOPE_COMP_plan(fp,hg,hg->plan[i_plan]);
main.c:	WriteOPE_SetUp_plan(fp,hg,hg->plan[i_plan]);
main.c:	if(hg->plan[i_plan].sod>0)  fprintf(fp, "## [%s]\n", get_txt_tod(hg->plan[i_plan].sod));
main.c:	fprintf(fp, "###### %s #####\n", hg->plan[i_plan].txt);
main.c:	if(hg->plan[i_plan].i2_pos==PLAN_I2_IN){
main.c:    if(hg->ocs!=OCS_GEN2){
main.c:    if(hg->ocs!=OCS_GEN2){
main.c:    if(hg->setup[i_use].use){
main.c:      if(hg->setup[i_use].setup < 0){ //Non-Std
main.c:		-hg->setup[i_use].setup,
main.c:		hg->binning[hg->setup[i_use].binning].x,
main.c:		hg->binning[hg->setup[i_use].binning].y);
main.c:		setups[hg->setup[i_use].setup].initial,
main.c:		hg->binning[hg->setup[i_use].binning].x,
main.c:		hg->binning[hg->setup[i_use].binning].y);
main.c:      for(i_list=0;i_list<hg->i_max;i_list++){
main.c:	if(hg->obj[i_list].setup[i_use]){
main.c:		  hg->obj[i_list].name);
main.c:	  if(hg->flag_bunnei){
main.c:		    hg->obj[i_list].mag);
main.c:	  if(hg->obj[i_list].note){
main.c:		    hg->obj[i_list].note);
main.c:	  if(hg->setup[i_use].setup < 0){ //Non-Std
main.c:		    -hg->setup[i_use].setup,
main.c:		    hg->binning[hg->setup[i_use].binning].x,
main.c:		    hg->binning[hg->setup[i_use].binning].y);
main.c:		    setups[hg->setup[i_use].setup].initial,
main.c:		    hg->binning[hg->setup[i_use].binning].x,
main.c:		    hg->binning[hg->setup[i_use].binning].y);
main.c:	  switch(hg->obj[i_list].guide){
main.c:	  switch(hg->setup[i_use].imr){
main.c:	  if(hg->flag_bunnei){
main.c:	    if(hg->obj[i_list].mag>MAG_SVFILTER1){  // Filter=V
main.c:	    else if(hg->obj[i_list].mag>MAG_SVFILTER2){  //Filter=ND2
main.c:	  switch(hg->obj[i_list].guide){
main.c:	  tgt=make_tgt(hg->obj[i_list].name);
main.c:	  switch(hg->obj[i_list].guide){
main.c:		    hg->sv_region);
main.c:		    hg->sv_region,
main.c:		    hg->sv_calc);
main.c:		  hg->exptime_sv);
main.c:	  switch(hg->setup[i_use].imr){
main.c:		    hg->obj[i_list].pa);
main.c:	  if(hg->setup[i_use].is!=IS_NO){
main.c:	    if(hg->setup[i_use].is==IS_020X3){
main.c:		    hg->setup[i_use].slit_length,
main.c:		    hg->setup[i_use].slit_width);
main.c:	  switch(hg->obj[i_list].guide){
main.c:	    if(hg->sv_area==SV_FULL){
main.c:	  for(i_repeat=0;i_repeat<hg->obj[i_list].repeat;i_repeat++){
main.c:	    if(hg->flag_bunnei){
main.c:	    if(hg->setup[i_use].is!=IS_NO){
main.c:	      if(hg->setup[i_use].is==IS_020X3){
main.c:	    tgt=make_tgt(hg->obj[i_list].name);
main.c:		    hg->obj[i_list].exp, hg->sv_integrate, tgt);
main.c:	  if(hg->setup[i_use].i2){
main.c:	    for(i_repeat=0;i_repeat<hg->obj[i_list].repeat;i_repeat++){
main.c:	      if(hg->flag_bunnei){
main.c:	      if(hg->setup[i_use].is!=IS_NO){
main.c:		if(hg->setup[i_use].is==IS_020X3){
main.c:	      tgt=make_tgt(hg->obj[i_list].name);
main.c:		      hg->obj[i_list].exp, hg->sv_integrate, tgt);
main.c:  if((fp=fopen(hg->filename_txt,"w"))==NULL){
main.c:    fprintf(stderr," File Write Error  \"%s\" \n", hg->filename_txt);
main.c:  to_year=hg->fr_year;
main.c:  to_month=hg->fr_month;
main.c:  to_day=hg->fr_day;
main.c:  add_day(hg, &to_year, &to_month, &to_day, hg->nights);
main.c:  fprintf(fp, "   prop-id  : %s\n",hg->prop_id);
main.c:  fprintf(fp, "   start    : %4d-%02d-%02d 16:59 -10\n",hg->fr_year,hg->fr_month,hg->fr_day);
main.c:  if(hg->observer)
main.c:    fprintf(fp, "   observers: [%s ]\n",hg->observer);
main.c:  for(i_list=0;i_list<hg->i_max;i_list++){
main.c:    tgt=make_tgt(hg->obj[i_list].name);
main.c:    fprintf(fp, "      name   : \"%s\"\n", hg->obj[i_list].name);
main.c:    fprintf(fp, "      ra     : s%09.2f\n", hg->obj[i_list].ra);
main.c:    fprintf(fp, "      dec    : s%+010.2f\n", hg->obj[i_list].dec);
main.c:    fprintf(fp, "      equinox: %7.2f\n", hg->obj[i_list].equinox);
main.c:    if(hg->obj[i_list].note)
main.c:      fprintf(fp, "      note   : \"%s\"\n", hg->obj[i_list].note);
main.c:  if(hg->sv_area==SV_FULL){
main.c:  fprintf(fp, "      sv_exp         : %d\n",hg->exptime_sv);
main.c:  fprintf(fp, "      sv_read_region : %d\n",hg->sv_region);
main.c:  fprintf(fp, "      sv_integrate   : %d\n",hg->sv_integrate);
main.c:  fprintf(fp, "      sv_acq         : %d\n",hg->sv_acq);
main.c:  fprintf(fp, "      exptime_factor : %d\n",hg->exptime_factor);
main.c:  fprintf(fp, "      brightness     : %d\n",hg->brightness);
main.c:  fprintf(fp, "      sv_calc_region : %d\n",hg->sv_calc);
main.c:  fprintf(fp, "      sv_slit_x      : %.1f\n",hg->sv_slitx);
main.c:  fprintf(fp, "      sv_slit_y      : %.1f\n",hg->sv_slity);
main.c:  fprintf(fp, "      sv_is_x        : %.1f\n",hg->sv_isx);
main.c:  fprintf(fp, "      sv_is_y        : %.1f\n",hg->sv_isy);
main.c:  fprintf(fp, "      sv_is3_x       : %.1f\n",hg->sv_is3x);
main.c:  fprintf(fp, "      sv_is3_y       : %.1f\n",hg->sv_is3y);
main.c:  fprintf(fp, "      camz_b      : %d\n",hg->camz_b);
main.c:  fprintf(fp, "      camz_r      : %d\n",hg->camz_r);
main.c:  fprintf(fp, "      d_cross     : %d\n",hg->d_cross);
main.c:    if(hg->setup[i_use].use){
main.c:      if(hg->setup[i_use].setup<0){ // NonStd
main.c:	i_set=-hg->setup[i_use].setup-1;
main.c:		hg->binning[hg->setup[i_use].binning].x,
main.c:		hg->binning[hg->setup[i_use].binning].y);
main.c:		hg->binning[hg->setup[i_use].binning].x,
main.c:		hg->binning[hg->setup[i_use].binning].y);
main.c:	if(hg->nonstd[i_set].col==COL_BLUE){
main.c:	fprintf(fp, "      slit_width     : %d\n", hg->setup[i_use].slit_width);
main.c:	fprintf(fp, "      slit_length    : %d\n", hg->setup[i_use].slit_length);
main.c:	fprintf(fp, "      filter1        : %s\n", hg->setup[i_use].fil1);
main.c:	fprintf(fp, "      filter2        : %s\n", hg->setup[i_use].fil2);
main.c:	fprintf(fp, "      echelle        : %d\n", hg->nonstd[i_set].echelle);
main.c:	fprintf(fp, "      cross_scan     : %d\n", hg->nonstd[i_set].cross);
main.c:	fprintf(fp, "      camera_rorate  : %d\n", hg->nonstd[i_set].camr);
main.c:	fprintf(fp, "      xbin           : %d\n", hg->binning[hg->setup[i_use].binning].x);
main.c:	fprintf(fp, "      ybin           : %d\n", hg->binning[hg->setup[i_use].binning].y);
main.c:	if(hg->nonstd[i_set].col==COL_BLUE){
main.c:	    if(hg->nonstd[i_set].cross<=setups[j_set].cross_scan){
main.c:	    if((setups[j_set].cross_scan - hg->nonstd[i_set].cross)
main.c:	       < (hg->nonstd[i_set].cross - setups[j_set-1].cross_scan)){
main.c:	    if(hg->nonstd[i_set].cross<=setups[j_set].cross_scan){
main.c:	    if((setups[j_set].cross_scan - hg->nonstd[i_set].cross)
main.c:	       < (hg->nonstd[i_set].cross - setups[j_set-1].cross_scan)){
main.c:	if(hg->binning[hg->setup[i_use].binning].x*hg->binning[hg->setup[i_use].binning].y==1){
main.c:	  f1_exp=setups[nonstd_flat].f1_exp/hg->binning[hg->setup[i_use].binning].x
main.c:	    /hg->binning[hg->setup[i_use].binning].y;
main.c:	  f2_exp=setups[nonstd_flat].f2_exp/hg->binning[hg->setup[i_use].binning].x
main.c:	    /hg->binning[hg->setup[i_use].binning].y;
main.c:	  c_exp=20/hg->binning[hg->setup[i_use].binning].x
main.c:	    /hg->binning[hg->setup[i_use].binning].y;
main.c:	i_set=hg->setup[i_use].setup;
main.c:		hg->binning[hg->setup[i_use].binning].x,
main.c:		hg->binning[hg->setup[i_use].binning].y);
main.c:		hg->binning[hg->setup[i_use].binning].x,
main.c:		hg->binning[hg->setup[i_use].binning].y);
main.c:	fprintf(fp, "      slit_width     : %d\n", hg->setup[i_use].slit_width);
main.c:	fprintf(fp, "      slit_length    : %d\n", hg->setup[i_use].slit_length);
main.c:	fprintf(fp, "      filter1        : %s\n", hg->setup[i_use].fil1);
main.c:	fprintf(fp, "      filter2        : %s\n", hg->setup[i_use].fil2);
main.c:	fprintf(fp, "      xbin           : %d\n", hg->binning[hg->setup[i_use].binning].x);
main.c:	fprintf(fp, "      ybin           : %d\n", hg->binning[hg->setup[i_use].binning].y);
main.c:	if(hg->binning[hg->setup[i_use].binning].x*hg->binning[hg->setup[i_use].binning].y==1){
main.c:	  f1_exp=setups[i_set].f1_exp/hg->binning[hg->setup[i_use].binning].x
main.c:	    /hg->binning[hg->setup[i_use].binning].y;
main.c:	  f2_exp=setups[i_set].f2_exp/hg->binning[hg->setup[i_use].binning].x
main.c:	    /hg->binning[hg->setup[i_use].binning].y;
main.c:	  c_exp=20/hg->binning[hg->setup[i_use].binning].x
main.c:	    /hg->binning[hg->setup[i_use].binning].y;
main.c:  for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
main.c:    switch(hg->plan[i_plan].type){
main.c:      WriteOPE_COMMENT_plan(fp,hg,hg->plan[i_plan]);
main.c:      WriteYAML_OBJ_plan(fp,hg,hg->plan[i_plan]);
main.c:      if(hg->plan[i_plan].sod>0)  fprintf(fp, "## [%s]\n", get_txt_tod(hg->plan[i_plan].sod));
main.c:      fprintf(fp, "###### %s #####\n", hg->plan[i_plan].txt);
main.c:      switch(hg->plan[i_plan].focus_mode){
main.c:      WriteYAML_BIAS_plan(fp,hg,hg->plan[i_plan]);
main.c:      WriteYAML_FLAT_plan(fp,hg,hg->plan[i_plan]);
main.c:      WriteYAML_COMP_plan(fp,hg,hg->plan[i_plan]);
main.c:      WriteYAML_SetUp_plan(fp,hg,hg->plan[i_plan]);
main.c:      if(hg->plan[i_plan].sod>0)  fprintf(fp, "## [%s]\n", get_txt_tod(hg->plan[i_plan].sod));
main.c:      fprintf(fp, "###### %s #####\n", hg->plan[i_plan].txt);
main.c:      if(hg->plan[i_plan].i2_pos==PLAN_I2_IN){
main.c:  if((fp=fopen(hg->filename_txt,"w"))==NULL){
main.c:    fprintf(stderr," File Write Error  \"%s\" \n", hg->filename_txt);
main.c:  for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
main.c:    if(hg->plan[i_plan].sod>0){
main.c:	       get_txt_tod(hg->plan[i_plan].sod), 
main.c:	       ( (hg->plan[i_plan].time>0) ? hg->plan[i_plan].time/60 : -hg->plan[i_plan].time/60),
main.c:	       hg->plan[i_plan].txt);
main.c:    else if (hg->plan[i_plan].time!=0){
main.c:	       ( (hg->plan[i_plan].time>0) ? hg->plan[i_plan].time/60 : -hg->plan[i_plan].time/60),
main.c:	       hg->plan[i_plan].txt);
main.c:      if(hg->plan[i_plan].type==PLAN_TYPE_COMMENT){
main.c:	fprintf (fp, "\n              %s\n\n", hg->plan[i_plan].txt);
main.c:	fprintf (fp, "              %s\n", hg->plan[i_plan].txt);
main.c:  if(hg->setup[plan.setup].setup<0){ // NonStd
main.c:    i_set=-hg->setup[plan.setup].setup-1;
main.c:	    hg->binning[hg->setup[plan.setup].binning].x,
main.c:	    hg->binning[hg->setup[plan.setup].binning].y);
main.c:    i_set=hg->setup[plan.setup].setup;
main.c:	    hg->binning[hg->setup[plan.setup].binning].x,
main.c:	    hg->binning[hg->setup[plan.setup].binning].y);
main.c:	    hg->setup[plan.setup].slit_length);
main.c:  if(hg->setup[plan.setup].setup<0){ // NonStd
main.c:    i_set=-hg->setup[plan.setup].setup-1;
main.c:      if(hg->nonstd[i_set].col==COL_BLUE){
main.c:		hg->setup[plan.setup].fil1,hg->setup[plan.setup].fil2,
main.c:		hg->nonstd[i_set].cross);
main.c:	if(hg->nonstd[i_set].echelle!=DEF_ECHELLE){
main.c:	  fprintf(fp, " ECHELLE=%d", hg->nonstd[i_set].echelle);
main.c:	if(hg->nonstd[i_set].camr!=-3600){
main.c:	  fprintf(fp, " CAMERA_ROTATE=%d", hg->nonstd[i_set].camr);
main.c:		hg->setup[plan.setup].fil1,hg->setup[plan.setup].fil2,
main.c:		hg->nonstd[i_set].cross);
main.c:	if(hg->nonstd[i_set].echelle!=DEF_ECHELLE){
main.c:	  fprintf(fp, " ECHELLE=%d", hg->nonstd[i_set].echelle);
main.c:	if(hg->nonstd[i_set].camr!=-3600){
main.c:	  fprintf(fp, " CAMERA_ROTATE=%d", hg->nonstd[i_set].camr);
main.c:	      hg->setup[plan.setup].fil1,hg->setup[plan.setup].fil2,
main.c:	      hg->nonstd[i_set].cross);
main.c:    i_set=hg->setup[plan.setup].setup;
main.c:		hg->setup[plan.setup].fil1,hg->setup[plan.setup].fil2,
main.c:		hg->setup[plan.setup].fil1,hg->setup[plan.setup].fil2,
main.c:	      hg->setup[plan.setup].fil1,hg->setup[plan.setup].fil2,
main.c:  if(hg->setup[plan.setup].setup<0){ // NonStd
main.c:    i_set=-hg->setup[plan.setup].setup-1;
main.c:	    hg->binning[hg->setup[plan.setup].binning].x,
main.c:	    hg->binning[hg->setup[plan.setup].binning].y);
main.c:    i_set=hg->setup[plan.setup].setup;
main.c:	    hg->binning[hg->setup[plan.setup].binning].x,
main.c:	    hg->binning[hg->setup[plan.setup].binning].y);
main.c:    if(hg->setup[i_use].use){
main.c:	i_bin=hg->setup[i_use].binning;
main.c:	if(hg->setup[i_use].setup < 0){ // NonStd
main.c:		  -hg->setup[i_use].setup,hg->binning[i_bin].x, hg->binning[i_bin].y);
main.c:		  setups[hg->setup[i_use].setup].initial,hg->binning[i_bin].x, hg->binning[i_bin].y);
main.c:		(hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000,
main.c:		(hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_width : 2000);
main.c:		20/hg->binning[i_bin].x/hg->binning[i_bin].y);
main.c:	    (hg->setup[plan.setup].is == IS_NO) ? hg->setup[plan.setup].slit_length : 30000,
main.c:	    (hg->setup[plan.setup].is == IS_NO) ? hg->setup[plan.setup].slit_width : 2000);
main.c:	  20/hg->binning[hg->setup[plan.setup].binning].x/hg->binning[hg->setup[plan.setup].binning].y);
main.c:  if(hg->setup[plan.setup].setup<0){ // NonStd
main.c:    i_set=-hg->setup[plan.setup].setup-1;
main.c:	    hg->binning[hg->setup[plan.setup].binning].x,
main.c:	    hg->binning[hg->setup[plan.setup].binning].y);
main.c:    i_set=hg->setup[plan.setup].setup;
main.c:	    hg->binning[hg->setup[plan.setup].binning].x,
main.c:	    hg->binning[hg->setup[plan.setup].binning].y);
main.c:  if(hg->obj[plan.obj_i].note)   fprintf(fp, "# %s\n", hg->obj[plan.obj_i].note);
main.c:    tgt=make_tgt(hg->obj[plan.obj_i].name);
main.c:	      hg->sv_region);
main.c:	      hg->sv_region,
main.c:	      hg->sv_calc);
main.c:      fprintf(fp, " Exptime_SV=%d", hg->exptime_sv);
main.c:    switch(hg->setup[plan.setup].imr){
main.c:	fprintf(fp," IMGROT_FLAG=1 SLIT_PA=%.1f", hg->obj[plan.obj_i].pa);
main.c:    if(hg->setup[plan.setup].is!=IS_NO){
main.c:      if(hg->setup[plan.setup].is==IS_020X3){
main.c:		hg->setup[plan.setup].slit_length,
main.c:		hg->setup[plan.setup].slit_width);
main.c:      if(hg->sv_area==SV_FULL){
main.c:      if(hg->setup[plan.setup].is!=IS_NO){
main.c:	if(hg->setup[plan.setup].is==IS_020X3){
main.c:      tgt=make_tgt(hg->obj[plan.obj_i].name);
main.c:	      plan.exp, hg->sv_integrate, tgt);
main.c:  if(hg->obj[plan.obj_i].note)   fprintf(fp, "# %s\n", hg->obj[plan.obj_i].note);
main.c:  tgt=make_tgt(hg->obj[plan.obj_i].name);
main.c:  if(hg->setup[plan.setup].setup<0){ // NonStd
main.c:    i_set=-hg->setup[plan.setup].setup-1;
main.c:	    hg->binning[hg->setup[plan.setup].binning].x,
main.c:	    hg->binning[hg->setup[plan.setup].binning].y);
main.c:    i_set=hg->setup[plan.setup].setup;
main.c:	    hg->binning[hg->setup[plan.setup].binning].x,
main.c:	    hg->binning[hg->setup[plan.setup].binning].y);
main.c:  switch(hg->setup[plan.setup].imr){
main.c:      fprintf(fp,", imr: link, pa:%.1f}\n", hg->obj[plan.obj_i].pa);
main.c:    if(hg->setup[i_use].use){
main.c:      if(hg->setup[i_use].setup<0){ // NonStd
main.c:	i_set=-hg->setup[i_use].setup-1;
main.c:	if(hg->nonstd[i_set].col==COL_BLUE){
main.c:	    if(hg->nonstd[i_set].cross<=setups[j_set].cross_scan){
main.c:	    if((setups[j_set].cross_scan - hg->nonstd[i_set].cross)
main.c:	       < (hg->nonstd[i_set].cross - setups[j_set-1].cross_scan)){
main.c:	    if(hg->nonstd[i_set].cross<=setups[j_set].cross_scan){
main.c:	    if((setups[j_set].cross_scan - hg->nonstd[i_set].cross)
main.c:	       < (hg->nonstd[i_set].cross - setups[j_set-1].cross_scan)){
main.c:	    i_bin=hg->setup[i_use].binning;
main.c:		    i_set+1,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:	    if(hg->setup[i_use].is==IS_NO){
main.c:		      (hg->setup[i_use].is == IS_NO) ? 200 : 2000,
main.c:		      (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000);
main.c:		    i_set+1,hg->binning[i_bin].x,hg->binning[i_bin].y,setups[nonstd_flat].initial);
main.c:	    if(hg->setup[i_use].is==IS_NO){
main.c:		      (guint)(setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:	    if(hg->setup[i_use].is==IS_NO){
main.c:		      (guint)(setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000);
main.c:	    i_bin=hg->setup[i_use].binning;
main.c:		    i_set+1,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:	    if(hg->setup[i_use].is==IS_NO){
main.c:		      (hg->setup[i_use].is == IS_NO) ? 200 : 2000,
main.c:		      (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000);
main.c:		    i_set+1,hg->binning[i_bin].x,hg->binning[i_bin].y,setups[nonstd_flat].initial);
main.c:	    if(hg->setup[i_use].is==IS_NO){
main.c:		      (guint)(setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    i_set+1,hg->binning[i_bin].x,hg->binning[i_bin].y,setups[nonstd_flat].initial);
main.c:	    if(hg->ocs==OCS_GEN2){
main.c:	      if(hg->setup[i_use].is==IS_NO){
main.c:			(guint)(setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:	      if(hg->setup[i_use].is==IS_NO){
main.c:			(guint)(setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000);
main.c:	      if(hg->setup[i_use].is==IS_NO){
main.c:			(guint)(setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:	i_set=hg->setup[i_use].setup;
main.c:	    i_bin=hg->setup[i_use].binning;
main.c:		    setups[i_set].initial,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:	    if(hg->setup[i_use].is==IS_NO){
main.c:		      (hg->setup[i_use].is == IS_NO) ? 200 : 2000,
main.c:		      (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000);
main.c:		    setups[i_set].initial,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:	    if(hg->setup[i_use].is==IS_NO){
main.c:		      (guint)(setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:	    if(hg->setup[i_use].is==IS_NO){
main.c:		      (guint)(setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000);
main.c:	    i_bin=hg->setup[i_use].binning;
main.c:		    setups[i_set].initial,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:	    if(hg->setup[i_use].is==IS_NO){
main.c:		      (hg->setup[i_use].is == IS_NO) ? 200 : 2000,
main.c:		      (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000);
main.c:		    setups[i_set].initial,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:	    if(hg->setup[i_use].is==IS_NO){
main.c:		      (guint)(setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    setups[i_set].initial,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:	    if(hg->ocs==OCS_GEN2){
main.c:	      if(hg->setup[i_use].is==IS_NO){
main.c:			(guint)(setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:	      if(hg->setup[i_use].is==IS_NO){
main.c:			(guint)(setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		      (hg->setup[i_use].is == IS_NO) ? hg->setup[i_use].slit_length : 30000);
main.c:	      if(hg->setup[i_use].is==IS_NO){
main.c:			(guint)(setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:			(guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:  if(hg->setup[plan.setup].is==IS_NO){
main.c:	      hg->setup[plan.setup].slit_length);
main.c:  if(hg->setup[plan.setup].setup<0){ // NonStd
main.c:    i_set=-hg->setup[plan.setup].setup-1;
main.c:    if(hg->nonstd[i_set].col==COL_BLUE){
main.c:	    if(hg->nonstd[i_set].cross<=setups[j_set].cross_scan){
main.c:	if((setups[j_set].cross_scan - hg->nonstd[i_set].cross)
main.c:	   < (hg->nonstd[i_set].cross - setups[j_set-1].cross_scan)){
main.c:	if(hg->nonstd[i_set].cross<=setups[j_set].cross_scan){
main.c:	if((setups[j_set].cross_scan - hg->nonstd[i_set].cross)
main.c:	   < (hg->nonstd[i_set].cross - setups[j_set-1].cross_scan)){
main.c:	i_bin=hg->setup[plan.setup].binning;
main.c:	//	i_set+1,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:		i_set+1,hg->binning[i_bin].x,hg->binning[i_bin].y,setups[nonstd_flat].initial);
main.c:	if(hg->setup[plan.setup].is==IS_NO){
main.c:		  (guint)(setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (guint)(setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:		  (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:	if(hg->setup[plan.setup].is==IS_NO){
main.c:		  (guint)(setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (hg->setup[plan.setup].is == IS_NO) ? hg->setup[plan.setup].slit_length : 30000);
main.c:	i_bin=hg->setup[plan.setup].binning;
main.c:	//i_set+1,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:		i_set+1,hg->binning[i_bin].x,hg->binning[i_bin].y,setups[nonstd_flat].initial);
main.c:	if(hg->setup[plan.setup].is==IS_NO){
main.c:		  (guint)(setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (guint)(setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:		  (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:		i_set+1,hg->binning[i_bin].x,hg->binning[i_bin].y,setups[nonstd_flat].initial);
main.c:	if(hg->ocs==OCS_GEN2){
main.c:	  if(hg->setup[plan.setup].is==IS_NO){
main.c:		    (guint)(setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (guint)(setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:		    (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:	  if(hg->setup[plan.setup].is==IS_NO){
main.c:		    (guint)(setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (hg->setup[plan.setup].is == IS_NO) ? hg->setup[plan.setup].slit_length : 30000);
main.c:	  if(hg->setup[plan.setup].is==IS_NO){
main.c:		    (guint)(setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (guint)(setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:		    (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (guint)(IS_FLAT_FACTOR*(gdouble)setups[nonstd_flat].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:    i_set=hg->setup[plan.setup].setup;
main.c:	i_bin=hg->setup[plan.setup].binning;
main.c:	//	setups[i_set].initial,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:		setups[i_set].initial,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:	if(hg->setup[plan.setup].is==IS_NO){
main.c:		  (guint)(setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (guint)(setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:		  (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:	if(hg->setup[plan.setup].is==IS_NO){
main.c:		  (guint)(setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (hg->setup[plan.setup].is == IS_NO) ? hg->setup[plan.setup].slit_length : 30000);
main.c:	i_bin=hg->setup[plan.setup].binning;
main.c:	//	setups[i_set].initial,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:		setups[i_set].initial,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:	if(hg->setup[plan.setup].is==IS_NO){
main.c:		  (guint)(setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (guint)(setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:		  (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		  (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f1_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:		setups[i_set].initial,hg->binning[i_bin].x,hg->binning[i_bin].y);
main.c:	if(hg->ocs==OCS_GEN2){
main.c:	  if(hg->setup[plan.setup].is==IS_NO){
main.c:		    (guint)(setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (guint)(setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:		    (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:	  if(hg->setup[plan.setup].is==IS_NO){
main.c:		    (guint)(setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (hg->setup[plan.setup].is == IS_NO) ? hg->setup[plan.setup].slit_length : 30000);
main.c:	  if(hg->setup[plan.setup].is==IS_NO){
main.c:		    (guint)(setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (guint)(setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:		    (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y));
main.c:		    (guint)(IS_FLAT_FACTOR*(gdouble)setups[i_set].f2_exp/hg->binning[i_bin].x/hg->binning[i_bin].y),
main.c:  if(hg->setup[plan.setup].setup<0){ // NonStd
main.c:    i_set=-hg->setup[plan.setup].setup-1;
main.c:	    hg->binning[hg->setup[plan.setup].binning].x,
main.c:	    hg->binning[hg->setup[plan.setup].binning].y);
main.c:    i_set=hg->setup[plan.setup].setup;
main.c:	    hg->binning[hg->setup[plan.setup].binning].x,
main.c:	    hg->binning[hg->setup[plan.setup].binning].y);
main.c:  hg->filename_read=NULL;
main.c:	  hg->filename_read=g_strconcat(cwdname,"/",argv[i_opt],NULL);
main.c:	  hg->filename_read=g_strdup(argv[i_opt]);
main.c:	hg->filehead=make_head(hg->filename_read);
main.c:	  hg->filename_hoe=g_strconcat(cwdname,"/",argv[i_opt],NULL);
main.c:	  hg->filename_hoe=g_strdup(argv[i_opt]);
main.c:	hg->filehead=make_head(hg->filename_hoe);
main.c:  filename = g_strdup(hg->filename_hoe);
main.c:  if(hg->filename_write) xmms_cfg_write_string(cfgfile, "General", "OPE", hg->filename_write);
main.c:  if(hg->filename_read)  xmms_cfg_write_string(cfgfile, "General", "List",hg->filename_read);
main.c:  xmms_cfg_write_boolean(cfgfile, "General", "PSFlag",hg->flag_bunnei);
main.c:  xmms_cfg_write_boolean(cfgfile, "General", "SecZFlag",hg->flag_secz);
main.c:  xmms_cfg_write_double(cfgfile, "General", "SecZFactor",hg->secz_factor);
main.c:  xmms_cfg_write_int(cfgfile, "Header", "FromYear",hg->fr_year);
main.c:  xmms_cfg_write_int(cfgfile, "Header", "FromMonth",hg->fr_month);
main.c:  xmms_cfg_write_int(cfgfile, "Header", "FromDay",hg->fr_day);
main.c:  xmms_cfg_write_int(cfgfile, "Header", "Nights",hg->nights);
main.c:  xmms_cfg_write_string(cfgfile, "Header", "ID",hg->prop_id);
main.c:  if(hg->prop_pass)
main.c:    xmms_cfg_write_string(cfgfile, "Header", "Pass",hg->prop_pass);
main.c:  if(hg->observer)
main.c:    xmms_cfg_write_string(cfgfile, "Header", "Observer",hg->observer);
main.c:  xmms_cfg_write_int(cfgfile, "Header", "TZ",hg->timezone);
main.c:  xmms_cfg_write_string(cfgfile, "Header", "WWWCom",hg->www_com);
main.c:  xmms_cfg_write_int(cfgfile, "Header", "OCS",hg->ocs);
main.c:  xmms_cfg_write_int(cfgfile, "DefPara", "Guide",hg->def_guide);
main.c:  xmms_cfg_write_double2(cfgfile, "DefPara", "PA",hg->def_pa, "%+6.2f");
main.c:  xmms_cfg_write_int(cfgfile, "DefPara", "ExpTime",(gint)hg->def_exp);
main.c:  xmms_cfg_write_int(cfgfile, "ADC", "Wave1",(gint)hg->wave1);
main.c:  xmms_cfg_write_int(cfgfile, "ADC", "Wave0",(gint)hg->wave0);
main.c:  xmms_cfg_write_int(cfgfile, "ADC", "Pres",(gint)hg->pres);
main.c:  xmms_cfg_write_int(cfgfile, "ADC", "Temp",(gint)hg->temp);
main.c:  xmms_cfg_write_int(cfgfile, "AG", "ExptimeFactor",(gint)hg->exptime_factor);
main.c:  xmms_cfg_write_int(cfgfile, "AG", "Brightness",(gint)hg->brightness);
main.c:  xmms_cfg_write_int(cfgfile, "SV", "Area",(gint)hg->sv_area);
main.c:  xmms_cfg_write_int(cfgfile, "SV", "Integrate",(gint)hg->sv_integrate);
main.c:  xmms_cfg_write_int(cfgfile, "SV", "Acq",(gint)hg->sv_acq);
main.c:  xmms_cfg_write_int(cfgfile, "SV", "Region",(gint)hg->sv_region);
main.c:  xmms_cfg_write_int(cfgfile, "SV", "Calc",(gint)hg->sv_calc);
main.c:  xmms_cfg_write_int(cfgfile, "SV", "Exptime",(gint)hg->exptime_sv);
main.c:  xmms_cfg_write_double2(cfgfile, "SV", "SlitX",hg->sv_slitx, "%5.1f");
main.c:  xmms_cfg_write_double2(cfgfile, "SV", "SlitY",hg->sv_slity, "%5.1f");
main.c:  xmms_cfg_write_double2(cfgfile, "SV", "ISX",hg->sv_isx, "%5.1f");
main.c:  xmms_cfg_write_double2(cfgfile, "SV", "ISY",hg->sv_isy, "%5.1f");
main.c:  xmms_cfg_write_double2(cfgfile, "SV", "IS3X",hg->sv_is3x, "%5.1f");
main.c:  xmms_cfg_write_double2(cfgfile, "SV", "IS3Y",hg->sv_is3y, "%5.1f");
main.c:  xmms_cfg_write_int(cfgfile, "CameraZ", "Blue",(gint)hg->camz_b);
main.c:  xmms_cfg_write_int(cfgfile, "CameraZ", "Red",(gint)hg->camz_r);
main.c:  xmms_cfg_write_int(cfgfile, "Cross", "dCross",(gint)hg->d_cross);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Color",(gint)hg->nonstd[i_nonstd].col);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Cross",(gint)hg->nonstd[i_nonstd].cross);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Echelle",hg->nonstd[i_nonstd].echelle);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "CamRot",hg->nonstd[i_nonstd].camr);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Setup",hg->setup[i_set].setup);
main.c:    xmms_cfg_write_boolean(cfgfile, tmp, "Use",hg->setup[i_set].use);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Binning",(gint)hg->setup[i_set].binning);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "SlitWidth",(gint)hg->setup[i_set].slit_width);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "SlitLength",(gint)hg->setup[i_set].slit_length);
main.c:    xmms_cfg_write_string(cfgfile, tmp, "Filter1",hg->setup[i_set].fil1);
main.c:    xmms_cfg_write_string(cfgfile, tmp, "Filter2",hg->setup[i_set].fil2);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "ImR",hg->setup[i_set].imr);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "IS",hg->setup[i_set].is);
main.c:    xmms_cfg_write_boolean(cfgfile, tmp, "I2",hg->setup[i_set].i2);
main.c:  for(i_list=0;i_list<hg->i_max;i_list++){
main.c:    xmms_cfg_write_string(cfgfile, tmp, "Name",hg->obj[i_list].name); 
main.c:    xmms_cfg_write_int(cfgfile, tmp, "ExpTime",hg->obj[i_list].exp);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Repeat",hg->obj[i_list].repeat);
main.c:    xmms_cfg_write_double2(cfgfile, tmp, "RA",hg->obj[i_list].ra,"%9.2f");
main.c:    xmms_cfg_write_double2(cfgfile, tmp, "Dec",hg->obj[i_list].dec,"%+10.2f");
main.c:    xmms_cfg_write_double2(cfgfile, tmp, "Epoch",hg->obj[i_list].equinox,"%7.2f");
main.c:    if(hg->flag_bunnei){
main.c:      xmms_cfg_write_double2(cfgfile, tmp, "Mag",hg->obj[i_list].mag,"%4.1f");
main.c:    xmms_cfg_write_double2(cfgfile, tmp, "PA",hg->obj[i_list].pa,"%+7.2f");
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Guide",hg->obj[i_list].guide);
main.c:    if(hg->obj[i_list].note) xmms_cfg_write_string(cfgfile, tmp, "Note",hg->obj[i_list].note);
main.c:      xmms_cfg_write_boolean(cfgfile, tmp, f_tmp,hg->obj[i_list].setup[i_set]);
main.c:  for(i_list=hg->i_max;i_list<MAX_OBJECT;i_list++){
main.c:    if(hg->line[i_line].name){
main.c:      xmms_cfg_write_string(cfgfile, tmp, "Name",hg->line[i_line].name);
main.c:      xmms_cfg_write_double2(cfgfile, tmp, "Wave",hg->line[i_line].wave,"%8.2f");
main.c:  xmms_cfg_write_int(cfgfile, "Plan", "Start", hg->plan_start);
main.c:  xmms_cfg_write_int(cfgfile, "Plan", "StartHour", hg->plan_start_hour);
main.c:  xmms_cfg_write_int(cfgfile, "Plan", "StartMin", hg->plan_start_min);
main.c:  for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Type",hg->plan[i_plan].type);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Setup",hg->plan[i_plan].setup);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Repeat",hg->plan[i_plan].repeat);
main.c:    xmms_cfg_write_boolean(cfgfile, tmp, "Slit_or", hg->plan[i_plan].slit_or);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Slit_Width",hg->plan[i_plan].slit_width);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Slit_Length",hg->plan[i_plan].slit_length);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "ObjI",hg->plan[i_plan].obj_i);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Exp",hg->plan[i_plan].exp);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Omode",hg->plan[i_plan].omode);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Guide",hg->plan[i_plan].guide);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "FocusMode",hg->plan[i_plan].focus_mode);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Cmode",hg->plan[i_plan].cmode);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "I2_pos", hg->plan[i_plan].i2_pos);
main.c:    xmms_cfg_write_double2(cfgfile, tmp, "SetAz", hg->plan[i_plan].setaz,"%6.2f");
main.c:    xmms_cfg_write_double2(cfgfile, tmp, "SetEl", hg->plan[i_plan].setel,"%6.2f");
main.c:    xmms_cfg_write_boolean(cfgfile, tmp, "Daytime", hg->plan[i_plan].daytime);
main.c:    if(hg->plan[i_plan].comment)
main.c:      xmms_cfg_write_string(cfgfile, tmp, "Comment",hg->plan[i_plan].comment);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Comtype",hg->plan[i_plan].comtype); 
main.c:    xmms_cfg_write_int(cfgfile, tmp, "Time",hg->plan[i_plan].time); 
main.c:    xmms_cfg_write_boolean(cfgfile, tmp, "PA_or", hg->plan[i_plan].pa_or);
main.c:    xmms_cfg_write_double2(cfgfile, tmp, "PA", hg->plan[i_plan].pa,"%6.2f");
main.c:    xmms_cfg_write_boolean(cfgfile, tmp, "SV_or", hg->plan[i_plan].sv_or);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "SV_exp", hg->plan[i_plan].sv_exp);
main.c:    xmms_cfg_write_int(cfgfile, tmp, "SV_fil", hg->plan[i_plan].sv_fil);
main.c:    xmms_cfg_write_boolean(cfgfile, tmp, "BackUp", hg->plan[i_plan].backup);
main.c:  for(i_plan=hg->i_plan_max;i_plan<MAX_PLAN;i_plan++){
main.c:  cfgfile = xmms_cfg_open_file(hg->filename_hoe);
main.c:    if(xmms_cfg_read_string(cfgfile, "General", "OPE",  &c_buf)) hg->filename_write=c_buf;
main.c:    if(xmms_cfg_read_string(cfgfile, "General", "List", &c_buf)) hg->filename_read =c_buf;
main.c:    if(xmms_cfg_read_boolean(cfgfile, "General", "PSFlag", &b_buf)) hg->flag_bunnei =b_buf;
main.c:    else hg->flag_bunnei = FALSE;
main.c:    if(xmms_cfg_read_boolean(cfgfile, "General", "SecZFlag", &b_buf)) hg->flag_secz =b_buf;
main.c:    else hg->flag_secz = FALSE;
main.c:    if(xmms_cfg_read_double(cfgfile, "General", "SecZFactor", &f_buf)) hg->secz_factor =f_buf;
main.c:    if(xmms_cfg_read_int   (cfgfile, "Header", "FromYear", &i_buf)) hg->fr_year =i_buf;
main.c:    if(xmms_cfg_read_int   (cfgfile, "Header", "FromMonth",&i_buf)) hg->fr_month=i_buf;
main.c:    if(xmms_cfg_read_int   (cfgfile, "Header", "FromDay",  &i_buf)) hg->fr_day  =i_buf;
main.c:    if(xmms_cfg_read_int   (cfgfile, "Header", "Nights",   &i_buf)) hg->nights =i_buf;
main.c:      hg->nights=1;
main.c:    if(xmms_cfg_read_string(cfgfile, "Header", "ID",       &c_buf)) hg->prop_id =c_buf;
main.c:    if(xmms_cfg_read_string(cfgfile, "Header", "Pass",       &c_buf)) hg->prop_pass =c_buf;
main.c:    if(xmms_cfg_read_string(cfgfile, "Header", "Observer",       &c_buf)) hg->observer =c_buf;
main.c:    if(xmms_cfg_read_int   (cfgfile, "Header", "TZ",       &i_buf)) hg->timezone=i_buf;
main.c:    if(xmms_cfg_read_string(cfgfile, "Header", "WWWCom",       &c_buf)) hg->www_com =c_buf;
main.c:    if(xmms_cfg_read_int   (cfgfile, "Header", "OCS",       &i_buf)) hg->ocs=i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "DefPara", "Guide",  &i_buf)) hg->def_guide=i_buf;
main.c:    if(xmms_cfg_read_double(cfgfile, "DefPara", "PA",     &f_buf)) hg->def_pa   =f_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "DefPara", "ExpTime",&i_buf)) hg->def_exp  =i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "ADC", "Wave1",  &i_buf)) hg->wave1=i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "ADC", "Wave0",  &i_buf)) hg->wave0=i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "ADC", "Pres",   &i_buf)) hg->pres =i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "ADC", "Temp",   &i_buf)) hg->temp =i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "AG", "ExptimeFactor",  &i_buf)) hg->exptime_factor=i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "AG", "Brightness",     &i_buf)) hg->brightness    =i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "SV", "Area",       &i_buf)) hg->sv_area     =i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "SV", "Integrate",  &i_buf)) hg->sv_integrate=i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "SV", "Acq",  &i_buf)) hg->sv_acq=i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "SV", "Region",     &i_buf)) hg->sv_region   =i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "SV", "Calc",       &i_buf)) hg->sv_calc     =i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "SV", "Exptime",    &i_buf)) hg->exptime_sv  =i_buf;
main.c:    if(xmms_cfg_read_double(cfgfile, "SV", "SlitX",      &f_buf)) hg->sv_slitx    =f_buf;
main.c:    if(xmms_cfg_read_double(cfgfile, "SV", "SlitY",      &f_buf)) hg->sv_slity    =f_buf;
main.c:    if(xmms_cfg_read_double(cfgfile, "SV", "ISX",      &f_buf)) hg->sv_isx    =f_buf;
main.c:    if(xmms_cfg_read_double(cfgfile, "SV", "ISY",      &f_buf)) hg->sv_isy    =f_buf;
main.c:    if(xmms_cfg_read_double(cfgfile, "SV", "IS3X",      &f_buf)) hg->sv_is3x    =f_buf;
main.c:    if(xmms_cfg_read_double(cfgfile, "SV", "IS3Y",      &f_buf)) hg->sv_is3y    =f_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "CameraZ", "Blue",   &i_buf)) hg->camz_b=i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "CameraZ", "Red",    &i_buf)) hg->camz_r=i_buf;
main.c:    if(xmms_cfg_read_int  (cfgfile, "Cross", "dCross",    &i_buf)) hg->d_cross=i_buf;
main.c:      if(xmms_cfg_read_int  (cfgfile, tmp, "Color",   &i_buf)) hg->nonstd[i_nonstd].col    =i_buf;
main.c:      if(xmms_cfg_read_int  (cfgfile, tmp, "Cross",   &i_buf)) hg->nonstd[i_nonstd].cross  =i_buf;
main.c:      if(xmms_cfg_read_int  (cfgfile, tmp, "Echelle", &i_buf)) hg->nonstd[i_nonstd].echelle=i_buf;
main.c:      if(xmms_cfg_read_int  (cfgfile, tmp, "CamRot",  &i_buf)) hg->nonstd[i_nonstd].camr   =i_buf;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Setup",     &i_buf)) hg->setup[i_set].setup      =i_buf;
main.c:      if(xmms_cfg_read_boolean(cfgfile, tmp, "Use",       &b_buf)) hg->setup[i_set].use        =b_buf;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Binning",   &i_buf)) hg->setup[i_set].binning    =i_buf;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "SlitWidth" ,&i_buf)) hg->setup[i_set].slit_width =i_buf;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "SlitLength",&i_buf)) hg->setup[i_set].slit_length=i_buf;
main.c:      if(xmms_cfg_read_string (cfgfile, tmp, "Filter1",   &c_buf)) hg->setup[i_set].fil1       =c_buf;
main.c:      if(xmms_cfg_read_string (cfgfile, tmp, "Filter2",   &c_buf)) hg->setup[i_set].fil2       =c_buf;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "ImR",       &i_buf)) hg->setup[i_set].imr        =i_buf;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "IS",       &i_buf)) hg->setup[i_set].is        =i_buf;
main.c:      if(xmms_cfg_read_boolean(cfgfile, tmp, "I2",       &b_buf)) hg->setup[i_set].i2        =b_buf;
main.c:      if(xmms_cfg_read_string (cfgfile, tmp, "Name",   &c_buf)) hg->obj[i_list].name  =c_buf;
main.c:	hg->i_max=i_list;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "ExpTime",&i_buf)) hg->obj[i_list].exp   =i_buf;
main.c:	hg->obj[i_list].exp=DEF_EXP;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Repeat",&i_buf))  hg->obj[i_list].repeat=i_buf;
main.c:	hg->obj[i_list].repeat=1;
main.c:      if(xmms_cfg_read_double  (cfgfile, tmp, "RA",     &f_buf)) hg->obj[i_list].ra    =f_buf;
main.c:	hg->i_max=i_list;
main.c:      if(xmms_cfg_read_double  (cfgfile, tmp, "Dec",    &f_buf)) hg->obj[i_list].dec   =f_buf;
main.c:	hg->i_max=i_list;
main.c:      if(xmms_cfg_read_double  (cfgfile, tmp, "Epoch",  &f_buf)) hg->obj[i_list].equinox =f_buf;
main.c:	hg->i_max=i_list;
main.c:      if(hg->flag_bunnei){
main.c:	if(xmms_cfg_read_double  (cfgfile, tmp, "Mag",  &f_buf)) hg->obj[i_list].mag =f_buf;
main.c:	  hg->i_max=i_list;
main.c:      if(xmms_cfg_read_double  (cfgfile, tmp, "PA",     &f_buf)) hg->obj[i_list].pa    =f_buf;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Guide",  &i_buf)) hg->obj[i_list].guide =i_buf;
main.c:      if(xmms_cfg_read_string (cfgfile, tmp, "Note",   &c_buf)) hg->obj[i_list].note  =c_buf;
main.c:	if(xmms_cfg_read_boolean(cfgfile, tmp, f_tmp,  &b_buf)) hg->obj[i_list].setup[i_set]=b_buf;
main.c:      if(xmms_cfg_read_string (cfgfile, tmp, "Name",   &c_buf)) hg->line[i_line].name=c_buf;
main.c:      if(xmms_cfg_read_double    (cfgfile, tmp, "Wave",   &f_buf)) hg->line[i_line].wave=f_buf;
main.c:    if(xmms_cfg_read_int(cfgfile, "Plan","Start",&i_buf)) hg->plan_start =i_buf;
main.c:    if(xmms_cfg_read_int(cfgfile, "Plan","StartHour",&i_buf)) hg->plan_start_hour =i_buf;
main.c:    if(xmms_cfg_read_int(cfgfile, "Plan","StartMin",&i_buf)) hg->plan_start_min =i_buf;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Type",  &i_buf)) hg->plan[i_plan].type =i_buf;
main.c:	hg->i_plan_max=i_plan;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Setup", &i_buf)) hg->plan[i_plan].setup  =i_buf;
main.c:      else hg->plan[i_plan].setup=0;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Repeat",&i_buf)) hg->plan[i_plan].repeat =i_buf;
main.c:      else hg->plan[i_plan].repeat=1;
main.c:      if(xmms_cfg_read_boolean(cfgfile, tmp, "Slit_or",&b_buf))hg->plan[i_plan].slit_or=b_buf;
main.c:      else hg->plan[i_plan].slit_or=FALSE;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Slit_Width",&i_buf)) hg->plan[i_plan].slit_width =i_buf;
main.c:      else hg->plan[i_plan].slit_width=200;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Slit_Length",&i_buf)) hg->plan[i_plan].slit_length =i_buf;
main.c:      else hg->plan[i_plan].slit_length=2000;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "ObjI",     &i_buf)) hg->plan[i_plan].obj_i     =i_buf;
main.c:      else hg->plan[i_plan].exp=DEF_EXP;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Exp",     &i_buf)) hg->plan[i_plan].exp     =i_buf;
main.c:      else hg->plan[i_plan].exp=DEF_EXP;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Omode",   &i_buf)) hg->plan[i_plan].omode   =i_buf;
main.c:      else hg->plan[i_plan].omode=0;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Guide",   &i_buf)) hg->plan[i_plan].guide   =i_buf;
main.c:      else hg->plan[i_plan].guide=SV_GUIDE;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "FocusMode",   &i_buf)) hg->plan[i_plan].focus_mode   =i_buf;
main.c:      else hg->plan[i_plan].focus_mode=0;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Cmode",   &i_buf)) hg->plan[i_plan].cmode   =i_buf;
main.c:      else hg->plan[i_plan].cmode=0;
main.c:      if(xmms_cfg_read_int(cfgfile, tmp, "I2_pos",  &i_buf)) hg->plan[i_plan].i2_pos  =i_buf;
main.c:      else hg->plan[i_plan].i2_pos=PLAN_I2_IN;
main.c:      if(xmms_cfg_read_double    (cfgfile, tmp, "SetAz",   &f_buf)) hg->plan[i_plan].setaz=f_buf;
main.c:      else hg->plan[i_plan].setaz=-90.;
main.c:      if(xmms_cfg_read_double    (cfgfile, tmp, "SetEl",   &f_buf)) hg->plan[i_plan].setel=f_buf;
main.c:      else hg->plan[i_plan].setel=90.;
main.c:      if(xmms_cfg_read_boolean(cfgfile, tmp, "Daytime", &b_buf)) hg->plan[i_plan].daytime =b_buf;
main.c:      else hg->plan[i_plan].daytime=FALSE;
main.c:      if(xmms_cfg_read_string (cfgfile, tmp, "Comment", &c_buf)) hg->plan[i_plan].comment =c_buf;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Comtype", &i_buf)) hg->plan[i_plan].comtype   =i_buf;
main.c:      else hg->plan[i_plan].comtype=PLAN_COMMENT_TEXT;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "Time",    &i_buf)) hg->plan[i_plan].time    =i_buf;
main.c:      else hg->plan[i_plan].time=0;
main.c:      if(xmms_cfg_read_boolean(cfgfile, tmp, "PA_or", &b_buf)) hg->plan[i_plan].pa_or =b_buf;
main.c:      else hg->plan[i_plan].pa_or=FALSE;
main.c:      if(xmms_cfg_read_double    (cfgfile, tmp, "PA",   &f_buf)) hg->plan[i_plan].pa=f_buf;
main.c:      else hg->plan[i_plan].pa=0;
main.c:      if(xmms_cfg_read_boolean(cfgfile, tmp, "SV_or", &b_buf)) hg->plan[i_plan].sv_or =b_buf;
main.c:      else hg->plan[i_plan].sv_or=FALSE;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "SV_exp", &i_buf)) hg->plan[i_plan].sv_exp   =i_buf;
main.c:      else hg->plan[i_plan].sv_exp=hg->exptime_sv;
main.c:      if(xmms_cfg_read_int    (cfgfile, tmp, "SV_fil", &i_buf)) hg->plan[i_plan].sv_fil   =i_buf;
main.c:      else hg->plan[i_plan].sv_fil=SV_FILTER_NONE;
main.c:      if(xmms_cfg_read_boolean(cfgfile, tmp, "BackUp", &b_buf)) hg->plan[i_plan].backup =b_buf;
main.c:      else hg->plan[i_plan].backup=FALSE;
main.c:      if(hg->plan[i_plan].txt) g_free(hg->plan[i_plan].txt);
main.c:      hg->plan[i_plan].txt = make_plan_txt(hg,hg->plan[i_plan]);
main.c:    gtk_widget_destroy(hg->all_note);
main.c:  if(hg->filename_hoe){
main.c:  if((hg->filename_read)&&(!hg->filename_hoe)){
main.c:  zonedate.years=hg->fr_year;
main.c:  zonedate.months=hg->fr_month;
main.c:  zonedate.days=hg->fr_day+1;
main.c:  for (i_list=0; i_list<hg->i_max; i_list++){
main.c:    a0s=hg->obj[i_list].ra;
main.c:    d0s=hg->obj[i_list].dec;
main.c:    hg->obj[i_list].horizon
main.c:    hg->obj[i_list].rise=rst.rise;
main.c:    hg->obj[i_list].transit=rst.transit;
main.c:    hg->obj[i_list].set=rst.set;
main.c:  model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
main.c:  for(i_list=0;i_list<hg->i_max;i_list++){
objtree.c:  if(flag_make_obj_tree)  gtk_widget_destroy(hg->objtree);
objtree.c:  hg->objtree = gtk_tree_view_new_with_model (items_model);
objtree.c:  gtk_tree_view_set_rules_hint (GTK_TREE_VIEW (hg->objtree), TRUE);
objtree.c:  gtk_tree_selection_set_mode (gtk_tree_view_get_selection (GTK_TREE_VIEW (hg->objtree)),
objtree.c:  objtree_add_columns (hg, GTK_TREE_VIEW (hg->objtree), 
objtree.c:  gtk_container_add (GTK_CONTAINER (hg->sw_objtree), hg->objtree);
objtree.c:  g_signal_connect (hg->objtree, "cursor-changed",
objtree.c:  gtk_widget_show_all(hg->objtree);
objtree.c:  for (i = 0; i < hg->i_max; i++){
objtree.c:  mod_set=hg->sun.s_set.hours*60+hg->sun.s_set.minutes;
objtree.c:  mod_rise=hg->sun.s_rise.hours*60+hg->sun.s_rise.minutes;
objtree.c:		     hg->obj[i_list].check_sm, 
objtree.c:		      hg->obj[i_list].name,
objtree.c:		     hg->obj[i_list].exp, 
objtree.c:		     hg->obj[i_list].repeat, 
objtree.c:  if(hg->flag_bunnei){
objtree.c:		       hg->obj[i_list].mag, 
objtree.c:		     hg->obj[i_list].ra, 
objtree.c:		     hg->obj[i_list].dec, 
objtree.c:		     hg->obj[i_list].equinox,
objtree.c:		     hg->obj[i_list].horizon, 
objtree.c:		     hg->obj[i_list].rise, 
objtree.c:  ln_get_local_date(hg->obj[i_list].rise,&zonedate);
objtree.c:		      hg->obj[i_list].transit,
objtree.c:  ln_get_local_date(hg->obj[i_list].transit,&zonedate);
objtree.c:		      hg->obj[i_list].set,
objtree.c:  ln_get_local_date(hg->obj[i_list].set,&zonedate);
objtree.c:		     hg->obj[i_list].pa, 
objtree.c:		     hg->obj[i_list].guide, 
objtree.c:			 hg->obj[i_list].setup[i_use], 
objtree.c:		     hg->obj[i_list].note, 
objtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
objtree.c:	g_free(hg->obj[i].name);
objtree.c:	hg->obj[i].name=g_strdup(new_text);
objtree.c:                            hg->obj[i].name, -1);
objtree.c:        hg->obj[i].exp = atoi (new_text);
objtree.c:                            hg->obj[i].exp, -1);
objtree.c:        hg->obj[i].repeat = atoi (new_text+1);
objtree.c:	                   hg->obj[i].repeat, -1);
objtree.c:	hg->obj[i].mag=(gdouble)g_strtod(new_text,NULL);	
objtree.c:                            hg->obj[i].mag, -1);
objtree.c:	hg->obj[i].ra=(gdouble)g_strtod(new_text,NULL);	
objtree.c:                            hg->obj[i].ra, -1);
objtree.c:	hg->obj[i].dec=(gdouble)g_strtod(new_text,NULL);	
objtree.c:                            hg->obj[i].dec, -1);
objtree.c:	hg->obj[i].equinox=(gdouble)g_strtod(new_text,NULL);	
objtree.c:                            hg->obj[i].equinox, -1);
objtree.c:	hg->obj[i].pa=(gdouble)g_strtod(new_text,NULL);	
objtree.c:                            hg->obj[i].pa, -1);
objtree.c:	  hg->obj[i].guide=NO_GUIDE;
objtree.c:	  hg->obj[i].guide=AG_GUIDE;
objtree.c:	  hg->obj[i].guide=SV_GUIDE;
objtree.c:	  hg->obj[i].guide=SVSAFE_GUIDE;
objtree.c:			    hg->obj[i].guide, -1);
objtree.c:	g_free(hg->obj[i].note);
objtree.c:	hg->obj[i].note=g_strdup(new_text);
objtree.c:                            hg->obj[i].note, -1);
objtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
objtree.c:  hg->obj[i].check_sm ^= 1;
objtree.c:  gtk_list_store_set (GTK_LIST_STORE (model), &iter, COLUMN_OBJTREE_CHECK, hg->obj[i].check_sm, -1);
objtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
objtree.c:  hg->obj[i].setup[i_use] ^= 1;
objtree.c:  gtk_list_store_set (GTK_LIST_STORE (model), &iter, COLUMN_OBJTREE_SETUP1+i_use, hg->obj[i].setup[i_use], -1);
objtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
objtree.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->objtree));
objtree.c:  if(hg->i_max>=MAX_OBJECT) return;
objtree.c:  if(hg->i_max==0){
objtree.c:    i=hg->i_max;
objtree.c:    i=hg->i_max;
objtree.c:  tmp_obj.name=g_strdup(hg->addobj_name);
objtree.c:  tmp_obj.ra=hg->addobj_ra;
objtree.c:  tmp_obj.dec=hg->addobj_dec;
objtree.c:  if(hg->addobj_votype){
objtree.c:    if(hg->addobj_magsp)
objtree.c:      tmp_obj.note=g_strdup_printf("%s, %s",hg->addobj_votype,hg->addobj_magsp);
objtree.c:      tmp_obj.note=g_strdup_printf("%s, mag=unknown",hg->addobj_votype);
objtree.c:  for(i_list=hg->i_max;i_list>i;i_list--){
objtree.c:    hg->obj[i_list]=hg->obj[i_list-1];
objtree.c:  hg->i_max++;
objtree.c:  hg->obj[i]=tmp_obj;
objtree.c:  for(i_list=0;i_list<hg->i_max;i_list++){
objtree.c:  for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
objtree.c:    if(hg->plan[i_plan].type==PLAN_TYPE_OBJ){
objtree.c:      if(hg->plan[i_plan].obj_i>=i){
objtree.c:	hg->plan[i_plan].obj_i++;
objtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
objtree.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->objtree));
objtree.c:    for(i_list=i;i_list<hg->i_max;i_list++){
objtree.c:      hg->obj[i_list]=hg->obj[i_list+1];
objtree.c:    hg->i_max--;
objtree.c:    for(i_list=0;i_list<hg->i_max;i_list++){
objtree.c:    for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
objtree.c:      if(hg->plan[i_plan].type==PLAN_TYPE_OBJ){
objtree.c:	if(hg->plan[i_plan].obj_i==i){
objtree.c:	  hg->plan[i_plan].type=PLAN_TYPE_COMMENT;
objtree.c:	  hg->plan[i_plan].comtype=PLAN_COMMENT_TEXT;
objtree.c:	  hg->plan[i_plan].txt=g_strdup("### (The object was removed from the list.) ###");
objtree.c:	  hg->plan[i_plan].comment=g_strdup(" (The object was removed from the list.) ");
objtree.c:	  hg->plan[i_plan].time=0;
objtree.c:	  hg->plan[i_plan].setup=0;
objtree.c:	  hg->plan[i_plan].repeat=1;
objtree.c:	  hg->plan[i_plan].slit_or=FALSE;
objtree.c:	  hg->plan[i_plan].slit_width=0;
objtree.c:	  hg->plan[i_plan].slit_length=0;
objtree.c:	  hg->plan[i_plan].obj_i=0;
objtree.c:	  hg->plan[i_plan].exp=0;
objtree.c:	  hg->plan[i_plan].omode=PLAN_OMODE_FULL;
objtree.c:	  hg->plan[i_plan].guide=SV_GUIDE;
objtree.c:	  hg->plan[i_plan].cmode=PLAN_CMODE_FULL;
objtree.c:	  hg->plan[i_plan].i2_pos=PLAN_I2_IN;
objtree.c:	  hg->plan[i_plan].daytime=FALSE;
objtree.c:	else if (hg->plan[i_plan].obj_i>i){
objtree.c:	  hg->plan[i_plan].obj_i--;
objtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
objtree.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->objtree));
objtree.c:    if((int)hg->obj[i].equinox!=2000){
objtree.c:    ra_0=hg->obj[i].ra;
objtree.c:    if(hg->obj[i].dec<0){
objtree.c:      dec_0=-hg->obj[i].dec;
objtree.c:      dec_0=hg->obj[i].dec;
objtree.c:    cmdline=g_strconcat(hg->www_com," ",tmp,NULL);
objtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
objtree.c:  if(!hg->flag_bunnei)  return;
objtree.c:  for(i_list=0;i_list<hg->i_max;i_list++){
objtree.c:    hg->obj[i_list].exp=(gint)(pow(2.5,(hg->obj[i_list].mag - 8.0)) 
objtree.c:      * hg->exp8mag);
objtree.c:    if(hg->flag_secz){
objtree.c:      hg->obj[i_list].exp=hg->obj[i_list].exp+
objtree.c:	hg->obj[i_list].exp*(1/sin(hg->obj[i_list].c_el/180*3.141592) -1)
objtree.c:	*hg->secz_factor;
objtree.c:    if(hg->obj[i_list].exp<1) hg->obj[i_list].exp=1;
objtree.c:    //sprintf(tmp,"%d",hg->obj[i_list].exp);
objtree.c:    //gtk_entry_set_text(GTK_ENTRY(hg->obj[i_list].exp_entry),tmp);
objtree.c:  for(i_list=0;i_list<hg->i_max;i_list++){
objtree.c:		       COLUMN_OBJTREE_EXP, hg->obj[i_list].exp, -1);
objtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
objtree.c:  for(i_list=0;i_list<hg->i_max;i_list++){
objtree.c:    switch(hg->def_guide){
objtree.c:      hg->obj[i_list].guide=NO_GUIDE;
objtree.c:      hg->obj[i_list].guide=AG_GUIDE;
objtree.c:      hg->obj[i_list].guide=SV_GUIDE;
objtree.c:      hg->obj[i_list].guide=SVSAFE_GUIDE;
objtree.c:    hg->obj[i_list].pa=hg->def_pa;
objtree.c:    hg->obj[i_list].exp=hg->def_exp;
objtree.c:  for(i_list=0;i_list<hg->i_max;i_list++){
objtree.c:		       COLUMN_OBJTREE_GUIDE, hg->obj[i_list].guide, 
objtree.c:		       COLUMN_OBJTREE_PA, hg->obj[i_list].pa, 
objtree.c:		       COLUMN_OBJTREE_EXP, hg->obj[i_list].exp, 
objtree.c:    gdk_window_raise(hg->plot_main->window);
objtree.c:    hg->plot_output=PLOT_OUTPUT_WINDOW;
objtree.c:    draw_plot_cairo(hg->plot_dw,NULL,
objtree.c:  GtkTreeModel *model = gtk_tree_view_get_model (GTK_TREE_VIEW(hg->objtree));
objtree.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->objtree));
objtree.c:      hg->plot_i=i;
objtree.c:    //hg->plot_target=PLOT_OBJTREE;
objtree.c:    hg->plot_output=PLOT_OUTPUT_WINDOW;
objtree.c:    draw_plot_cairo(hg->plot_dw,NULL,
objtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
objtree.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->objtree));
objtree.c:    hg->plot_i=i;
objtree.c:    //hg->plot_target=PLOT_OBJTREE;
plan.c:  if(hg->i_plan_max<1){
plan.c:  hg->plan_note = gtk_notebook_new ();
plan.c:  gtk_notebook_set_tab_pos (GTK_NOTEBOOK (hg->plan_note), GTK_POS_TOP);
plan.c:  gtk_notebook_set_scrollable (GTK_NOTEBOOK (hg->plan_note), TRUE);
plan.c:  gtk_box_pack_start(GTK_BOX(plan_wbox), hg->plan_note,FALSE, FALSE, 2);
plan.c:    if(hg->i_max<1){
plan.c:      if(hg->obj[0].name){
plan.c:	//if(hg->plan_obj_name) g_free(hg->plan_obj_name);
plan.c:	//if(hg->plan_obj_note) g_free(hg->plan_obj_note);
plan.c:	//hg->plan_obj_name=g_strdup(hg->obj[0].name);
plan.c:	//hg->plan_obj_note=g_strdup(hg->obj[0].note);
plan.c:	hg->plan_obj_i=0;
plan.c:	hg->plan_obj_exp=hg->obj[0].exp;
plan.c:	hg->plan_obj_repeat=hg->obj[0].repeat;
plan.c:	hg->plan_obj_guide=hg->obj[0].guide;
plan.c:      for(i_list=0;i_list<hg->i_max;i_list++){
plan.c:	  sprintf(tmp,"%03d:  %s",i_list+1,hg->obj[i_list].name);
plan.c:      hg->e_list=0;
plan.c:      if(hg->plan_obj_omode==PLAN_OMODE_FULL) iter_set=iter;
plan.c:      if(hg->plan_obj_omode==PLAN_OMODE_SET) iter_set=iter;
plan.c:      if(hg->plan_obj_omode==PLAN_OMODE_GET) iter_set=iter;
plan.c:			 &hg->plan_obj_omode);
plan.c:    hg->e_entry = gtk_entry_new ();
plan.c:    gtk_box_pack_start(GTK_BOX(hbox),hg->e_entry,FALSE,FALSE,0);
plan.c:    if(hg->obj[0].name){
plan.c:      sprintf(tmp,"%d",hg->obj[0].exp);
plan.c:      hg->plan_obj_exp=hg->obj[0].exp;
plan.c:      gtk_entry_set_text(GTK_ENTRY(hg->e_entry),tmp);
plan.c:    gtk_entry_set_editable(GTK_ENTRY(hg->e_entry),TRUE);
plan.c:    my_entry_set_width_chars(GTK_ENTRY(hg->e_entry),4);
plan.c:    my_signal_connect (hg->e_entry,
plan.c:		       &hg->plan_obj_exp);
plan.c:    hg->plan_obj_repeat=hg->obj[0].repeat;
plan.c:    hg->plan_obj_adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan_obj_repeat,
plan.c:    my_signal_connect (hg->plan_obj_adj, "value_changed",
plan.c:		       &hg->plan_obj_repeat);
plan.c:    spinner =  gtk_spin_button_new (hg->plan_obj_adj, 0, 0);
plan.c:      if(hg->plan_obj_guide==NO_GUIDE) iter_set=iter;
plan.c:      if(hg->plan_obj_guide==AG_GUIDE) iter_set=iter;
plan.c:      if(hg->plan_obj_guide==SV_GUIDE) iter_set=iter;
plan.c:      if(hg->plan_obj_guide==SVSAFE_GUIDE) iter_set=iter;
plan.c:      hg->plan_obj_guide_combo
plan.c:      gtk_box_pack_start(GTK_BOX(hbox),hg->plan_obj_guide_combo,
plan.c:      gtk_cell_layout_pack_start(GTK_CELL_LAYOUT(hg->plan_obj_guide_combo),
plan.c:      gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT(hg->plan_obj_guide_combo),
plan.c:      gtk_combo_box_set_active_iter(GTK_COMBO_BOX(hg->plan_obj_guide_combo),
plan.c:      gtk_widget_show(hg->plan_obj_guide_combo);
plan.c:      my_signal_connect (hg->plan_obj_guide_combo,"changed",cc_get_combo_box,
plan.c:			 &hg->plan_obj_guide);
plan.c:    gtk_notebook_append_page (GTK_NOTEBOOK (hg->plan_note), hbox, label);
plan.c:      if(hg->plan_focus_mode==PLAN_FOCUS_SV) iter_set=iter;
plan.c:      if(hg->plan_focus_mode==PLAN_FOCUS_AG) iter_set=iter;
plan.c:			 &hg->plan_focus_mode);
plan.c:    gtk_notebook_append_page (GTK_NOTEBOOK (hg->plan_note), hbox, label);
plan.c:		       &hg->plan_setaz);
plan.c:		       &hg->plan_setel);
plan.c:    hg->plan_setazel_daytime=FALSE;
plan.c:		       &hg->plan_setazel_daytime);
plan.c:    gtk_notebook_append_page (GTK_NOTEBOOK (hg->plan_note), hbox, label);
plan.c:      if(hg->plan_setup_cmode==PLAN_CMODE_FULL) iter_set=iter;
plan.c:      if(hg->plan_setup_cmode==PLAN_CMODE_EASY) iter_set=iter;
plan.c:      if(hg->plan_setup_cmode==PLAN_CMODE_SLIT) iter_set=iter;
plan.c:			 &hg->plan_setup_cmode);
plan.c:    hg->plan_setup_daytime=FALSE;
plan.c:		       &hg->plan_setup_daytime);
plan.c:    gtk_notebook_append_page (GTK_NOTEBOOK (hg->plan_note), hbox, label);
plan.c:      if(hg->plan_i2_pos==PLAN_I2_IN) iter_set=iter;
plan.c:      if(hg->plan_i2_pos==PLAN_I2_OUT) iter_set=iter;
plan.c:			 &hg->plan_i2_pos);
plan.c:    hg->plan_i2_daytime=FALSE;
plan.c:		       &hg->plan_i2_daytime);
plan.c:    gtk_notebook_append_page (GTK_NOTEBOOK (hg->plan_note), hbox, label);
plan.c:    adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan_bias_repeat,
plan.c:		       &hg->plan_bias_repeat);
plan.c:    hg->plan_bias_daytime=FALSE;
plan.c:		       &hg->plan_bias_daytime);
plan.c:    gtk_notebook_append_page (GTK_NOTEBOOK (hg->plan_note), hbox, label);
plan.c:    hg->plan_comp_daytime=FALSE;
plan.c:		       &hg->plan_comp_daytime);
plan.c:    gtk_notebook_append_page (GTK_NOTEBOOK (hg->plan_note), hbox, label);
plan.c:    adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan_flat_repeat,
plan.c:		       &hg->plan_flat_repeat);
plan.c:    hg->plan_flat_daytime=FALSE;
plan.c:		       &hg->plan_flat_daytime);
plan.c:    gtk_notebook_append_page (GTK_NOTEBOOK (hg->plan_note), hbox, label);
plan.c:      if(hg->plan_comment_type==PLAN_COMMENT_TEXT) iter_set=iter;
plan.c:      if(hg->plan_comment_type==PLAN_COMMENT_SUNSET) iter_set=iter;
plan.c:      if(hg->plan_comment_type==PLAN_COMMENT_SUNRISE) iter_set=iter;
plan.c:			 &hg->plan_comment_type);
plan.c:    if(hg->plan_comment){
plan.c:			 hg->plan_comment);
plan.c:		       &hg->plan_comment);
plan.c:    hg->plan_comment_time=0;
plan.c:    adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan_comment_time,
plan.c:		       &hg->plan_comment_time);
plan.c:    gtk_notebook_append_page (GTK_NOTEBOOK (hg->plan_note), hbox, label);
plan.c:    hg->plan_tmp_setup=0;
plan.c:      if(hg->setup[i_use].use){
plan.c:	if(hg->setup[i_use].setup<0){
plan.c:		  i_use+1,-hg->setup[i_use].setup,
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:		  i_use+1,setups[hg->setup[i_use].setup].initial,
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:    gtk_combo_box_set_active(GTK_COMBO_BOX(combo),hg->plan_tmp_setup);
plan.c:		       &hg->plan_tmp_setup);
plan.c:		     &hg->plan_tmp_or);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan_tmp_sw,
plan.c:		     &hg->plan_tmp_sw);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan_tmp_sl,
plan.c:		     &hg->plan_tmp_sl);
plan.c:  hg->plan_tree = gtk_tree_view_new_with_model (plan_model);
plan.c:  gtk_tree_view_set_rules_hint (GTK_TREE_VIEW (hg->plan_tree), TRUE);
plan.c:  gtk_tree_selection_set_mode (gtk_tree_view_get_selection (GTK_TREE_VIEW (hg->plan_tree)),
plan.c:  plan_add_columns (hg, GTK_TREE_VIEW (hg->plan_tree), plan_model);
plan.c:  gtk_container_add (GTK_CONTAINER (plan_scroll), hg->plan_tree);
plan.c:    if(hg->plan_start==PLAN_START_EVENING) iter_set=iter;
plan.c:    if(hg->plan_start==PLAN_START_SPECIFIC) iter_set=iter;
plan.c:		       &hg->plan_start);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan_start_hour,
plan.c:		     &hg->plan_start_hour);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan_start_min,
plan.c:		     &hg->plan_start_min);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan_delay,
plan.c:		     &hg->plan_delay);
plan.c:  g_signal_connect (hg->plan_tree, "cursor-changed",
plan.c:  g_signal_connect(hg->plan_tree, "row-activated", 
plan.c:  gtk_widget_set_sensitive(hg->b_objtree_add,TRUE);
plan.c:  gtk_widget_set_sensitive(hg->b_objtree_remove,TRUE);
plan.c:  gtk_widget_set_sensitive(hg->b_objtree_add,TRUE);
plan.c:  gtk_widget_set_sensitive(hg->b_objtree_remove,TRUE);
plan.c:      gtk_tree_model_get (model, &iter, 1, &hg->e_list, -1);
plan.c:  hg->plan_obj_i=hg->e_list;
plan.c:  //if(hg->plan_obj_name) g_free(hg->plan_obj_name);
plan.c:  //hg->plan_obj_name=g_strdup(hg->obj[hg->e_list].name);
plan.c:  //if(hg->plan_obj_note) g_free(hg->plan_obj_note);
plan.c:  //hg->plan_obj_note=g_strdup(hg->obj[hg->e_list].note);
plan.c:  sprintf(tmp,"%d",hg->obj[hg->e_list].exp);
plan.c:  hg->plan_obj_exp=hg->obj[hg->e_list].exp;
plan.c:  gtk_entry_set_text(GTK_ENTRY(hg->e_entry),tmp);
plan.c:  sprintf(tmp,"%d",hg->obj[hg->e_list].repeat);
plan.c:  hg->plan_obj_repeat=hg->obj[hg->e_list].repeat;
plan.c:  //gtk_entry_set_text(GTK_ENTRY(&GTK_SPIN_BUTTON(hg->plan_obj_spinner)->entry),tmp);
plan.c:  gtk_adjustment_set_value(GTK_ADJUSTMENT(hg->plan_obj_adj),(gdouble)hg->plan_obj_repeat);
plan.c:  switch(hg->obj[hg->e_list].guide){
plan.c:      gtk_combo_box_set_active(GTK_COMBO_BOX(hg->plan_obj_guide_combo),
plan.c:      hg->plan_obj_guide=NO_GUIDE;
plan.c:      gtk_combo_box_set_active(GTK_COMBO_BOX(hg->plan_obj_guide_combo),
plan.c:      hg->plan_obj_guide=AG_GUIDE;
plan.c:      gtk_combo_box_set_active(GTK_COMBO_BOX(hg->plan_obj_guide_combo),
plan.c:      hg->plan_obj_guide=SV_GUIDE;
plan.c:      gtk_combo_box_set_active(GTK_COMBO_BOX(hg->plan_obj_guide_combo),
plan.c:      hg->plan_obj_guide=SVSAFE_GUIDE;
plan.c:  for (i_plan = 0; i_plan < hg->i_plan_max; i_plan++){
plan.c:  gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW(hg->plan_tree),
plan.c:  gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW(hg->plan_tree),
plan.c:  gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW(hg->plan_tree),
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:    for(i_plan=i;i_plan<hg->i_plan_max;i_plan++){
plan.c:      hg->plan[i_plan]=hg->plan[i_plan+1];
plan.c:    hg->i_plan_max--;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:    for(i_plan=hg->i_plan_max;i_plan>i+1;i_plan--){
plan.c:      hg->plan[i_plan]=hg->plan[i_plan-1];
plan.c:    hg->i_plan_max++;
plan.c:    hg->plan[i+1]=hg->plan[i];
plan.c:    hg->plan[i].comment=g_strdup(hg->plan[i+1].comment);
plan.c:    hg->plan[i].txt=make_plan_txt(hg,hg->plan[i]);
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:    tmp_plan=hg->plan[i];
plan.c:    hg->plan[i]=hg->plan[i-1];
plan.c:    hg->plan[i-1]=tmp_plan;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:    if(i==hg->i_plan_max-1){
plan.c:    tmp_plan=hg->plan[i];
plan.c:    hg->plan[i]=hg->plan[i+1];
plan.c:    hg->plan[i+1]=tmp_plan;
plan.c:    if(hg->setup[plan.setup].setup<0){
plan.c:	      -hg->setup[plan.setup].setup,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].x,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].y);
plan.c:	      setups[hg->setup[plan.setup].setup].initial,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].x,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].y);
plan.c:				hg->obj[plan.obj_i].name,
plan.c:				hg->obj[plan.obj_i].name,
plan.c:				hg->obj[plan.obj_i].name,
plan.c:				hg->obj[plan.obj_i].name,
plan.c:			      hg->obj[plan.obj_i].name,
plan.c:    if(hg->setup[plan.setup].setup<0){
plan.c:	      hg->binning[hg->setup[plan.setup].binning].x,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].y);
plan.c:	      hg->binning[hg->setup[plan.setup].binning].x,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].y);
plan.c:    if(hg->setup[plan.setup].setup<0){
plan.c:	      -hg->setup[plan.setup].setup,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].x,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].y);
plan.c:	      setups[hg->setup[plan.setup].setup].initial,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].x,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].y);
plan.c:    if(hg->setup[plan.setup].setup<0){
plan.c:	      -hg->setup[plan.setup].setup,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].x,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].y);
plan.c:	      setups[hg->setup[plan.setup].setup].initial,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].x,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].y);
plan.c:    if(hg->setup[plan.setup].setup<0){
plan.c:	      -hg->setup[plan.setup].setup,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].x,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].y);
plan.c:	      setups[hg->setup[plan.setup].setup].initial,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].x,
plan.c:	      hg->binning[hg->setup[plan.setup].binning].y);
plan.c:				(gfloat)hg->setup[plan.setup].slit_width/500.,
plan.c:				(gfloat)hg->setup[plan.setup].slit_length/500.);
plan.c:			      hg->sun.s_set.hours,
plan.c:			      hg->sun.s_set.minutes,
plan.c:			      hg->atw.s_set.hours,
plan.c:			      hg->atw.s_set.minutes,
plan.c:			      hg->fr_month,
plan.c:			      hg->fr_day,
plan.c:			      hg->fr_year);
plan.c:			      hg->atw.s_rise.hours,
plan.c:			      hg->atw.s_rise.minutes,
plan.c:			      hg->sun.s_rise.hours,
plan.c:			      hg->sun.s_rise.minutes);
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:  if(hg->i_plan_max>=MAX_PLAN) return;
plan.c:  if(hg->i_plan_max==0){
plan.c:    i=hg->i_plan_max;
plan.c:    i=hg->i_plan_max;
plan.c:  tmp_plan.slit_or=hg->plan_tmp_or;
plan.c:  tmp_plan.setup=hg->plan_tmp_setup;
plan.c:  tmp_plan.repeat=hg->plan_obj_repeat;
plan.c:  tmp_plan.obj_i=hg->plan_obj_i;
plan.c:  tmp_plan.exp=hg->plan_obj_exp;
plan.c:  tmp_plan.omode=hg->plan_obj_omode;
plan.c:  tmp_plan.guide=hg->plan_obj_guide;
plan.c:  switch(hg->plan_obj_omode){
plan.c:    if(hg->plan_tmp_or){
plan.c:      tmp_plan.slit_width=hg->plan_tmp_sw;
plan.c:      tmp_plan.slit_length=hg->plan_tmp_sl;
plan.c:    tmp_plan.time=hg->sv_acq
plan.c:      +(hg->plan_obj_exp+hg->binning[hg->setup[hg->plan_tmp_setup].binning].readout)*hg->plan_obj_repeat;
plan.c:    if(hg->plan_tmp_or){
plan.c:      tmp_plan.slit_width=hg->plan_tmp_sw;
plan.c:      tmp_plan.slit_length=hg->plan_tmp_sl;
plan.c:    tmp_plan.time=hg->sv_acq;
plan.c:      (hg->plan_obj_exp+hg->binning[hg->setup[hg->plan_tmp_setup].binning].readout)*hg->plan_obj_repeat;
plan.c:  tmp_plan.pa=hg->obj[tmp_plan.obj_i].pa;
plan.c:  tmp_plan.sv_exp=hg->exptime_sv;
plan.c:  for(i_plan=hg->i_plan_max;i_plan>i;i_plan--){
plan.c:    hg->plan[i_plan]=hg->plan[i_plan-1];
plan.c:  hg->i_plan_max++;
plan.c:  //if(hg->plan[i].txt) g_free(hg->plan[i].txt);
plan.c:  //if(hg->plan[i].comment) g_free(hg->plan[i].comment);
plan.c:  hg->plan[i]=tmp_plan;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:  if(hg->i_plan_max>=MAX_PLAN) return;
plan.c:  if(hg->i_plan_max==0){
plan.c:    i=hg->i_plan_max;
plan.c:    i=hg->i_plan_max;
plan.c:  tmp_plan.focus_mode=hg->plan_focus_mode;
plan.c:  tmp_plan.sv_exp=hg->exptime_sv;
plan.c:  for(i_plan=hg->i_plan_max;i_plan>i;i_plan--){
plan.c:    hg->plan[i_plan]=hg->plan[i_plan-1];
plan.c:  hg->i_plan_max++;
plan.c:  //if(hg->plan[i].txt) g_free(hg->plan[i].txt);
plan.c:  //if(hg->plan[i].comment) g_free(hg->plan[i].comment);
plan.c:  hg->plan[i]=tmp_plan;
plan.c:    hg->plan[i_plan].az0=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el0=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az1=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el1=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az0=-90.;
plan.c:    hg->plan[i_plan].el0=+90.;
plan.c:    hg->plan[i_plan].az1=-90.;
plan.c:    hg->plan[i_plan].el1=+90.;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:  if(hg->i_plan_max>=MAX_PLAN) return;
plan.c:  if(hg->i_plan_max==0){
plan.c:    i=hg->i_plan_max;
plan.c:    i=hg->i_plan_max;
plan.c:  tmp_plan.setaz=hg->plan_setaz;
plan.c:  tmp_plan.setel=hg->plan_setel;
plan.c:  tmp_plan.az1=hg->plan_setaz;
plan.c:  tmp_plan.el1=hg->plan_setel;
plan.c:  tmp_plan.daytime=hg->plan_setazel_daytime;
plan.c:  tmp_plan.time=slewtime(hg->plan[i-1].az1, hg->plan[i-1].el1,
plan.c:  tmp_plan.sv_exp=hg->exptime_sv;
plan.c:  for(i_plan=hg->i_plan_max;i_plan>i;i_plan--){
plan.c:    hg->plan[i_plan]=hg->plan[i_plan-1];
plan.c:  hg->i_plan_max++;
plan.c:  hg->plan[i]=tmp_plan;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:  if(hg->i_plan_max>=MAX_PLAN) return;
plan.c:  if(hg->i_plan_max==0){
plan.c:    i=hg->i_plan_max;
plan.c:    i=hg->i_plan_max;
plan.c:  //tmp_plan.txt=g_strdup_printf("BIAS x%d, %s",hg->plan_bias_repeat,tmp);
plan.c:  tmp_plan.setup=hg->plan_tmp_setup;
plan.c:  tmp_plan.repeat=hg->plan_bias_repeat;
plan.c:  tmp_plan.daytime=hg->plan_bias_daytime;
plan.c:  tmp_plan.time=hg->binning[hg->setup[hg->plan_tmp_setup].binning].readout*hg->plan_bias_repeat;
plan.c:  tmp_plan.sv_exp=hg->exptime_sv;
plan.c:  for(i_plan=hg->i_plan_max;i_plan>i;i_plan--){
plan.c:    hg->plan[i_plan]=hg->plan[i_plan-1];
plan.c:  hg->i_plan_max++;
plan.c:  //if(hg->plan[i].txt) g_free(hg->plan[i].txt);
plan.c:  //if(hg->plan[i].comment) g_free(hg->plan[i].comment);
plan.c:  hg->plan[i]=tmp_plan;
plan.c:    hg->plan[i_plan].az0=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el0=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az1=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el1=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az0=-90.;
plan.c:    hg->plan[i_plan].el0=+90.;
plan.c:    hg->plan[i_plan].az1=-90.;
plan.c:    hg->plan[i_plan].el1=+90.;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:  if(hg->i_plan_max>=MAX_PLAN) return;
plan.c:  if(hg->i_plan_max==0){
plan.c:    i=hg->i_plan_max;
plan.c:    i=hg->i_plan_max;
plan.c:  tmp_plan.slit_or=hg->plan_tmp_or;
plan.c:  if(hg->plan_tmp_or){
plan.c:    tmp_plan.slit_width=hg->plan_tmp_sw;
plan.c:    tmp_plan.slit_length=hg->plan_tmp_sl;
plan.c:  tmp_plan.setup=hg->plan_tmp_setup;
plan.c:  tmp_plan.daytime=hg->plan_comp_daytime;
plan.c:    + 20/hg->binning[hg->setup[hg->plan_tmp_setup].binning].x/hg->binning[hg->setup[hg->plan_tmp_setup].binning].y
plan.c:    + hg->binning[hg->setup[hg->plan_tmp_setup].binning].readout;
plan.c:  tmp_plan.sv_exp=hg->exptime_sv;
plan.c:  for(i_plan=hg->i_plan_max;i_plan>i;i_plan--){
plan.c:    hg->plan[i_plan]=hg->plan[i_plan-1];
plan.c:  hg->i_plan_max++;
plan.c:  //if(hg->plan[i].txt) g_free(hg->plan[i].txt);
plan.c:  //if(hg->plan[i].comment) g_free(hg->plan[i].comment);
plan.c:  hg->plan[i]=tmp_plan;
plan.c:    hg->plan[i_plan].az0=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el0=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az1=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el1=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az0=-90.;
plan.c:    hg->plan[i_plan].el0=+90.;
plan.c:    hg->plan[i_plan].az1=-90.;
plan.c:    hg->plan[i_plan].el1=+90.;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:  if(hg->i_plan_max>=MAX_PLAN) return;
plan.c:  if(hg->i_plan_max==0){
plan.c:    i=hg->i_plan_max;
plan.c:    i=hg->i_plan_max;
plan.c:  tmp_plan.slit_or=hg->plan_tmp_or;
plan.c:  if(hg->plan_tmp_or){
plan.c:    tmp_plan.slit_width=hg->plan_tmp_sw;
plan.c:    tmp_plan.slit_length=hg->plan_tmp_sl;
plan.c:  tmp_plan.setup=hg->plan_tmp_setup;
plan.c:  tmp_plan.repeat=hg->plan_flat_repeat;
plan.c:  tmp_plan.daytime=hg->plan_flat_daytime;
plan.c:    + (16/hg->binning[hg->setup[hg->plan_tmp_setup].binning].x/hg->binning[hg->setup[hg->plan_tmp_setup].binning].y
plan.c:       + hg->binning[hg->setup[hg->plan_tmp_setup].binning].readout)
plan.c:    * hg->plan_flat_repeat *2;
plan.c:  tmp_plan.sv_exp=hg->exptime_sv;
plan.c:  for(i_plan=hg->i_plan_max;i_plan>i;i_plan--){
plan.c:    hg->plan[i_plan]=hg->plan[i_plan-1];
plan.c:  hg->i_plan_max++;
plan.c:  //if(hg->plan[i].txt) g_free(hg->plan[i].txt);
plan.c:  //if(hg->plan[i].comment) g_free(hg->plan[i].comment);
plan.c:  hg->plan[i]=tmp_plan;
plan.c:    hg->plan[i_plan].az0=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el0=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az1=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el1=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az0=-90.;
plan.c:    hg->plan[i_plan].el0=+90.;
plan.c:    hg->plan[i_plan].az1=-90.;
plan.c:    hg->plan[i_plan].el1=+90.;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:  if(hg->i_plan_max>=MAX_PLAN) return;
plan.c:  if(hg->i_plan_max==0){
plan.c:    i=hg->i_plan_max;
plan.c:    i=hg->i_plan_max;
plan.c:  tmp_plan.setup=hg->plan_tmp_setup;
plan.c:  tmp_plan.slit_or=hg->plan_tmp_or;
plan.c:  tmp_plan.cmode=hg->plan_setup_cmode;
plan.c:  switch(hg->plan_setup_cmode){
plan.c:    if(hg->plan_tmp_or){
plan.c:      tmp_plan.slit_width=hg->plan_tmp_sw;
plan.c:      tmp_plan.slit_length=hg->plan_tmp_sl;
plan.c:      tmp_plan.slit_width=hg->setup[hg->plan_tmp_setup].slit_width;
plan.c:      tmp_plan.slit_length=hg->setup[hg->plan_tmp_setup].slit_length;
plan.c:    if(hg->plan_tmp_or){
plan.c:      tmp_plan.slit_width=hg->plan_tmp_sw;
plan.c:      tmp_plan.slit_length=hg->plan_tmp_sl;
plan.c:      tmp_plan.slit_width=hg->setup[hg->plan_tmp_setup].slit_width;
plan.c:      tmp_plan.slit_length=hg->setup[hg->plan_tmp_setup].slit_length;
plan.c:    if(hg->plan_tmp_or){
plan.c:      tmp_plan.slit_width=hg->plan_tmp_sw;
plan.c:      tmp_plan.slit_length=hg->plan_tmp_sl;
plan.c:      tmp_plan.slit_width=hg->setup[hg->plan_tmp_setup].slit_width;
plan.c:      tmp_plan.slit_length=hg->setup[hg->plan_tmp_setup].slit_length;
plan.c:  tmp_plan.daytime=hg->plan_setup_daytime;
plan.c:  tmp_plan.sv_exp=hg->exptime_sv;
plan.c:  for(i_plan=hg->i_plan_max;i_plan>i;i_plan--){
plan.c:    hg->plan[i_plan]=hg->plan[i_plan-1];
plan.c:  hg->i_plan_max++;
plan.c:  //if(hg->plan[i].txt) g_free(hg->plan[i].txt);
plan.c:  //if(hg->plan[i].comment) g_free(hg->plan[i].comment);
plan.c:  hg->plan[i]=tmp_plan;
plan.c:    hg->plan[i_plan].az0=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el0=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az1=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el1=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az0=-90.;
plan.c:    hg->plan[i_plan].el0=+90.;
plan.c:    hg->plan[i_plan].az1=-90.;
plan.c:    hg->plan[i_plan].el1=+90.;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:  if(hg->i_plan_max>=MAX_PLAN) return;
plan.c:  if(hg->i_plan_max==0){
plan.c:    i=hg->i_plan_max;
plan.c:    i=hg->i_plan_max;
plan.c:  tmp_plan.i2_pos=hg->plan_i2_pos;
plan.c:  if(hg->plan_i2_pos==PLAN_I2_IN){
plan.c:  tmp_plan.daytime=hg->plan_i2_daytime;
plan.c:  tmp_plan.sv_exp=hg->exptime_sv;
plan.c:  for(i_plan=hg->i_plan_max;i_plan>i;i_plan--){
plan.c:    hg->plan[i_plan]=hg->plan[i_plan-1];
plan.c:  hg->i_plan_max++;
plan.c:  //if(hg->plan[i].txt) g_free(hg->plan[i].txt);
plan.c:  //if(hg->plan[i].comment) g_free(hg->plan[i].comment);
plan.c:  hg->plan[i]=tmp_plan;
plan.c:    hg->plan[i_plan].az0=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el0=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az1=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el1=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az0=-90.;
plan.c:    hg->plan[i_plan].el0=+90.;
plan.c:    hg->plan[i_plan].az1=-90.;
plan.c:    hg->plan[i_plan].el1=+90.;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:  if(hg->i_plan_max>=MAX_PLAN) return;
plan.c:  if(hg->i_plan_max==0){
plan.c:    i=hg->i_plan_max;
plan.c:    i=hg->i_plan_max;
plan.c:  tmp_plan.comtype=hg->plan_comment_type;
plan.c:  switch(hg->plan_comment_type){
plan.c:    if(hg->plan_comment){
plan.c:      tmp_plan.comment=g_strdup(hg->plan_comment);
plan.c:    tmp_plan.time=hg->plan_comment_time*60;
plan.c:  tmp_plan.sv_exp=hg->exptime_sv;
plan.c:  for(i_plan=hg->i_plan_max;i_plan>i;i_plan--){
plan.c:    hg->plan[i_plan]=hg->plan[i_plan-1];
plan.c:  hg->i_plan_max++;
plan.c:  hg->plan[i]=tmp_plan;
plan.c:    hg->plan[i_plan].az0=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el0=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az1=hg->plan[i_plan-1].az1;
plan.c:    hg->plan[i_plan].el1=hg->plan[i_plan-1].el1;
plan.c:    hg->plan[i_plan].az0=-90.;
plan.c:    hg->plan[i_plan].el0=+90.;
plan.c:    hg->plan[i_plan].az1=-90.;
plan.c:    hg->plan[i_plan].el1=+90.;
plan.c:  if(hg->plan[i_plan].daytime){
plan.c:			hg->plan[i_plan].sod,
plan.c:  if(hg->plan[i_plan].daytime){
plan.c:			-hg->plan[i_plan].time/60,
plan.c:  else if(hg->plan[i_plan].backup){
plan.c:			-hg->plan[i_plan].time/60,
plan.c:			hg->plan[i_plan].time/60,
plan.c:		      hg->plan[i_plan].txt,
plan.c:  if(hg->plan[i_plan].type==PLAN_TYPE_OBJ){
plan.c:  if((hg->plan[i_plan].type==PLAN_TYPE_OBJ)&&
plan.c:     (!hg->plan[i_plan].backup)){
plan.c:    if(hg->plan[i_plan].txt_az)
plan.c:			  hg->plan[i_plan].txt_az,
plan.c:    if(hg->plan[i_plan].txt_el)
plan.c:			  hg->plan[i_plan].txt_el,
plan.c:    if((hg->plan[i_plan].el0<0)||(hg->plan[i_plan].el1<0)){
plan.c:    else if((hg->plan[i_plan].el0<15)||(hg->plan[i_plan].el1<15)){
plan.c:  switch(hg->plan[i_plan].type){
plan.c:  hg->plan[0].type=PLAN_TYPE_COMMENT;
plan.c:  hg->plan[0].setup=0;
plan.c:  hg->plan[0].repeat=0;
plan.c:  hg->plan[0].slit_or=FALSE;
plan.c:  hg->plan[0].slit_width=0;
plan.c:  hg->plan[0].slit_length=0;
plan.c:  hg->plan[0].obj_i=0;;
plan.c:  hg->plan[0].exp=0;
plan.c:  hg->plan[0].omode=PLAN_OMODE_FULL;
plan.c:  hg->plan[0].guide=SV_GUIDE;
plan.c:  hg->plan[0].focus_mode=PLAN_FOCUS_SV;
plan.c:  hg->plan[0].cmode=PLAN_CMODE_FULL;
plan.c:  hg->plan[0].i2_pos=PLAN_I2_IN;
plan.c:  hg->plan[0].daytime=FALSE;
plan.c:  hg->plan[0].time=0;
plan.c:  if(hg->plan[0].comment) g_free(hg->plan[0].comment);
plan.c:  hg->plan[0].comment=g_strdup("========== Please Insert Your Obs Plan. ==========");
plan.c:  hg->plan[0].comtype=PLAN_COMMENT_TEXT;
plan.c:  hg->plan[0].pa_or=FALSE;
plan.c:  hg->plan[0].pa=0;
plan.c:  hg->plan[0].sv_or=FALSE;
plan.c:  hg->plan[0].sv_exp=hg->exptime_sv;
plan.c:  hg->plan[0].sv_fil=SV_FILTER_NONE;
plan.c:  hg->plan[0].backup=FALSE;
plan.c:  if(hg->plan[0].txt) g_free(hg->plan[0].txt);
plan.c:  hg->plan[0].txt=make_plan_txt(hg,hg->plan[0]);
plan.c:  hg->i_plan_max=1;
plan.c:  if(hg->setup[hg->plan_tmp_setup].setup<0){
plan.c:	    hg->plan_tmp_setup+1,
plan.c:	    -hg->setup[hg->plan_tmp_setup].setup,
plan.c:	    hg->binning[hg->setup[hg->plan_tmp_setup].binning].x,
plan.c:	    hg->binning[hg->setup[hg->plan_tmp_setup].binning].y);
plan.c:	    hg->plan_tmp_setup+1,
plan.c:	    hg->binning[hg->setup[hg->plan_tmp_setup].binning].x,
plan.c:	    hg->binning[hg->setup[hg->plan_tmp_setup].binning].y);
plan.c:	    hg->plan_tmp_setup+1,
plan.c:	    setups[hg->setup[hg->plan_tmp_setup].setup].initial,
plan.c:	    hg->binning[hg->setup[hg->plan_tmp_setup].binning].x,
plan.c:	    hg->binning[hg->setup[hg->plan_tmp_setup].binning].y);
plan.c:	    hg->plan_tmp_setup+1,
plan.c:	    hg->binning[hg->setup[hg->plan_tmp_setup].binning].x,
plan.c:	    hg->binning[hg->setup[hg->plan_tmp_setup].binning].y);
plan.c:    hg->plan[0].type=PLAN_TYPE_COMMENT;
plan.c:    hg->plan[0].setup=0;
plan.c:    hg->plan[0].repeat=1;
plan.c:    hg->plan[0].slit_or=FALSE;
plan.c:    hg->plan[0].slit_width=200;
plan.c:    hg->plan[0].slit_length=2000;
plan.c:    hg->plan[0].obj_i=0;;
plan.c:    hg->plan[0].exp=0;
plan.c:    hg->plan[0].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[0].guide=SV_GUIDE;
plan.c:    hg->plan[0].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[0].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[0].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[0].daytime=FALSE;
plan.c:    hg->plan[0].time=0;
plan.c:    if(hg->plan[0].comment) g_free(hg->plan[0].comment);
plan.c:    hg->plan[0].comment=g_strdup("========== Evening Calibration ==========");
plan.c:    hg->plan[0].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[0].pa_or=FALSE;
plan.c:    hg->plan[0].pa=0;
plan.c:    hg->plan[0].sv_or=FALSE;
plan.c:    hg->plan[0].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[0].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[0].backup=FALSE;
plan.c:    if(hg->plan[0].txt) g_free(hg->plan[0].txt);
plan.c:    hg->plan[0].txt=make_plan_txt(hg,hg->plan[0]);
plan.c:    hg->plan[1].type=PLAN_TYPE_SETUP;
plan.c:    hg->plan[1].setup=0;
plan.c:    hg->plan[1].repeat=1;
plan.c:    hg->plan[1].slit_or=FALSE;
plan.c:    hg->plan[1].slit_width=200;
plan.c:    hg->plan[1].slit_length=2000;
plan.c:    hg->plan[1].obj_i=0;;
plan.c:    hg->plan[1].exp=0;
plan.c:    hg->plan[1].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[1].guide=SV_GUIDE;
plan.c:    hg->plan[1].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[1].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[1].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[1].daytime=TRUE;
plan.c:    hg->plan[1].time=TIME_SETUP_FULL;
plan.c:    if(hg->plan[1].comment) g_free(hg->plan[1].comment);
plan.c:    hg->plan[1].comment=NULL;
plan.c:    hg->plan[1].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[1].pa_or=FALSE;
plan.c:    hg->plan[1].pa=0;
plan.c:    hg->plan[1].sv_or=FALSE;
plan.c:    hg->plan[1].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[1].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[1].backup=FALSE;
plan.c:    if(hg->plan[1].txt) g_free(hg->plan[1].txt);
plan.c:    hg->plan[1].txt=make_plan_txt(hg,hg->plan[1]);
plan.c:    hg->plan[2].type=PLAN_TYPE_BIAS;
plan.c:    hg->plan[2].setup=0;
plan.c:    hg->plan[2].repeat=5;
plan.c:    hg->plan[2].slit_or=FALSE;
plan.c:    hg->plan[2].slit_width=200;
plan.c:    hg->plan[2].slit_length=2000;
plan.c:    hg->plan[2].obj_i=0;;
plan.c:    hg->plan[2].exp=0;
plan.c:    hg->plan[2].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[2].guide=SV_GUIDE;
plan.c:    hg->plan[2].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[2].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[2].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[2].daytime=TRUE;
plan.c:    hg->plan[2].time=hg->binning[hg->setup[0].binning].readout*5;
plan.c:    if(hg->plan[2].comment) g_free(hg->plan[2].comment);
plan.c:    hg->plan[2].comment=NULL;
plan.c:    hg->plan[2].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[2].pa_or=FALSE;
plan.c:    hg->plan[2].pa=0;
plan.c:    hg->plan[2].sv_or=FALSE;
plan.c:    hg->plan[2].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[2].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[2].backup=FALSE;
plan.c:    if(hg->plan[2].txt) g_free(hg->plan[2].txt);
plan.c:    hg->plan[2].txt=make_plan_txt(hg,hg->plan[2]);
plan.c:    hg->plan[3].type=PLAN_TYPE_FLAT;
plan.c:    hg->plan[3].setup=0;
plan.c:    hg->plan[3].repeat=10;
plan.c:    hg->plan[3].slit_or=FALSE;
plan.c:    hg->plan[3].slit_width=200;
plan.c:    hg->plan[3].slit_length=2000;
plan.c:    hg->plan[3].obj_i=0;;
plan.c:    hg->plan[3].exp=0;
plan.c:    hg->plan[3].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[3].guide=SV_GUIDE;
plan.c:    hg->plan[3].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[3].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[3].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[3].daytime=TRUE;
plan.c:    hg->plan[3].time=TIME_FLAT+
plan.c:      (16/hg->binning[hg->setup[0].binning].x/hg->binning[hg->setup[0].binning].y + hg->binning[hg->setup[0].binning].readout)*10*2;
plan.c:    if(hg->plan[3].comment) g_free(hg->plan[3].comment);
plan.c:    hg->plan[3].comment=NULL;
plan.c:    hg->plan[3].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[3].pa_or=FALSE;
plan.c:    hg->plan[3].pa=0;
plan.c:    hg->plan[3].sv_or=FALSE;
plan.c:    hg->plan[3].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[3].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[3].backup=FALSE;
plan.c:    if(hg->plan[3].txt) g_free(hg->plan[3].txt);
plan.c:    hg->plan[3].txt=make_plan_txt(hg,hg->plan[3]);
plan.c:    hg->plan[4].type=PLAN_TYPE_COMP;
plan.c:    hg->plan[4].setup=0;
plan.c:    hg->plan[4].repeat=1;
plan.c:    hg->plan[4].slit_or=FALSE;
plan.c:    hg->plan[4].slit_width=200;
plan.c:    hg->plan[4].slit_length=2000;
plan.c:    hg->plan[4].obj_i=0;;
plan.c:    hg->plan[4].exp=0;
plan.c:    hg->plan[4].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[4].guide=SV_GUIDE;
plan.c:    hg->plan[4].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[4].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[4].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[4].daytime=TRUE;
plan.c:    hg->plan[4].time=TIME_COMP+
plan.c:      20/hg->binning[hg->setup[0].binning].x/hg->binning[hg->setup[0].binning].y + hg->binning[hg->setup[0].binning].readout;
plan.c:    if(hg->plan[4].comment) g_free(hg->plan[4].comment);
plan.c:    hg->plan[4].comment=NULL;
plan.c:    hg->plan[4].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[4].pa_or=FALSE;
plan.c:    hg->plan[4].pa=0;
plan.c:    hg->plan[4].sv_or=FALSE;
plan.c:    hg->plan[4].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[4].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[4].backup=FALSE;
plan.c:    if(hg->plan[4].txt) g_free(hg->plan[4].txt);
plan.c:    hg->plan[4].txt=make_plan_txt(hg,hg->plan[4]);
plan.c:    hg->plan[5].type=PLAN_TYPE_COMMENT;
plan.c:    hg->plan[5].setup=0;
plan.c:    hg->plan[5].repeat=1;
plan.c:    hg->plan[5].slit_or=FALSE;
plan.c:    hg->plan[5].slit_width=200;
plan.c:    hg->plan[5].slit_length=2000;
plan.c:    hg->plan[5].obj_i=0;;
plan.c:    hg->plan[5].exp=0;
plan.c:    hg->plan[5].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[5].guide=SV_GUIDE;
plan.c:    hg->plan[5].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[5].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[5].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[5].daytime=FALSE;
plan.c:    hg->plan[5].time=0;
plan.c:    if(hg->plan[5].comment) g_free(hg->plan[5].comment);
plan.c:    hg->plan[5].comment=g_strdup("========== Evening Focus ==========");
plan.c:    hg->plan[5].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[5].pa_or=FALSE;
plan.c:    hg->plan[5].pa=0;
plan.c:    hg->plan[5].sv_or=FALSE;
plan.c:    hg->plan[5].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[5].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[5].backup=FALSE;
plan.c:    if(hg->plan[5].txt) g_free(hg->plan[5].txt);
plan.c:    hg->plan[5].txt=make_plan_txt(hg,hg->plan[5]);
plan.c:    hg->plan[6].type=PLAN_TYPE_COMMENT;
plan.c:    hg->plan[6].setup=0;
plan.c:    hg->plan[6].repeat=1;
plan.c:    hg->plan[6].slit_or=FALSE;
plan.c:    hg->plan[6].slit_width=200;
plan.c:    hg->plan[6].slit_length=2000;
plan.c:    hg->plan[6].obj_i=0;;
plan.c:    hg->plan[6].exp=0;
plan.c:    hg->plan[6].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[6].guide=SV_GUIDE;
plan.c:    hg->plan[6].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[6].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[6].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[6].daytime=FALSE;
plan.c:    hg->plan[6].time=0;
plan.c:    if(hg->plan[6].comment) g_free(hg->plan[6].comment);
plan.c:    hg->plan[6].comment=NULL;
plan.c:    hg->plan[6].comtype=PLAN_COMMENT_SUNSET;
plan.c:    hg->plan[6].pa_or=FALSE;
plan.c:    hg->plan[6].pa=0;
plan.c:    hg->plan[6].sv_or=FALSE;
plan.c:    hg->plan[6].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[6].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[6].backup=FALSE;
plan.c:    if(hg->plan[6].txt) g_free(hg->plan[6].txt);
plan.c:    hg->plan[6].txt=make_plan_txt(hg,hg->plan[6]);
plan.c:    hg->plan[7].type=PLAN_TYPE_FOCUS;
plan.c:    hg->plan[7].setup=0;
plan.c:    hg->plan[7].repeat=1;
plan.c:    hg->plan[7].slit_or=FALSE;
plan.c:    hg->plan[7].slit_width=200;
plan.c:    hg->plan[7].slit_length=2000;
plan.c:    hg->plan[7].obj_i=0;;
plan.c:    hg->plan[7].exp=0;
plan.c:    hg->plan[7].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[7].guide=SV_GUIDE;
plan.c:    hg->plan[7].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[7].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[7].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[7].daytime=FALSE;
plan.c:    hg->plan[7].time=TIME_FOCUS_AG;
plan.c:    if(hg->plan[7].comment) g_free(hg->plan[7].comment);
plan.c:    hg->plan[7].comment=NULL;
plan.c:    hg->plan[7].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[7].pa_or=FALSE;
plan.c:    hg->plan[7].pa=0;
plan.c:    hg->plan[7].sv_or=FALSE;
plan.c:    hg->plan[7].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[7].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[7].backup=FALSE;
plan.c:    if(hg->plan[7].txt) g_free(hg->plan[7].txt);
plan.c:    hg->plan[7].txt=make_plan_txt(hg,hg->plan[7]);
plan.c:    hg->plan[8].type=PLAN_TYPE_COMMENT;
plan.c:    hg->plan[8].setup=0;
plan.c:    hg->plan[8].repeat=1;
plan.c:    hg->plan[8].slit_or=FALSE;
plan.c:    hg->plan[8].slit_width=200;
plan.c:    hg->plan[8].slit_length=2000;
plan.c:    hg->plan[8].obj_i=0;;
plan.c:    hg->plan[8].exp=0;
plan.c:    hg->plan[8].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[8].guide=SV_GUIDE;
plan.c:    hg->plan[8].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[8].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[8].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[8].daytime=FALSE;
plan.c:    hg->plan[8].time=0;
plan.c:    if(hg->plan[8].comment) g_free(hg->plan[8].comment);
plan.c:    hg->plan[8].comment=g_strdup("##### <<<<<<<<< INSERT YOUR TARGETS HERE >>>>>>>>> #####");
plan.c:    hg->plan[8].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[8].pa_or=FALSE;
plan.c:    hg->plan[8].pa=0;
plan.c:    hg->plan[8].sv_or=FALSE;
plan.c:    hg->plan[8].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[8].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[8].backup=FALSE;
plan.c:    if(hg->plan[8].txt) g_free(hg->plan[8].txt);
plan.c:    hg->plan[8].txt=make_plan_txt(hg,hg->plan[8]);
plan.c:    hg->plan[9].type=PLAN_TYPE_COMMENT;
plan.c:    hg->plan[9].setup=0;
plan.c:    hg->plan[9].repeat=1;
plan.c:    hg->plan[9].slit_or=FALSE;
plan.c:    hg->plan[9].slit_width=200;
plan.c:    hg->plan[9].slit_length=2000;
plan.c:    hg->plan[9].obj_i=0;;
plan.c:    hg->plan[9].exp=0;
plan.c:    hg->plan[9].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[9].guide=SV_GUIDE;
plan.c:    hg->plan[9].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[9].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[9].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[9].daytime=FALSE;
plan.c:    hg->plan[9].time=0;
plan.c:    if(hg->plan[9].comment) g_free(hg->plan[9].comment);
plan.c:    hg->plan[9].comment=NULL;
plan.c:    hg->plan[9].comtype=PLAN_COMMENT_SUNRISE; 
plan.c:    hg->plan[9].pa_or=FALSE;
plan.c:    hg->plan[9].pa=0;
plan.c:    hg->plan[9].sv_or=FALSE;
plan.c:    hg->plan[9].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[9].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[9].backup=FALSE;
plan.c:    if(hg->plan[9].txt) g_free(hg->plan[9].txt);
plan.c:    hg->plan[9].txt=make_plan_txt(hg,hg->plan[9]);
plan.c:    hg->plan[10].type=PLAN_TYPE_COMMENT;
plan.c:    hg->plan[10].setup=0;
plan.c:    hg->plan[10].repeat=1;
plan.c:    hg->plan[10].slit_or=FALSE;
plan.c:    hg->plan[10].slit_width=200;
plan.c:    hg->plan[10].slit_length=2000;
plan.c:    hg->plan[10].obj_i=0;;
plan.c:    hg->plan[10].exp=0;
plan.c:    hg->plan[10].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[10].guide=SV_GUIDE;
plan.c:    hg->plan[10].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[10].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[10].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[10].daytime=FALSE;
plan.c:    hg->plan[10].time=0;
plan.c:    if(hg->plan[10].comment) g_free(hg->plan[10].comment);
plan.c:    hg->plan[10].comment=g_strdup("========== Morning Focus ==========");
plan.c:    hg->plan[10].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[10].pa_or=FALSE;
plan.c:    hg->plan[10].pa=0;
plan.c:    hg->plan[10].sv_or=FALSE;
plan.c:    hg->plan[10].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[10].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[10].backup=FALSE;
plan.c:    if(hg->plan[10].txt) g_free(hg->plan[10].txt);
plan.c:    hg->plan[10].txt=make_plan_txt(hg,hg->plan[10]);
plan.c:    hg->plan[11].type=PLAN_TYPE_FOCUS;
plan.c:    hg->plan[11].setup=0;
plan.c:    hg->plan[11].repeat=1;
plan.c:    hg->plan[11].slit_or=FALSE;
plan.c:    hg->plan[11].slit_width=200;
plan.c:    hg->plan[11].slit_length=2000;
plan.c:    hg->plan[11].obj_i=0;;
plan.c:    hg->plan[11].exp=0;
plan.c:    hg->plan[11].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[11].guide=SV_GUIDE;
plan.c:    hg->plan[11].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[11].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[11].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[11].daytime=FALSE;
plan.c:    hg->plan[11].time=TIME_FOCUS_AG;
plan.c:    if(hg->plan[11].comment) g_free(hg->plan[11].comment);
plan.c:    hg->plan[11].comment=NULL;
plan.c:    hg->plan[11].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[11].pa_or=FALSE;
plan.c:    hg->plan[11].pa=0;
plan.c:    hg->plan[11].sv_or=FALSE;
plan.c:    hg->plan[11].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[11].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[11].backup=FALSE;
plan.c:    if(hg->plan[11].txt) g_free(hg->plan[11].txt);
plan.c:    hg->plan[11].txt=make_plan_txt(hg,hg->plan[11]);
plan.c:    hg->plan[12].type=PLAN_TYPE_COMMENT;
plan.c:    hg->plan[12].setup=0;
plan.c:    hg->plan[12].repeat=1;
plan.c:    hg->plan[12].slit_or=FALSE;
plan.c:    hg->plan[12].slit_width=200;
plan.c:    hg->plan[12].slit_length=2000;
plan.c:    hg->plan[12].obj_i=0;;
plan.c:    hg->plan[12].exp=0;
plan.c:    hg->plan[12].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[12].guide=SV_GUIDE;
plan.c:    hg->plan[12].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[12].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[12].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[12].daytime=FALSE;
plan.c:    hg->plan[12].time=0;
plan.c:    if(hg->plan[12].comment) g_free(hg->plan[12].comment);
plan.c:    hg->plan[12].comment=g_strdup("========== Morning Calibration ==========");
plan.c:    hg->plan[12].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[12].pa_or=FALSE;
plan.c:    hg->plan[12].pa=0;
plan.c:    hg->plan[12].sv_or=FALSE;
plan.c:    hg->plan[12].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[12].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[12].backup=FALSE;
plan.c:    if(hg->plan[12].txt) g_free(hg->plan[12].txt);
plan.c:    hg->plan[12].txt=make_plan_txt(hg,hg->plan[12]);
plan.c:    hg->plan[13].type=PLAN_TYPE_COMP;
plan.c:    hg->plan[13].setup=0;
plan.c:    hg->plan[13].repeat=1;
plan.c:    hg->plan[13].slit_or=FALSE;
plan.c:    hg->plan[13].slit_width=200;
plan.c:    hg->plan[13].slit_length=2000;
plan.c:    hg->plan[13].obj_i=0;;
plan.c:    hg->plan[13].exp=0;
plan.c:    hg->plan[13].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[13].guide=SV_GUIDE;
plan.c:    hg->plan[13].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[13].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[13].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[13].daytime=TRUE;
plan.c:    hg->plan[13].time=TIME_COMP+
plan.c:      20/hg->binning[hg->setup[0].binning].x/hg->binning[hg->setup[0].binning].y + hg->binning[hg->setup[0].binning].readout;
plan.c:    if(hg->plan[13].comment) g_free(hg->plan[13].comment);
plan.c:    hg->plan[13].comment=NULL;
plan.c:    hg->plan[13].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[13].pa_or=FALSE;
plan.c:    hg->plan[13].pa=0;
plan.c:    hg->plan[13].sv_or=FALSE;
plan.c:    hg->plan[13].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[13].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[13].backup=FALSE;
plan.c:    if(hg->plan[13].txt) g_free(hg->plan[13].txt);
plan.c:    hg->plan[13].txt=make_plan_txt(hg,hg->plan[13]);
plan.c:    hg->plan[14].type=PLAN_TYPE_FLAT;
plan.c:    hg->plan[14].setup=0;
plan.c:    hg->plan[14].repeat=10;
plan.c:    hg->plan[14].slit_or=FALSE;
plan.c:    hg->plan[14].slit_width=200;
plan.c:    hg->plan[14].slit_length=2000;
plan.c:    hg->plan[14].obj_i=0;;
plan.c:    hg->plan[14].exp=0;
plan.c:    hg->plan[14].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[14].guide=SV_GUIDE;
plan.c:    hg->plan[14].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[14].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[14].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[14].daytime=TRUE;
plan.c:    hg->plan[14].time=TIME_FLAT+
plan.c:      (16/hg->binning[hg->setup[0].binning].x/hg->binning[hg->setup[0].binning].y + hg->binning[hg->setup[0].binning].readout)*10*2;
plan.c:    if(hg->plan[14].comment) g_free(hg->plan[14].comment);
plan.c:    hg->plan[14].comment=NULL;
plan.c:    hg->plan[14].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[14].pa_or=FALSE;
plan.c:    hg->plan[14].pa=0;
plan.c:    hg->plan[14].sv_or=FALSE;
plan.c:    hg->plan[14].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[14].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[14].backup=FALSE;
plan.c:    if(hg->plan[14].txt) g_free(hg->plan[14].txt);
plan.c:    hg->plan[14].txt=make_plan_txt(hg,hg->plan[14]);
plan.c:    hg->plan[15].type=PLAN_TYPE_BIAS;
plan.c:    hg->plan[15].setup=0;
plan.c:    hg->plan[15].repeat=5;
plan.c:    hg->plan[15].slit_or=FALSE;
plan.c:    hg->plan[15].slit_width=200;
plan.c:    hg->plan[15].slit_length=2000;
plan.c:    hg->plan[15].obj_i=0;;
plan.c:    hg->plan[15].exp=0;
plan.c:    hg->plan[15].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[15].guide=SV_GUIDE;
plan.c:    hg->plan[15].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[15].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[15].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[15].daytime=TRUE;
plan.c:    hg->plan[15].time=hg->binning[hg->setup[0].binning].readout*5;
plan.c:    if(hg->plan[15].comment) g_free(hg->plan[15].comment);
plan.c:    hg->plan[15].comment=NULL;
plan.c:    hg->plan[15].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[15].pa_or=FALSE;
plan.c:    hg->plan[15].pa=0;
plan.c:    hg->plan[15].sv_or=FALSE;
plan.c:    hg->plan[15].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[15].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[15].backup=FALSE;
plan.c:    if(hg->plan[15].txt) g_free(hg->plan[15].txt);
plan.c:    hg->plan[15].txt=make_plan_txt(hg,hg->plan[15]);
plan.c:    hg->plan[16].type=PLAN_TYPE_COMMENT;
plan.c:    hg->plan[16].setup=0;
plan.c:    hg->plan[16].repeat=1;
plan.c:    hg->plan[16].slit_or=FALSE;
plan.c:    hg->plan[16].slit_width=200;
plan.c:    hg->plan[16].slit_length=2000;
plan.c:    hg->plan[16].obj_i=0;;
plan.c:    hg->plan[16].exp=0;
plan.c:    hg->plan[16].omode=PLAN_OMODE_FULL;
plan.c:    hg->plan[16].guide=SV_GUIDE;
plan.c:    hg->plan[16].focus_mode=PLAN_FOCUS_SV;
plan.c:    hg->plan[16].cmode=PLAN_CMODE_FULL;
plan.c:    hg->plan[16].i2_pos=PLAN_I2_IN;
plan.c:    hg->plan[16].daytime=FALSE;
plan.c:    hg->plan[16].time=0;
plan.c:    if(hg->plan[16].comment) g_free(hg->plan[16].comment);
plan.c:    hg->plan[16].comment=g_strdup("========== End of Observation ==========");
plan.c:    hg->plan[16].comtype=PLAN_COMMENT_TEXT;
plan.c:    hg->plan[16].pa_or=FALSE;
plan.c:    hg->plan[16].pa=0;
plan.c:    hg->plan[16].sv_or=FALSE;
plan.c:    hg->plan[16].sv_exp=hg->exptime_sv;
plan.c:    hg->plan[16].sv_fil=SV_FILTER_NONE;
plan.c:    hg->plan[16].backup=FALSE;
plan.c:    if(hg->plan[16].txt) g_free(hg->plan[16].txt);
plan.c:    hg->plan[16].txt=make_plan_txt(hg,hg->plan[16]);
plan.c:  hg->i_plan_max=17;
plan.c:  for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
plan.c:    if(hg->plan[i_plan].txt) g_free(hg->plan[i_plan].txt);
plan.c:    hg->plan[i_plan].txt=make_plan_txt(hg,hg->plan[i_plan]);
plan.c:  zonedate.years=hg->fr_year;
plan.c:  zonedate.months=hg->fr_month;
plan.c:  zonedate.days=hg->fr_day;
plan.c:  if(hg->plan_start==PLAN_START_EVENING){
plan.c:    sod=hg->sun.s_set.hours*60*60 + hg->sun.s_set.minutes*60
plan.c:      + hg->plan_delay*60;
plan.c:    sod=hg->plan_start_hour*60*60 + hg->plan_start_min*60;
plan.c:  for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
plan.c:    hg->plan[i_plan].az1=-90.;
plan.c:    hg->plan[i_plan].el1=90.;
plan.c:    hg->plan[i_plan].txt_az=NULL;
plan.c:    hg->plan[i_plan].txt_el=NULL;
plan.c:    if((!hg->plan[i_plan].daytime)&&(!hg->plan[i_plan].backup)){
plan.c:      if(hg->plan[i_plan].time>0){
plan.c:	hg->plan[i_plan].sod=sod;
plan.c:	if(hg->plan[i_plan].type==PLAN_TYPE_OBJ){
plan.c:	  a0s=hg->obj[hg->plan[i_plan].obj_i].ra;
plan.c:	  //d0s=hg->obj[hg->plot_i].dec;
plan.c:	  d0s=hg->obj[hg->plan[i_plan].obj_i].dec;
plan.c:	    if((ohrz.az-hg->plan[i_plan-1].az1)>180){
plan.c:	    else if((ohrz.az-hg->plan[i_plan-1].az1)<-180){
plan.c:	  hg->plan[i_plan].az0=ohrz.az;
plan.c:	  hg->plan[i_plan].el0=ohrz.alt;
plan.c:	  switch(hg->plan[i_plan].omode){
plan.c:	      hg->plan[i_plan].time=hg->sv_acq
plan.c:		+slewtime(hg->plan[i_plan-1].az1, hg->plan[i_plan-1].el1,
plan.c:			  hg->plan[i_plan].az0,hg->plan[i_plan].el0)
plan.c:		+(hg->plan[i_plan].exp+hg->binning[hg->setup[hg->plan[i_plan].setup].binning].readout)*hg->plan[i_plan].repeat;
plan.c:	      hg->plan[i_plan].time=hg->sv_acq
plan.c:		+slewtime(-90, 90,hg->plan[i_plan].az0,hg->plan[i_plan].el0)
plan.c:		+(hg->plan[i_plan].exp+hg->binning[hg->setup[hg->plan[i_plan].setup].binning].readout)*hg->plan[i_plan].repeat;
plan.c:	      hg->plan[i_plan].time=hg->sv_acq
plan.c:		+slewtime(hg->plan[i_plan-1].az1, hg->plan[i_plan-1].el1,
plan.c:			  hg->plan[i_plan].az0,hg->plan[i_plan].el0);
plan.c:	      hg->plan[i_plan].time=hg->sv_acq
plan.c:		+slewtime(-90, 90,hg->plan[i_plan].az0,hg->plan[i_plan].el0);
plan.c:	else if(hg->plan[i_plan].type==PLAN_TYPE_SetAzEl){
plan.c:	    hg->plan[i_plan].az0=hg->plan[i_plan-1].az1;
plan.c:	    hg->plan[i_plan].el0=hg->plan[i_plan-1].el1;
plan.c:	    hg->plan[i_plan].az0=-90.;
plan.c:	    hg->plan[i_plan].el0=+90.;
plan.c:	  hg->plan[i_plan].az1=hg->plan[i_plan].setaz;
plan.c:	  hg->plan[i_plan].el1=hg->plan[i_plan].setel;
plan.c:	  hg->plan[i_plan].time=
plan.c:	    slewtime(hg->plan[i_plan].az0,hg->plan[i_plan].el0,
plan.c:		     hg->plan[i_plan].az1,hg->plan[i_plan].el1);
plan.c:	    hg->plan[i_plan].az0=hg->plan[i_plan-1].az0;
plan.c:	    hg->plan[i_plan].el0=hg->plan[i_plan-1].el0;
plan.c:	    hg->plan[i_plan].az0=-90.;
plan.c:	    hg->plan[i_plan].el0=+90.;
plan.c:	    hg->plan[i_plan].az1=-90.;
plan.c:	    hg->plan[i_plan].el1=+90.;
plan.c:	sod+=(glong)hg->plan[i_plan].time;
plan.c:	if(hg->plan[i_plan].type==PLAN_TYPE_OBJ){
plan.c:	    if((ohrz.az-hg->plan[i_plan].az0)>180){
plan.c:	    else if((ohrz.az-hg->plan[i_plan].az0)<-180){
plan.c:	  hg->plan[i_plan].az1=ohrz.az;
plan.c:	  hg->plan[i_plan].el1=ohrz.alt;
plan.c:	  if(hg->plan[i_plan].txt_az) g_free(hg->plan[i_plan].txt_az);
plan.c:	  if(hg->plan[i_plan].txt_el) g_free(hg->plan[i_plan].txt_el);
plan.c:	  hg->plan[i_plan].txt_az
plan.c:			     hg->plan[i_plan].az0,
plan.c:			     hg->plan[i_plan].az1);
plan.c:	  hg->plan[i_plan].txt_el
plan.c:			     hg->plan[i_plan].el0,
plan.c:			     hg->plan[i_plan].el1);
plan.c:	else if(hg->plan[i_plan].type==PLAN_TYPE_SetAzEl){
plan.c:	    hg->plan[i_plan].az0=hg->plan[i_plan-1].az1;
plan.c:	    hg->plan[i_plan].el0=hg->plan[i_plan-1].el1;
plan.c:	    hg->plan[i_plan].az0=-90.;
plan.c:	    hg->plan[i_plan].el0=90.;
plan.c:	  hg->plan[i_plan].az1=hg->plan[i_plan].setaz;
plan.c:	  hg->plan[i_plan].el1=hg->plan[i_plan].setel;
plan.c:	  hg->plan[i_plan].txt_az
plan.c:			     hg->plan[i_plan].az0,
plan.c:			     hg->plan[i_plan].az1);
plan.c:	  hg->plan[i_plan].txt_el
plan.c:			     hg->plan[i_plan].el0,
plan.c:			     hg->plan[i_plan].el1);
plan.c:	    hg->plan[i_plan].az0=hg->plan[i_plan-1].az0;
plan.c:	    hg->plan[i_plan].el0=hg->plan[i_plan-1].el0;
plan.c:	    hg->plan[i_plan].az1=hg->plan[i_plan-1].az1;
plan.c:	    hg->plan[i_plan].el1=hg->plan[i_plan-1].el1;
plan.c:	    hg->plan[i_plan].az0=-90.;
plan.c:	    hg->plan[i_plan].el0=+90.;
plan.c:	    hg->plan[i_plan].az1=-90.;
plan.c:	    hg->plan[i_plan].el1=+90.;
plan.c:	  if(hg->plan[i_plan].txt_az) g_free(hg->plan[i_plan].txt_az);
plan.c:	  if(hg->plan[i_plan].txt_el) g_free(hg->plan[i_plan].txt_el);
plan.c:	hg->plan[i_plan].sod=0;
plan.c:    else if(hg->plan[i_plan].type==PLAN_TYPE_SetAzEl){
plan.c:	hg->plan[i_plan].az0=hg->plan[i_plan-1].az1;
plan.c:	hg->plan[i_plan].el0=hg->plan[i_plan-1].el1;
plan.c:	hg->plan[i_plan].az0=-90.;
plan.c:	hg->plan[i_plan].el0=90.;
plan.c:      hg->plan[i_plan].az1=hg->plan[i_plan].setaz;
plan.c:      hg->plan[i_plan].el1=hg->plan[i_plan].setel;
plan.c:      hg->plan[i_plan].txt_az
plan.c:			 hg->plan[i_plan].az0,
plan.c:			 hg->plan[i_plan].az1);
plan.c:      hg->plan[i_plan].txt_el
plan.c:			 hg->plan[i_plan].el0,
plan.c:			 hg->plan[i_plan].el1);
plan.c:      hg->plan[i_plan].sod=0;
plan.c:		       COLUMN_PLAN_TOD, hg->plan[i_plan].sod, -1);
plan.c:    if(hg->plan[i_plan].txt_az)
plan.c:			 COLUMN_PLAN_TXT_AZ, hg->plan[i_plan].txt_az, -1);
plan.c:    if(hg->plan[i_plan].txt_az)
plan.c:			 COLUMN_PLAN_TXT_EL, hg->plan[i_plan].txt_el, -1);
plan.c:  if(hg->plan_start==PLAN_START_EVENING){
plan.c:    sod=hg->sun.s_set.hours*60*60 + hg->sun.s_set.minutes*60
plan.c:    sod=hg->plan_start_hour*60*60 + hg->plan_start_min*60;
plan.c:  for(i_plan=0;i_plan<hg->i_plan_max;i_plan++){
plan.c:    if((!hg->plan[i_plan].daytime)&&(!hg->plan[i_plan].backup)){
plan.c:      if(hg->plan[i_plan].time>0){
plan.c:	hg->plan[i_plan].sod=sod;
plan.c:	sod+=(glong)hg->plan[i_plan].time;
plan.c:	hg->plan[i_plan].sod=0;
plan.c:      hg->plan[i_plan].sod=0;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:    hg->plot_i_plan=i;
plan.c:  //hg->plot_target=PLOT_PLAN;
plan.c:  GtkTreeModel *model = gtk_tree_view_get_model (GTK_TREE_VIEW(hg->plan_tree));
plan.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->plan_tree));
plan.c:      hg->plot_i_plan=i;
plan.c:  if(flagPlot&&(hg->plot_all==PLOT_ALL_PLAN)){
plan.c:    //hg->plot_target=PLOT_PLAN;
plan.c:    hg->plot_output=PLOT_OUTPUT_WINDOW;
plan.c:    draw_plot_cairo(hg->plot_dw,NULL,
plan.c:    if((hg->skymon_mode==SKYMON_PLAN_OBJ)||(hg->skymon_mode==SKYMON_PLAN_TIME)){
plan.c:      if((hg->plan[hg->plot_i_plan].type==PLAN_TYPE_OBJ)&&
plan.c:	 (!hg->plan[hg->plot_i_plan].backup)){
plan.c:	hg->skymon_year=hg->fr_year;
plan.c:	hg->skymon_month=hg->fr_month;
plan.c:	hg->skymon_day=hg->fr_day;
plan.c:	hg->skymon_hour=hg->plan[hg->plot_i_plan].sod/60./60.;
plan.c:	hg->skymon_min=(hg->plan[hg->plot_i_plan].sod-hg->skymon_hour*60.*60.)/60.;
plan.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
plan.c:      gdk_window_raise(hg->skymon_main->window);
plan.c:    switch(hg->plan[i_plan].type){
plan.c:  tmp_plan=hg->plan[i_plan];
plan.c:    if(hg->plan[i_plan].comtype==PLAN_COMMENT_TEXT) iter_set=iter;
plan.c:    if(hg->plan[i_plan].comtype==PLAN_COMMENT_SUNSET) iter_set=iter;
plan.c:    if(hg->plan[i_plan].comtype==PLAN_COMMENT_SUNRISE) iter_set=iter;
plan.c:  if(hg->plan[i_plan].comment){
plan.c:		       hg->plan[i_plan].comment);
plan.c:  tmp_time=hg->plan[i_plan].time/60.;
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].time/60.,
plan.c:    hg->plan[i_plan]=tmp_plan;
plan.c:    hg->plan[i_plan].time=tmp_time*60;
plan.c:    hg->plan[i_plan].txt=make_plan_txt(hg, hg->plan[i_plan]);
plan.c:  tmp_plan=hg->plan[i_plan];
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].repeat,
plan.c:      if(hg->setup[i_use].use){
plan.c:	if(hg->setup[i_use].setup<0){
plan.c:		  -hg->setup[i_use].setup,
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:		  setups[hg->setup[i_use].setup].initial,
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:      else if (hg->plan[i_plan].setup==i_use){
plan.c:			       hg->plan[i_plan].slit_or);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].slit_width,
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].slit_length,
plan.c:			       hg->plan[i_plan].daytime);
plan.c:      + (16/hg->binning[hg->setup[tmp_plan.setup].binning].x/hg->binning[hg->setup[tmp_plan.setup].binning].y
plan.c:	 + hg->binning[hg->setup[tmp_plan.setup].binning].readout)
plan.c:    hg->plan[i_plan]=tmp_plan;
plan.c:    hg->plan[i_plan].txt=make_plan_txt(hg, hg->plan[i_plan]);
plan.c:  tmp_plan=hg->plan[i_plan];
plan.c:      if(hg->setup[i_use].use){
plan.c:	if(hg->setup[i_use].setup<0){
plan.c:		  i_use+1,-hg->setup[i_use].setup,
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:		  i_use+1,setups[hg->setup[i_use].setup].initial,
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:      else if (hg->plan[i_plan].setup==i_use){
plan.c:			       hg->plan[i_plan].slit_or);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].slit_width,
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].slit_length,
plan.c:			       hg->plan[i_plan].daytime);
plan.c:      + 20/hg->binning[hg->setup[tmp_plan.setup].binning].x/hg->binning[hg->setup[tmp_plan.setup].binning].y
plan.c:      + hg->binning[hg->setup[tmp_plan.setup].binning].readout;
plan.c:    hg->plan[i_plan]=tmp_plan;
plan.c:    hg->plan[i_plan].txt=make_plan_txt(hg, hg->plan[i_plan]);
plan.c:  tmp_plan=hg->plan[i_plan];
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].repeat,
plan.c:      if(hg->setup[i_use].use){
plan.c:	if(hg->setup[i_use].setup<0){
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:      else if (hg->plan[i_plan].setup==i_use){
plan.c:			       hg->plan[i_plan].daytime);
plan.c:    tmp_plan.time=hg->binning[hg->setup[tmp_plan.setup].binning].readout*tmp_plan.repeat;
plan.c:    hg->plan[i_plan]=tmp_plan;
plan.c:    hg->plan[i_plan].txt=make_plan_txt(hg, hg->plan[i_plan]);
plan.c:  tmp_plan=hg->plan[i_plan];
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].setaz,
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].setel,
plan.c:			       hg->plan[i_plan].daytime);
plan.c:    tmp_plan.time=slewtime(hg->plan[i_plan-1].az1,hg->plan[i_plan-1].el1,
plan.c:			   hg->plan[i_plan].setaz,hg->plan[i_plan].setel);
plan.c:    hg->plan[i_plan]=tmp_plan;
plan.c:    hg->plan[i_plan].txt=make_plan_txt(hg, hg->plan[i_plan]);
plan.c:  tmp_plan=hg->plan[i_plan];
plan.c:    if(hg->plan[i_plan].i2_pos==PLAN_I2_IN) iter_set=iter;
plan.c:    if(hg->plan[i_plan].i2_pos==PLAN_I2_OUT) iter_set=iter;
plan.c:			       hg->plan[i_plan].daytime);
plan.c:    hg->plan[i_plan]=tmp_plan;
plan.c:    hg->plan[i_plan].txt=make_plan_txt(hg, hg->plan[i_plan]);
plan.c:  tmp_plan=hg->plan[i_plan];
plan.c:    if(hg->plan[i_plan].focus_mode==PLAN_FOCUS_SV) iter_set=iter;
plan.c:    if(hg->plan[i_plan].focus_mode==PLAN_FOCUS_AG) iter_set=iter;
plan.c:    hg->plan[i_plan]=tmp_plan;
plan.c:    hg->plan[i_plan].txt=make_plan_txt(hg, hg->plan[i_plan]);
plan.c:  tmp_plan=hg->plan[i_plan];
plan.c:      if(hg->setup[i_use].use){
plan.c:	if(hg->setup[i_use].setup<0){
plan.c:		  i_use+1,-hg->setup[i_use].setup,
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:		  setups[hg->setup[i_use].setup].initial,
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:      else if (hg->plan[i_plan].setup==i_use){
plan.c:    if(hg->plan[i_plan].cmode==PLAN_CMODE_FULL) iter_set=iter;
plan.c:    if(hg->plan[i_plan].cmode==PLAN_CMODE_EASY) iter_set=iter;
plan.c:    if(hg->plan[i_plan].cmode==PLAN_CMODE_SLIT) iter_set=iter;
plan.c:			       hg->plan[i_plan].slit_or);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].slit_width,
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].slit_length,
plan.c:			       hg->plan[i_plan].daytime);
plan.c:      tmp_plan.slit_width=hg->setup[tmp_plan.setup].slit_width;
plan.c:      tmp_plan.slit_length=hg->setup[tmp_plan.setup].slit_length;
plan.c:    hg->plan[i_plan]=tmp_plan;
plan.c:    hg->plan[i_plan].txt=make_plan_txt(hg, hg->plan[i_plan]);
plan.c:  tmp_plan=hg->plan[i_plan];
plan.c:    for(i_list=0;i_list<hg->i_max;i_list++){
plan.c:      gtk_list_store_set(store, &iter, 0, hg->obj[i_list].name,
plan.c:    gtk_combo_box_set_active(GTK_COMBO_BOX(combo),hg->plan[i_plan].obj_i);
plan.c:    if(hg->plan[i_plan].omode==PLAN_OMODE_FULL) iter_set=iter;
plan.c:    if(hg->plan[i_plan].omode==PLAN_OMODE_SET) iter_set=iter;
plan.c:    if(hg->plan[i_plan].omode==PLAN_OMODE_GET) iter_set=iter;
plan.c:  sprintf(tmp,"%d",hg->plan[i_plan].exp);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].repeat,
plan.c:      if(hg->setup[i_use].use){
plan.c:	if(hg->setup[i_use].setup<0){
plan.c:		  i_use+1,-hg->setup[i_use].setup,
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:		  i_use+1,setups[hg->setup[i_use].setup].initial,
plan.c:		  hg->binning[hg->setup[i_use].binning].x,
plan.c:		  hg->binning[hg->setup[i_use].binning].y);
plan.c:      else if (hg->plan[i_plan].setup==i_use){
plan.c:			       hg->plan[i_plan].slit_or);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].slit_width,
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].slit_length,
plan.c:    if(hg->plan[i_plan].guide==NO_GUIDE) iter_set=iter;
plan.c:    if(hg->plan[i_plan].guide==AG_GUIDE) iter_set=iter;
plan.c:    if(hg->plan[i_plan].guide==SV_GUIDE) iter_set=iter;
plan.c:    if(hg->plan[i_plan].guide==SVSAFE_GUIDE) iter_set=iter;
plan.c:			       hg->plan[i_plan].pa_or);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].pa,
plan.c:			       hg->plan[i_plan].sv_or);
plan.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->plan[i_plan].sv_exp,
plan.c:    if(hg->plan[i_plan].sv_fil==SV_FILTER_NONE) iter_set=iter;
plan.c:    if(hg->plan[i_plan].sv_fil==SV_FILTER_R) iter_set=iter;
plan.c:    if(hg->plan[i_plan].sv_fil==SV_FILTER_BP530) iter_set=iter;
plan.c:    if(hg->plan[i_plan].sv_fil==SV_FILTER_ND2) iter_set=iter;
plan.c:			       hg->plan[i_plan].backup);
plan.c:      //	+(tmp_plan.exp+hg->binning[hg->setup[tmp_plan.setup].binning].readout)*tmp_plan.repeat;
plan.c:      tmp_plan.time=hg->sv_acq+slewtime(hg->plan[i_plan-1].az1,hg->plan[i_plan-1].el1,hg->plan[i_plan].az0,hg->plan[i_plan].el0)
plan.c:	+(tmp_plan.exp+hg->binning[hg->setup[tmp_plan.setup].binning].readout)*tmp_plan.repeat;
plan.c:      tmp_plan.time=hg->sv_acq+slewtime(hg->plan[i_plan-1].az1,hg->plan[i_plan-1].el1,hg->plan[i_plan].az0,hg->plan[i_plan].el0);
plan.c:      tmp_plan.time=(tmp_plan.exp+hg->binning[hg->setup[tmp_plan.setup].binning].readout)*tmp_plan.repeat;
plan.c:    hg->plan[i_plan]=tmp_plan;
plan.c:    hg->plan[i_plan].txt=make_plan_txt(hg, hg->plan[i_plan]);
skymon.c:  hg->skymon_mode=SKYMON_CUR;
skymon.c:  hg->skymon_main = gtk_window_new(GTK_WINDOW_TOPLEVEL);
skymon.c:  gtk_window_set_title(GTK_WINDOW(hg->skymon_main), "HOE : Sky Monitor");
skymon.c:  //gtk_widget_set_usize(hg->skymon_main, SKYMON_SIZE, SKYMON_SIZE);
skymon.c:  my_signal_connect(hg->skymon_main,
skymon.c:  gtk_widget_set_app_paintable(hg->skymon_main, TRUE);
skymon.c:  gtk_container_add (GTK_CONTAINER (hg->skymon_main), vbox);
skymon.c:  hg->skymon_frame_mode = gtk_frame_new ("Mode");
skymon.c:  gtk_box_pack_start(GTK_BOX(hbox), hg->skymon_frame_mode, FALSE, FALSE, 0);
skymon.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->skymon_frame_mode), 5);
skymon.c:    if(hg->skymon_mode==SKYMON_CUR) iter_set=iter;
skymon.c:    if(hg->skymon_mode==SKYMON_SET) iter_set=iter;
skymon.c:    if(hg->skymon_mode==SKYMON_PLAN_OBJ) iter_set=iter;
skymon.c:    if(hg->skymon_mode==SKYMON_PLAN_TIME) iter_set=iter;
skymon.c:    gtk_container_add (GTK_CONTAINER (hg->skymon_frame_mode), combo);
skymon.c:  hg->skymon_frame_date = gtk_frame_new ("Date");
skymon.c:  gtk_box_pack_start(GTK_BOX(hbox), hg->skymon_frame_date, FALSE, FALSE, 0);
skymon.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->skymon_frame_date), 5);
skymon.c:  gtk_container_add (GTK_CONTAINER (hg->skymon_frame_date), hbox1);
skymon.c:  hg->skymon_year=hg->fr_year;
skymon.c:  hg->skymon_month=hg->fr_month;
skymon.c:  hg->skymon_day=hg->fr_day;
skymon.c:  hg->skymon_adj_year = (GtkAdjustment *)gtk_adjustment_new(hg->skymon_year,
skymon.c:							    hg->skymon_year-10, hg->fr_year+10,
skymon.c:  spinner =  gtk_spin_button_new (hg->skymon_adj_year, 0, 0);
skymon.c:  my_signal_connect (hg->skymon_adj_year, "value_changed",
skymon.c:		     &hg->skymon_year);
skymon.c:  hg->skymon_adj_month = (GtkAdjustment *)gtk_adjustment_new(hg->skymon_month,
skymon.c:  spinner =  gtk_spin_button_new (hg->skymon_adj_month, 0, 0);
skymon.c:  my_signal_connect (hg->skymon_adj_month, "value_changed",
skymon.c:		     &hg->skymon_month);
skymon.c:  hg->skymon_adj_day = (GtkAdjustment *)gtk_adjustment_new(hg->skymon_day,
skymon.c:  spinner =  gtk_spin_button_new (hg->skymon_adj_day, 0, 0);
skymon.c:  my_signal_connect (hg->skymon_adj_day, "value_changed",
skymon.c:		     &hg->skymon_day);
skymon.c:  hg->skymon_frame_time = gtk_frame_new ("HST");
skymon.c:  gtk_box_pack_start(GTK_BOX(hbox), hg->skymon_frame_time, FALSE, FALSE, 0);
skymon.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->skymon_frame_time), 5);
skymon.c:  gtk_container_add (GTK_CONTAINER (hg->skymon_frame_time), hbox1);
skymon.c:  hg->skymon_adj_hour = (GtkAdjustment *)gtk_adjustment_new(hg->skymon_hour,
skymon.c:  spinner =  gtk_spin_button_new (hg->skymon_adj_hour, 0, 0);
skymon.c:  my_signal_connect (hg->skymon_adj_hour, "value_changed",
skymon.c:		     &hg->skymon_hour);
skymon.c:  hg->skymon_adj_min = (GtkAdjustment *)gtk_adjustment_new(hg->skymon_min,
skymon.c:  spinner =  gtk_spin_button_new (hg->skymon_adj_min, 0, 0);
skymon.c:  my_signal_connect (hg->skymon_adj_min, "value_changed",
skymon.c:		     &hg->skymon_min);
skymon.c:  hg->skymon_button_set=gtkut_button_new_from_stock(NULL, GTK_STOCK_OK);
skymon.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->skymon_button_set), 0);
skymon.c:  gtk_box_pack_start(GTK_BOX(hbox1),hg->skymon_button_set,FALSE,FALSE,0);
skymon.c:  my_signal_connect(hg->skymon_button_set,"pressed",
skymon.c:  hg->skymon_button_even=gtkut_button_new_from_stock(NULL, GTK_STOCK_MEDIA_PREVIOUS);
skymon.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->skymon_button_even), 0);
skymon.c:  gtk_box_pack_start(GTK_BOX(hbox1),hg->skymon_button_even,FALSE,FALSE,0);
skymon.c:  my_signal_connect(hg->skymon_button_even,"pressed",
skymon.c:  hg->skymon_button_rev=gtkut_toggle_button_new_from_stock(NULL, GTK_STOCK_MEDIA_REWIND);
skymon.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->skymon_button_rev), 0);
skymon.c:  gtk_box_pack_start(GTK_BOX(hbox1),hg->skymon_button_rev,FALSE,FALSE,0);
skymon.c:  my_signal_connect(hg->skymon_button_rev,"toggled",
skymon.c:  hg->skymon_button_fwd=gtkut_toggle_button_new_from_stock(NULL, GTK_STOCK_MEDIA_FORWARD);
skymon.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->skymon_button_fwd), 0);
skymon.c:  gtk_box_pack_start(GTK_BOX(hbox1),hg->skymon_button_fwd,FALSE,FALSE,0);
skymon.c:  my_signal_connect(hg->skymon_button_fwd,"toggled",
skymon.c:  hg->skymon_button_morn=gtkut_button_new_from_stock(NULL, GTK_STOCK_MEDIA_NEXT);
skymon.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->skymon_button_morn), 0);
skymon.c:  gtk_box_pack_start(GTK_BOX(hbox1),hg->skymon_button_morn,FALSE,FALSE,0);
skymon.c:  my_signal_connect(hg->skymon_button_morn,"pressed",
skymon.c:  gtk_widget_set_sensitive(hg->skymon_frame_date,FALSE);
skymon.c:  gtk_widget_set_sensitive(hg->skymon_frame_time,FALSE);
skymon.c:  gtk_widget_set_sensitive(hg->skymon_button_fwd,FALSE);
skymon.c:  gtk_widget_set_sensitive(hg->skymon_button_rev,FALSE);
skymon.c:  gtk_widget_set_sensitive(hg->skymon_button_morn,FALSE);
skymon.c:  gtk_widget_set_sensitive(hg->skymon_button_even,FALSE);
skymon.c:  hg->skymon_frame_sz = gtk_frame_new ("Sz.");
skymon.c:  gtk_box_pack_start(GTK_BOX(hbox), hg->skymon_frame_sz, FALSE, FALSE, 0);
skymon.c:  gtk_container_set_border_width (GTK_CONTAINER (hg->skymon_frame_sz), 5);
skymon.c:  gtk_container_add (GTK_CONTAINER (hg->skymon_frame_sz), hbox1);
skymon.c:  adj = (GtkAdjustment *)gtk_adjustment_new(hg->skymon_objsz,
skymon.c:		     &hg->skymon_objsz);
skymon.c:  hg->skymon_dw = gtk_drawing_area_new();
skymon.c:  gtk_widget_set_size_request (hg->skymon_dw, SKYMON_SIZE, SKYMON_SIZE);
skymon.c:  gtk_box_pack_start(GTK_BOX(vbox), hg->skymon_dw, TRUE, TRUE, 0);
skymon.c:  gtk_widget_set_app_paintable(hg->skymon_dw, TRUE);
skymon.c:  gtk_widget_show(hg->skymon_dw);
skymon.c:  my_signal_connect(hg->skymon_dw, 
skymon.c:  hg->skymon_timer=g_timeout_add(AZEL_INTERVAL, 
skymon.c:  gtk_widget_show_all(hg->skymon_main);
skymon.c:  if(gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(hg->skymon_button_fwd))){
skymon.c:    gtk_timeout_remove(hg->skymon_timer);
skymon.c:  else if(gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(hg->skymon_button_rev))){
skymon.c:    gtk_timeout_remove(hg->skymon_timer);
skymon.c:  if(hg->skymon_output==SKYMON_OUTPUT_PDF){
skymon.c:    surface = cairo_pdf_surface_create(hg->filename_pdf, width, height);
skymon.c:      gtk_window_get_size(GTK_WINDOW(hg->skymon_main), &width, &height);
skymon.c:  if(hg->skymon_output==SKYMON_OUTPUT_PDF){
skymon.c:    switch(hg->skymon_mode){
skymon.c:      year=hg->skymon_year;
skymon.c:      month=hg->skymon_month;
skymon.c:      day=hg->skymon_day;
skymon.c:      hour=hg->skymon_hour+(double)(TIMEZONE_SUBARU-hg->timezone);
skymon.c:      min=hg->skymon_min;
skymon.c:      hour=tmpt->tm_hour+(double)(TIMEZONE_SUBARU-hg->timezone);
skymon.c:      year=hg->fr_year;
skymon.c:      month=hg->fr_month;
skymon.c:      day=hg->fr_day;
skymon.c:    if((hg->skymon_mode==SKYMON_SET)||(hg->skymon_mode==SKYMON_CUR)){
skymon.c:      if(hg->skymon_mode==SKYMON_SET){
skymon.c:	sprintf(tmp,"LST=%02d:%02d",hg->skymon_lst_hour,hg->skymon_lst_min);
skymon.c:	sprintf(tmp,"LST=%02d:%02d",hg->lst_hour,hg->lst_min);
skymon.c:    if(hg->skymon_mode==SKYMON_CUR){
skymon.c:	      hg->sun.c_set.hours,hg->sun.c_set.minutes);
skymon.c:	      hg->sun.s_set.hours,hg->sun.s_set.minutes);
skymon.c:    if(hg->skymon_mode==SKYMON_CUR){
skymon.c:	      hg->sun.c_rise.hours,hg->sun.c_rise.minutes);
skymon.c:	      hg->sun.s_rise.hours,hg->sun.s_rise.minutes);
skymon.c:    if((hg->skymon_mode==SKYMON_SET)||(hg->skymon_mode==SKYMON_CUR)){
skymon.c:      if(hg->skymon_mode==SKYMON_SET){
skymon.c:		hg->moon.s_ra.hours,hg->moon.s_ra.minutes,hg->moon.s_ra.seconds,
skymon.c:		hg->moon.s_dec.neg==1 ? 
skymon.c:	        -hg->moon.s_dec.degrees : hg->moon.s_dec.degrees,
skymon.c:		hg->moon.s_dec.minutes,hg->moon.s_dec.seconds);
skymon.c:		hg->moon.c_ra.hours,hg->moon.c_ra.minutes,hg->moon.c_ra.seconds,
skymon.c:		hg->moon.c_dec.neg==1 ? 
skymon.c:	        -hg->moon.c_dec.degrees : hg->moon.c_dec.degrees,
skymon.c:		hg->moon.c_dec.minutes,hg->moon.c_dec.seconds);
skymon.c:    if(hg->skymon_mode==SKYMON_CUR){
skymon.c:      sprintf(tmp,"Illum=%4.1f%%",hg->moon.c_disk*100);
skymon.c:      sprintf(tmp,"Illum=%4.1f%%",hg->moon.s_disk*100);
skymon.c:    if(hg->skymon_mode==SKYMON_CUR){
skymon.c:	      hg->moon.c_set.hours,hg->moon.c_set.minutes);
skymon.c:	      hg->moon.s_set.hours,hg->moon.s_set.minutes);
skymon.c:    if(hg->skymon_mode==SKYMON_CUR){
skymon.c:	      hg->moon.c_rise.hours,hg->moon.c_rise.minutes);
skymon.c:	      hg->moon.s_rise.hours,hg->moon.s_rise.minutes);
skymon.c:    if(hg->skymon_mode==SKYMON_SET){
skymon.c:    else if ((hg->skymon_mode==SKYMON_PLAN_OBJ)||(hg->skymon_mode==SKYMON_PLAN_TIME)){
skymon.c:    if(hg->skymon_mode==SKYMON_SET){
skymon.c:		(hour-24)*60+min-hg->sun.s_set.hours*60-hg->sun.s_set.minutes :
skymon.c:		hour*60+min-hg->sun.s_set.hours*60-hg->sun.s_set.minutes);
skymon.c:	       hg->sun.s_rise.hours*60+hg->sun.s_rise.minutes-(hour-24)*60-min :
skymon.c:	       hg->sun.s_rise.hours*60+hg->sun.s_rise.minutes-(hour)*60-min);
skymon.c:    else if(hg->skymon_mode==SKYMON_CUR){
skymon.c:		(hour-24)*60+min-hg->sun.c_set.hours*60-hg->sun.c_set.minutes :
skymon.c:		hour*60+min-hg->sun.c_set.hours*60-hg->sun.c_set.minutes);
skymon.c:	       hg->sun.c_rise.hours*60+hg->sun.c_rise.minutes-(hour-24)*60-min :
skymon.c:	       hg->sun.c_rise.hours*60+hg->sun.c_rise.minutes-(hour)*60-min);
skymon.c:    if((hg->skymon_mode==SKYMON_SET)||(hg->skymon_mode==SKYMON_CUR)){
skymon.c:  if(hg->skymon_mode==SKYMON_SET){
skymon.c:    if(hg->moon.s_el>0)
skymon.c:		    hg->moon.s_az,hg->moon.s_el,hg->moon.s_disk);
skymon.c:  else if(hg->skymon_mode==SKYMON_CUR){
skymon.c:    if(hg->moon.c_el>0)
skymon.c:		    hg->moon.c_az,hg->moon.c_el,hg->moon.c_disk);
skymon.c:  switch(hg->skymon_mode){
skymon.c:    for(i_list=0;i_list<hg->i_max;i_list++){
skymon.c:      if(hg->obj[i_list].s_el>0){
skymon.c:			hg->obj[i_list].s_az,hg->obj[i_list].s_el,
skymon.c:			hg->obj[i_list].name, hg->obj[i_list].check_sm,hg->skymon_objsz);
skymon.c:    for(i_list=0;i_list<hg->i_max;i_list++){
skymon.c:      if(hg->obj[i_list].s_el>0){
skymon.c:	  hg->obj[i_list].s_az,hg->obj[i_list].s_el,
skymon.c:	  hg->obj[i_list].name, hg->obj[i_list].check_sm);
skymon.c:			 hg->obj[i_list].s_az,hg->obj[i_list].s_el,
skymon.c:			 hg->obj[i_list].name, hg->obj[i_list].check_sm);
skymon.c:    for(i_list=0;i_list<hg->i_max;i_list++){
skymon.c:      if(hg->obj[i_list].s_el>0){
skymon.c:			 hg->obj[i_list].s_az,hg->obj[i_list].s_el,
skymon.c:			 hg->obj[i_list].name, hg->obj[i_list].check_sm,hg->skymon_objsz);
skymon.c:    for(i_list=0;i_list<hg->i_max;i_list++){
skymon.c:      if(hg->obj[i_list].c_el>0){
skymon.c:			hg->obj[i_list].c_az,hg->obj[i_list].c_el,
skymon.c:			hg->obj[i_list].name, hg->obj[i_list].check_sm, hg->skymon_objsz);
skymon.c:    for(i_list=0;i_list<hg->i_max;i_list++){
skymon.c:      if(hg->obj[i_list].c_el>0){
skymon.c:			 hg->obj[i_list].c_az,hg->obj[i_list].c_el,
skymon.c:			 hg->obj[i_list].name, hg->obj[i_list].check_sm);
skymon.c:    for(i_list=0;i_list<hg->i_max;i_list++){
skymon.c:      if(hg->obj[i_list].c_el>0){
skymon.c:			 hg->obj[i_list].c_az,hg->obj[i_list].c_el,
skymon.c:			 hg->obj[i_list].name, hg->obj[i_list].check_sm, hg->skymon_objsz);
skymon.c:      if(hg->i_pp_moon_max>0){
skymon.c:	el_r = r * (90. - hg->moon.p_el[0])/90.;
skymon.c:	x_old = width/2. + el_r*cos(M_PI/180.*(90-hg->moon.p_az[0]));
skymon.c:	y_old = height/2. + el_r*sin(M_PI/180.*(90-hg->moon.p_az[0]));
skymon.c:      for(i_pp=1;i_pp<hg->i_pp_moon_max;i_pp++){
skymon.c:	el_r = r * (90. - hg->moon.p_el[i_pp])/90.;
skymon.c:	x = width/2. + el_r*cos(M_PI/180.*(90-hg->moon.p_az[i_pp]));
skymon.c:	y = height/2. + el_r*sin(M_PI/180.*(90-hg->moon.p_az[i_pp]));
skymon.c:	if((hg->moon.p_el[i_pp]>0)&&(hg->moon.p_el[i_pp-1]>0)){
skymon.c:      if((hg->plan[hg->plot_i_plan].type==PLAN_TYPE_OBJ)&&
skymon.c:	 (!hg->plan[hg->plot_i_plan].backup)){
skymon.c:	if(hg->moon.s_el>0)
skymon.c:			hg->moon.s_az,hg->moon.s_el,hg->moon.s_disk);
skymon.c:      if(hg->i_pp_max>0){
skymon.c:	el_r = r * (90. - hg->pp[0].el)/90.;
skymon.c:	x = width/2. + el_r*cos(M_PI/180.*(90-hg->pp[0].az));
skymon.c:	y = height/2. + el_r*sin(M_PI/180.*(90-hg->pp[0].az));
skymon.c:      for(i_pp=0;i_pp<hg->i_pp_max;i_pp++){
skymon.c:	el_r = r * (90. - hg->pp[i_pp].el)/90.;
skymon.c:	x = width/2. + el_r*cos(M_PI/180.*(90-hg->pp[i_pp].az));
skymon.c:	y = height/2. + el_r*sin(M_PI/180.*(90-hg->pp[i_pp].az));
skymon.c:	if(hg->pp[i_pp].start){
skymon.c:	else if(hg->pp[i_pp].i_plan==hg->plot_i_plan){
skymon.c:	if(hg->pp[i_pp].start){
skymon.c:	  x0 = width/2. + el_r0*cos(M_PI/180.*(90-hg->pp[i_pp].az));
skymon.c:	  y0 = height/2. + el_r0*sin(M_PI/180.*(90-hg->pp[i_pp].az));
skymon.c:	  cairo_rotate(cr,(-hg->pp[i_pp].az+90)*M_PI/180.);
skymon.c:	  if(hg->pp[i_pp].i_plan==hg->plot_i_plan){
skymon.c:	    cairo_set_font_size (cr, (gdouble)hg->skymon_objsz*1.2);
skymon.c:	    cairo_set_font_size (cr, (gdouble)hg->skymon_objsz);
skymon.c:	  if(hg->skymon_mode==SKYMON_PLAN_OBJ){
skymon.c:	    cairo_text_extents (cr, hg->obj[hg->plan[hg->pp[i_pp].i_plan].obj_i].name, &extents);
skymon.c:	    str=get_txt_tod(hg->plan[hg->pp[i_pp].i_plan].sod);
skymon.c:	  if(hg->skymon_mode==SKYMON_PLAN_OBJ){
skymon.c:	    cairo_show_text(cr, hg->obj[hg->plan[hg->pp[i_pp].i_plan].obj_i].name);
skymon.c:  if(hg->skymon_output==SKYMON_OUTPUT_PDF){
skymon.c:  if(hg->skymon_output==SKYMON_OUTPUT_WINDOW){
skymon.c:    hg->skymon_mode=n;
skymon.c:  switch(hg->skymon_mode){
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_date,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_time,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_fwd,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_rev,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,TRUE);
skymon.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:      gdk_window_raise(hg->skymon_main->window);
skymon.c:    gtk_timeout_remove(hg->skymon_timer);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_date,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_time,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_fwd,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_rev,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,FALSE);
skymon.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:      gdk_window_raise(hg->skymon_main->window);
skymon.c:    hg->skymon_timer=g_timeout_add(AZEL_INTERVAL, 
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_date,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_time,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_fwd,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_rev,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,FALSE);
skymon.c:    gtk_timeout_remove(hg->skymon_timer);
skymon.c:      if((hg->plan[hg->plot_i_plan].type==PLAN_TYPE_OBJ)&&
skymon.c:	 (!hg->plan[hg->plot_i_plan].backup)){
skymon.c:	hg->skymon_year=hg->fr_year;
skymon.c:	hg->skymon_month=hg->fr_month;
skymon.c:	hg->skymon_day=hg->fr_day;
skymon.c:	hg->skymon_hour=hg->plan[hg->plot_i_plan].sod/60./60.;
skymon.c:	hg->skymon_min=(hg->plan[hg->plot_i_plan].sod-hg->skymon_hour*60.*60.)/60.;
skymon.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:      gdk_window_raise(hg->skymon_main->window);
skymon.c:  hg->skymon_output=SKYMON_OUTPUT_WINDOW;
skymon.c:  switch(hg->skymon_mode){
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_date,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_time,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_fwd,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_rev,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,TRUE);
skymon.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:      gdk_window_raise(hg->skymon_main->window);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_date,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_time,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_fwd,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_rev,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,FALSE);
skymon.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:      gdk_window_raise(hg->skymon_main->window);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_date,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_time,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_fwd,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_rev,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,FALSE);
skymon.c:      if((hg->plan[hg->plot_i_plan].type==PLAN_TYPE_OBJ)&&
skymon.c:	 (!hg->plan[hg->plot_i_plan].backup)){
skymon.c:	hg->skymon_year=hg->fr_year;
skymon.c:	hg->skymon_month=hg->fr_month;
skymon.c:	hg->skymon_day=hg->fr_day;
skymon.c:	hg->skymon_hour=hg->plan[hg->plot_i_plan].sod/60./60.;
skymon.c:	hg->skymon_min=(hg->plan[hg->plot_i_plan].sod-hg->skymon_hour*60.*60.)/60.;
skymon.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:      gdk_window_raise(hg->skymon_main->window);
skymon.c:    if(hg->skymon_mode==SKYMON_SET){
skymon.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:      gdk_window_raise(hg->skymon_main->window);
skymon.c:      gtk_adjustment_set_value(hg->skymon_adj_year, (gdouble)hg->skymon_year);
skymon.c:      gtk_adjustment_set_value(hg->skymon_adj_month,(gdouble)hg->skymon_month);
skymon.c:      gtk_adjustment_set_value(hg->skymon_adj_day,  (gdouble)hg->skymon_day);
skymon.c:      gtk_adjustment_set_value(hg->skymon_adj_hour, (gdouble)hg->skymon_hour);
skymon.c:      gtk_adjustment_set_value(hg->skymon_adj_min,  (gdouble)hg->skymon_min);
skymon.c:    if(hg->skymon_mode==SKYMON_SET){
skymon.c:      hg->skymon_hour=hg->sun.s_rise.hours+24;
skymon.c:      hg->skymon_min=hg->sun.s_rise.minutes-SUNRISE_OFFSET;
skymon.c:      if(hg->skymon_min<0){
skymon.c:	hg->skymon_min+=60;
skymon.c:	hg->skymon_hour-=1;
skymon.c:      gtk_adjustment_set_value(hg->skymon_adj_hour, (gdouble)hg->skymon_hour);
skymon.c:      gtk_adjustment_set_value(hg->skymon_adj_min,  (gdouble)hg->skymon_min);
skymon.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:    if(hg->skymon_mode==SKYMON_SET){
skymon.c:      hg->skymon_hour=hg->sun.s_set.hours;
skymon.c:      hg->skymon_min=hg->sun.s_set.minutes+SUNSET_OFFSET;
skymon.c:      if(hg->skymon_min>=60){
skymon.c:	hg->skymon_min-=60;
skymon.c:	hg->skymon_hour+=1;
skymon.c:      gtk_adjustment_set_value(hg->skymon_adj_hour, (gdouble)hg->skymon_hour);
skymon.c:      gtk_adjustment_set_value(hg->skymon_adj_min,  (gdouble)hg->skymon_min);
skymon.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_mode,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_set,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_rev,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,FALSE);
skymon.c:    hg->skymon_timer=g_timeout_add(SKYMON_INTERVAL, 
skymon.c:    gtk_timeout_remove(hg->skymon_timer);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_mode,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_set,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_rev,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,TRUE);
skymon.c:  hg->skymon_min+=5;
skymon.c:  if(hg->skymon_min>=60){
skymon.c:    hg->skymon_min-=60;
skymon.c:    hg->skymon_hour+=1;
skymon.c:  gtk_adjustment_set_value(hg->skymon_adj_hour, (gdouble)hg->skymon_hour);
skymon.c:  gtk_adjustment_set_value(hg->skymon_adj_min,  (gdouble)hg->skymon_min);
skymon.c:  if((hg->skymon_hour==7)||(hg->skymon_hour==7+24)){
skymon.c:    gtk_timeout_remove(hg->skymon_timer);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_mode,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_set,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_rev,TRUE);
skymon.c:    gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(hg->skymon_button_fwd),FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,TRUE);
skymon.c:    draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_mode,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_set,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_fwd,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,FALSE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,FALSE);
skymon.c:    hg->skymon_timer=g_timeout_add(SKYMON_INTERVAL, 
skymon.c:    gtk_timeout_remove(hg->skymon_timer);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_mode,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_set,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_fwd,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,TRUE);
skymon.c:  hg->skymon_min-=5;
skymon.c:  if(hg->skymon_min<0){
skymon.c:    hg->skymon_min+=60;
skymon.c:    hg->skymon_hour-=1;
skymon.c:  gtk_adjustment_set_value(hg->skymon_adj_hour, (gdouble)hg->skymon_hour);
skymon.c:  gtk_adjustment_set_value(hg->skymon_adj_min,  (gdouble)hg->skymon_min);
skymon.c:  if((hg->skymon_hour==18)||(hg->skymon_hour==18-24)){
skymon.c:    gtk_timeout_remove(hg->skymon_timer);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_frame_mode,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_set,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_fwd,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_morn,TRUE);
skymon.c:    gtk_widget_set_sensitive(hg->skymon_button_even,TRUE);
skymon.c:    gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(hg->skymon_button_rev),FALSE);
skymon.c:    draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:    hg->skymon_year=tmpt->tm_year+1900;
skymon.c:    hg->skymon_month=tmpt->tm_mon+1;
skymon.c:    hg->skymon_day=tmpt->tm_mday;
skymon.c:    hg->skymon_hour=tmpt->tm_hour+(double)(TIMEZONE_SUBARU-hg->timezone);
skymon.c:    hg->skymon_min=tmpt->tm_min;
skymon.c:    if(hg->skymon_mode==SKYMON_CUR)
skymon.c:      draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:  hg->skymon_output=SKYMON_OUTPUT_PDF;
skymon.c:    draw_skymon_cairo(hg->skymon_dw,NULL,(gpointer)hg);
skymon.c:  hg->skymon_output=SKYMON_OUTPUT_WINDOW;
stdtree.c:  if(hg->dwThreadID_stddb){
stdtree.c:    PostThreadMessage(hg->dwThreadID_stddb, WM_QUIT, 0, 0);
stdtree.c:    WaitForSingleObject(hg->hThread_stddb, INFINITE);
stdtree.c:    CloseHandle(hg->hThread_stddb);
stdtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
stdtree.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->objtree));
stdtree.c:    hg->dss_i=i;
stdtree.c:  hg->pbar=gtk_progress_bar_new();
stdtree.c:  gtk_box_pack_start(GTK_BOX(GTK_DIALOG(dialog)->vbox),hg->pbar,TRUE,TRUE,0);
stdtree.c:  gtk_progress_bar_pulse(GTK_PROGRESS_BAR(hg->pbar));
stdtree.c:  gtk_progress_bar_set_orientation (GTK_PROGRESS_BAR (hg->pbar), 
stdtree.c:  gtk_progress_bar_set_pulse_step(GTK_PROGRESS_BAR(hg->pbar),0.05);
stdtree.c:  gtk_widget_show(hg->pbar);
stdtree.c:  unlink(hg->std_file);
stdtree.c:  hg->plabel=gtk_label_new("Searching standards in SIMBAD ...");
stdtree.c:  gtk_misc_set_alignment (GTK_MISC (hg->plabel), 0.0, 0.5);
stdtree.c:		     hg->plabel,FALSE,FALSE,0);
stdtree.c:    if(hg->std[i_list].name) g_free(hg->std[i_list].name);
stdtree.c:    hg->std[i_list].name=g_strdup(stacstd[i_list].name);
stdtree.c:    if(!hg->std[i_list].name){
stdtree.c:      hg->std_i_max=i_list;
stdtree.c:    hg->std[i_list].d_ra=stacstd[i_list].ra;
stdtree.c:    hg->std[i_list].ra=deg_to_ra(hg->std[i_list].d_ra);
stdtree.c:    hg->std[i_list].d_dec=stacstd[i_list].dec;
stdtree.c:    hg->std[i_list].dec=deg_to_dec(hg->std[i_list].d_dec);
stdtree.c:    hg->std[i_list].pmra=stacstd[i_list].pmra;
stdtree.c:    hg->std[i_list].pmdec=stacstd[i_list].pmdec;
stdtree.c:    if((fabs(hg->std[i_list].pmra)>50)||(fabs(hg->std[i_list].pmdec)>50)){
stdtree.c:      hg->std[i_list].pm=TRUE;
stdtree.c:      hg->std[i_list].pm=FALSE;
stdtree.c:    if(hg->std[i_list].sp) g_free(hg->std[i_list].sp);
stdtree.c:    hg->std[i_list].sp=g_strdup(stacstd[i_list].sp);
stdtree.c:    hg->std[i_list].rot=stacstd[i_list].rot;
stdtree.c:    hg->std[i_list].u=stacstd[i_list].u;
stdtree.c:    hg->std[i_list].b=stacstd[i_list].b;
stdtree.c:    hg->std[i_list].v=stacstd[i_list].v;
stdtree.c:    hg->std[i_list].r=stacstd[i_list].r;
stdtree.c:    hg->std[i_list].i=stacstd[i_list].i;
stdtree.c:    hg->std[i_list].j=stacstd[i_list].j;
stdtree.c:    hg->std[i_list].h=stacstd[i_list].h;
stdtree.c:    hg->std[i_list].k=stacstd[i_list].k;
stdtree.c:    hg->std[i_list].equinox=2000.00;
stdtree.c:    hg->std[i_list].sep=deg_sep(d_ra0,d_dec0,
stdtree.c:				hg->std[i_list].d_ra,hg->std[i_list].d_dec);
stdtree.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->objtree));
stdtree.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->objtree));
stdtree.c:    hg->std_i=i;
stdtree.c:    object.ra=ra_to_deg(hg->obj[i].ra);
stdtree.c:    object.dec=dec_to_deg(hg->obj[i].dec);
stdtree.c:		      get_julian_day_of_epoch(hg->obj[i].equinox),
stdtree.c:    switch(hg->stddb_mode){
stdtree.c:      if(hg->std_host) g_free(hg->std_host);
stdtree.c:      if(hg->fcdb_simbad==FCDB_SIMBAD_HARVARD){
stdtree.c:	hg->std_host=g_strdup(FCDB_HOST_SIMBAD_HARVARD);
stdtree.c:	hg->std_host=g_strdup(FCDB_HOST_SIMBAD_STRASBG);
stdtree.c:      if(hg->std_file) g_free(hg->std_file);
stdtree.c:      hg->std_file=g_strconcat(hg->temp_dir,
stdtree.c:      if(hg->std_path) g_free(hg->std_path);
stdtree.c:      if((ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra)<0){
stdtree.c:	hg->std_path=g_strdup_printf
stdtree.c:	   hg->std_cat,
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra+360,
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)-(gdouble)hg->std_ddec,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)+(gdouble)hg->std_ddec,
stdtree.c:	   hg->std_band,hg->std_mag1,hg->std_band,hg->std_mag2,
stdtree.c:	   hg->std_sptype2,MAX_STD);
stdtree.c:      else if((ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra)>360){
stdtree.c:	hg->std_path=g_strdup_printf
stdtree.c:	   hg->std_cat,
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra,
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra-360,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)-(gdouble)hg->std_ddec,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)+(gdouble)hg->std_ddec,
stdtree.c:	   hg->std_band,hg->std_mag1,hg->std_band,hg->std_mag2,
stdtree.c:	   hg->std_sptype2,MAX_STD);
stdtree.c:	hg->std_path=g_strdup_printf
stdtree.c:	   hg->std_cat,
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra,
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)-(gdouble)hg->std_ddec,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)+(gdouble)hg->std_ddec,
stdtree.c:	   hg->std_band,hg->std_mag1,hg->std_band,hg->std_mag2,
stdtree.c:	   hg->std_sptype2,MAX_STD);
stdtree.c:      if(hg->std_host) g_free(hg->std_host);
stdtree.c:      if(hg->fcdb_simbad==FCDB_SIMBAD_HARVARD){
stdtree.c:	hg->std_host=g_strdup(FCDB_HOST_SIMBAD_HARVARD);
stdtree.c:	hg->std_host=g_strdup(FCDB_HOST_SIMBAD_STRASBG);
stdtree.c:      if(hg->std_file) g_free(hg->std_file);
stdtree.c:      hg->std_file=g_strconcat(hg->temp_dir,
stdtree.c:      if(hg->std_path) g_free(hg->std_path);
stdtree.c:      if((ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra)<0){
stdtree.c:	hg->std_path=g_strdup_printf
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra+360,
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)-(gdouble)hg->std_ddec,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)+(gdouble)hg->std_ddec,
stdtree.c:	   hg->std_vsini,hg->std_vmag,hg->std_sptype,MAX_STD);
stdtree.c:      else if((ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra)>360){
stdtree.c:	hg->std_path=g_strdup_printf
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra,
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra-360,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)-(gdouble)hg->std_ddec,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)+(gdouble)hg->std_ddec,
stdtree.c:	   hg->std_vsini,hg->std_vmag,hg->std_sptype,MAX_STD);
stdtree.c:	hg->std_path=g_strdup_printf
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra,
stdtree.c:	   ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)-(gdouble)hg->std_ddec,
stdtree.c:	   ln_dms_to_deg(&hobject_prec.dec)+(gdouble)hg->std_ddec,
stdtree.c:	   hg->std_vsini,hg->std_vmag,hg->std_sptype,MAX_STD);
stdtree.c:      if(hg->std_host) g_free(hg->std_host);
stdtree.c:      if(hg->fcdb_simbad==FCDB_SIMBAD_HARVARD){
stdtree.c:	hg->std_host=g_strdup(FCDB_HOST_SIMBAD_HARVARD);
stdtree.c:	hg->std_host=g_strdup(FCDB_HOST_SIMBAD_STRASBG);
stdtree.c:      if(hg->std_file) g_free(hg->std_file);
stdtree.c:      hg->std_file=g_strconcat(hg->temp_dir,
stdtree.c:      if(hg->std_path) g_free(hg->std_path);
stdtree.c:     if((ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra)<0){
stdtree.c:       hg->std_path=g_strdup_printf
stdtree.c:	  ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra+360,
stdtree.c:	  ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra,
stdtree.c:	  ln_dms_to_deg(&hobject_prec.dec)-(gdouble)hg->std_ddec,
stdtree.c:	  ln_dms_to_deg(&hobject_prec.dec)+(gdouble)hg->std_ddec,
stdtree.c:	  hg->std_iras12,hg->std_iras25,MAX_STD);
stdtree.c:      else if((ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra)>360){
stdtree.c:       hg->std_path=g_strdup_printf
stdtree.c:	  ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra,
stdtree.c:	  ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra-360,
stdtree.c:	  ln_dms_to_deg(&hobject_prec.dec)-(gdouble)hg->std_ddec,
stdtree.c:	  ln_dms_to_deg(&hobject_prec.dec)+(gdouble)hg->std_ddec,
stdtree.c:	  hg->std_iras12,hg->std_iras25,MAX_STD);
stdtree.c:       hg->std_path=g_strdup_printf
stdtree.c:	  ln_hms_to_deg(&hobject_prec.ra)-(gdouble)hg->std_dra,
stdtree.c:	  ln_hms_to_deg(&hobject_prec.ra)+(gdouble)hg->std_dra,
stdtree.c:	  ln_dms_to_deg(&hobject_prec.dec)-(gdouble)hg->std_ddec,
stdtree.c:	  ln_dms_to_deg(&hobject_prec.dec)+(gdouble)hg->std_ddec,
stdtree.c:	  hg->std_iras12,hg->std_iras25,MAX_STD);
stdtree.c:    switch(hg->stddb_mode){
stdtree.c:    if(hg->skymon_mode==SKYMON_CUR){
stdtree.c:    else if(hg->skymon_mode==SKYMON_SET){
stdtree.c:    gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(hg->stddb_button),
stdtree.c:    hg->stddb_flag=TRUE;
stdtree.c:    // draw_skymon(hg->skymon_dw,hg, FALSE);
stdtree.c:  model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->stddb_tree));
stdtree.c:  for (i = 0; i < hg->std_i_max; i++){
stdtree.c:  gtk_notebook_set_current_page (GTK_NOTEBOOK(hg->all_note),4);
stdtree.c:  for (i = 0; i < hg->std_i_max; i++){
stdtree.c:		      hg->std[i_list].name,
stdtree.c:		     COLUMN_STD_RA, hg->std[i_list].ra, -1);
stdtree.c:		     COLUMN_STD_DEC, hg->std[i_list].dec, -1);
stdtree.c:		     COLUMN_STD_SP, hg->std[i_list].sp, -1);
stdtree.c:		     COLUMN_STD_SEP, hg->std[i_list].sep, -1);
stdtree.c:		     COLUMN_STD_ROT, hg->std[i_list].rot, -1);
stdtree.c:		     COLUMN_STD_U, hg->std[i_list].u,
stdtree.c:		     COLUMN_STD_B, hg->std[i_list].b,
stdtree.c:		     COLUMN_STD_V, hg->std[i_list].v,
stdtree.c:		     COLUMN_STD_R, hg->std[i_list].r,
stdtree.c:		     COLUMN_STD_I, hg->std[i_list].i,
stdtree.c:		     COLUMN_STD_J, hg->std[i_list].j,
stdtree.c:		     COLUMN_STD_H, hg->std[i_list].h,
stdtree.c:		     COLUMN_STD_K, hg->std[i_list].k,
stdtree.c:  if(hg->stddb_label_text) g_free(hg->stddb_label_text);
stdtree.c:  switch(hg->stddb_mode){
stdtree.c:    if(strcmp(hg->std_cat,"FS")==0){
stdtree.c:      hg->stddb_label_text
stdtree.c:			 hg->std_i+1,
stdtree.c:			 hg->obj[hg->std_i].name,hg->std_i_max);
stdtree.c:    else if(strcmp(hg->std_cat,"HIP")==0){
stdtree.c:      hg->stddb_label_text
stdtree.c:			 hg->std_i+1,
stdtree.c:			 hg->obj[hg->std_i].name,hg->std_i_max);
stdtree.c:    else if(strcmp(hg->std_cat,"SAO")==0){
stdtree.c:      hg->stddb_label_text
stdtree.c:			 hg->std_i+1,
stdtree.c:			 hg->obj[hg->std_i].name,hg->std_i_max);
stdtree.c:    hg->stddb_label_text
stdtree.c:			 hg->std_i+1,
stdtree.c:			 hg->obj[hg->std_i].name,hg->std_i_max);
stdtree.c:    hg->stddb_label_text
stdtree.c:			 hg->std_i+1,
stdtree.c:			 hg->obj[hg->std_i].name,hg->std_i_max);
stdtree.c:    hg->stddb_label_text
stdtree.c:			 hg->std_i+1,
stdtree.c:			 hg->obj[hg->std_i].name,hg->std_i_max);
stdtree.c:    hg->stddb_label_text
stdtree.c:			 hg->std_i+1,
stdtree.c:			 hg->obj[hg->std_i].name,hg->std_i_max);
stdtree.c:    hg->stddb_label_text
stdtree.c:			 hg->std_i+1,
stdtree.c:			 hg->obj[hg->std_i].name,hg->std_i_max);
stdtree.c:    hg->stddb_label_text
stdtree.c:			 hg->std_i+1,
stdtree.c:			 hg->obj[hg->std_i].name,hg->std_i_max);
stdtree.c:  gtk_label_set_text(GTK_LABEL(hg->stddb_label), hg->stddb_label_text);
treeview.c:		      hg->obj[i_list].name,
treeview.c:		      hg->obj[i_list].name,
treeview.c:		     COLUMN_OBJ_RA, hg->obj[i_list].ra, -1);
treeview.c:		     COLUMN_OBJ_DEC, hg->obj[i_list].dec, -1);
treeview.c:		     COLUMN_OBJ_EQUINOX, hg->obj[i_list].equinox, -1);
treeview.c:		     COLUMN_OBJ_PA, hg->obj[i_list].pa, -1);
treeview.c:		     COLUMN_OBJ_GUIDE, hg->obj[i_list].guide, -1);
treeview.c:		     COLUMN_OBJ_NOTE, hg->obj[i_list].note, -1);
treeview.c:    if(hg->obj[i_list].c_el>0){
treeview.c:      if(hg->azel_mode==AZEL_POSI){
treeview.c:	if(hg->obj[i_list].c_az<-90)
treeview.c:	  az_tmp=hg->obj[i_list].c_az+360;
treeview.c:	  az_tmp=hg->obj[i_list].c_az;
treeview.c:      else if(hg->azel_mode==AZEL_NEGA){
treeview.c:	if(hg->obj[i_list].c_az>90)
treeview.c:	  az_tmp=hg->obj[i_list].c_az-360;
treeview.c:	  az_tmp=hg->obj[i_list].c_az;
treeview.c:	  az_tmp=hg->obj[i_list].c_az;
treeview.c:		     COLUMN_OBJ_EL, hg->obj[i_list].c_el, -1);
treeview.c:  if(hg->obj[i_list].c_el>30){
treeview.c:    if(hg->obj[i_list].c_ha<0){
treeview.c:  else if(hg->obj[i_list].c_el>15){
treeview.c:    if(hg->obj[i_list].c_ha<0){
treeview.c:  else if(hg->obj[i_list].c_el>0){
treeview.c:    if(hg->obj[i_list].c_ha<0){
treeview.c:		     COLUMN_OBJ_HA, hg->obj[i_list].c_ha, -1);
treeview.c:		     COLUMN_OBJ_AD, hg->obj[i_list].c_ad, -1);
treeview.c:		     COLUMN_OBJ_ADPA, hg->obj[i_list].c_pa, -1);
treeview.c:		     COLUMN_OBJ_EXP,  hg->obj[i_list].exp, -1);
treeview.c:		     COLUMN_OBJ_REPEAT, hg->obj[i_list].repeat, -1);
treeview.c:  if(hg->flag_bunnei){
treeview.c:		     COLUMN_OBJ_MAG, hg->obj[i_list].mag, -1);
treeview.c:  model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->tree));
treeview.c:  for(i_list=0;i_list<hg->i_max;i_list++){
treeview.c:  for (i = 0; i < hg->i_max; i++){
treeview.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->tree));
treeview.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->tree));
treeview.c:  if(hg->i_max>=MAX_OBJECT) return;
treeview.c:    tmp_obj.exp=hg->def_exp;
treeview.c:    tmp_obj.guide=hg->def_guide;
treeview.c:    for(i_list=hg->i_max;i_list>i;i_list--){
treeview.c:      hg->obj[i_list]=hg->obj[i_list-1];
treeview.c:    hg->i_max++;
treeview.c:    hg->obj[i]=tmp_obj;
treeview.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->tree));
treeview.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->tree));
treeview.c:    for(i_list=i;i_list<hg->i_max;i_list++){
treeview.c:      hg->obj[i_list]=hg->obj[i_list+1];
treeview.c:    hg->i_max--;
treeview.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->tree));
treeview.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->tree));
treeview.c:      tmp_obj=hg->obj[i-1];
treeview.c:      hg->obj[i-1]=hg->obj[i];
treeview.c:      hg->obj[i]=tmp_obj;
treeview.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->tree));
treeview.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->tree));
treeview.c:    if(i<hg->i_max-1){
treeview.c:      tmp_obj=hg->obj[i];
treeview.c:      hg->obj[i]=hg->obj[i+1];
treeview.c:      hg->obj[i+1]=tmp_obj;
treeview.c:  GtkTreeModel *model = gtk_tree_view_get_model (GTK_TREE_VIEW(hg->tree));
treeview.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->tree));
treeview.c:      hg->obj[hg->tree_focus].check_sm=FALSE;
treeview.c:      hg->tree_focus=i;
treeview.c:      hg->obj[hg->tree_focus].check_sm=TRUE;
treeview.c:      draw_skymon_cairo(hg->skymon_dw,NULL,
treeview.c:      gdk_window_raise(hg->skymon_main->window);
treeview.c:  GtkTreeModel *model = gtk_tree_view_get_model (GTK_TREE_VIEW(hg->tree));
treeview.c:  GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW(hg->tree));
treeview.c:  if(hg->flag_bunnei) {
treeview.c:    for(i_list=0;i_list<hg->i_max;i_list++){
treeview.c:      hg->obj[i_list].exp=(gint)(pow(2.5,(hg->obj[i_list].mag - 8.0)) 
treeview.c:				 * hg->exp8mag);
treeview.c:      if(hg->flag_secz){
treeview.c:	hg->obj[i_list].exp=hg->obj[i_list].exp+
treeview.c:	  hg->obj[i_list].exp*(1/sin(hg->obj[i_list].c_el/180*3.141592) -1)
treeview.c:	  *hg->secz_factor;
treeview.c:      if(hg->obj[i_list].exp<1) hg->obj[i_list].exp=1;
treeview.c:  GtkTreeModel *model = gtk_tree_view_get_model(GTK_TREE_VIEW(hg->tree));
treeview.c:	g_free(hg->obj[i].name);
treeview.c:	hg->obj[i].name=g_strdup(new_text);
treeview.c:                            hg->obj[i].name, -1);
treeview.c:        gtk_tree_model_get (model, &iter, column, &hg->obj[i].exp, -1);
treeview.c:                            hg->obj[i].exp, -1);
treeview.c:        hg->obj[i].repeat = atoi (new_text+1);
treeview.c:	                   hg->obj[i].repeat, -1);
treeview.c:	hg->obj[i].mag=(gdouble)g_strtod(new_text,NULL);	
treeview.c:                            hg->obj[i].mag, -1);
treeview.c:	hg->obj[i].ra=(gdouble)g_strtod(new_text,NULL);	
treeview.c:                            hg->obj[i].ra, -1);
treeview.c:	hg->obj[i].dec=(gdouble)g_strtod(new_text,NULL);	
treeview.c:                            hg->obj[i].dec, -1);
treeview.c:	hg->obj[i].equinox=(gdouble)g_strtod(new_text,NULL);	
treeview.c:                            hg->obj[i].equinox, -1);
treeview.c:	hg->obj[i].pa=(gdouble)g_strtod(new_text,NULL);	
treeview.c:                            hg->obj[i].pa, -1);
treeview.c:	  hg->obj[i].guide=NO_GUIDE;
treeview.c:	  hg->obj[i].guide=AG_GUIDE;
treeview.c:	  hg->obj[i].guide=SV_GUIDE;
treeview.c:	  hg->obj[i].guide=SVSAFE_GUIDE;
treeview.c:			    hg->obj[i].guide, -1);
treeview.c:	g_free(hg->obj[i].note);
treeview.c:	hg->obj[i].note=g_strdup(new_text);
treeview.c:                            hg->obj[i].note, -1);
treeview.c:                             gtk_widget_get_screen (hg->w_top));
treeview.c:      hg->tree_label= gtk_label_new ("Object List");
treeview.c:      gtk_box_pack_start (GTK_BOX (vbox),hg->tree_label,
treeview.c:      hg->tree = gtk_tree_view_new_with_model (items_model);
treeview.c:      gtk_tree_view_set_rules_hint (GTK_TREE_VIEW (hg->tree), TRUE);
treeview.c:      gtk_tree_selection_set_mode (gtk_tree_view_get_selection (GTK_TREE_VIEW (hg->tree)),
treeview.c:      add_columns (hg, GTK_TREE_VIEW (hg->tree), items_model, 
treeview.c:      gtk_container_add (GTK_CONTAINER (sw), hg->tree);
treeview.c:      g_signal_connect (hg->tree, "cursor-changed",
treeview.c:      g_signal_connect (hg->tree, "cursor-changed",
treeview.c:	if(hg->azel_mode==AZEL_NORMAL) iter_set=iter;
treeview.c:	if(hg->azel_mode==AZEL_POSI) iter_set=iter;
treeview.c:	if(hg->azel_mode==AZEL_NEGA) iter_set=iter;
treeview.c:			   &hg->azel_mode);
treeview.c:      hg->e_exp8mag = gtk_entry_new ();
treeview.c:      gtk_box_pack_start(GTK_BOX(hbox),hg->e_exp8mag,FALSE,FALSE,0);
treeview.c:      gtk_entry_set_editable(GTK_ENTRY(hg->e_exp8mag),TRUE);
treeview.c:      sprintf(tmp,"%d",hg->exp8mag);
treeview.c:      gtk_entry_set_text(GTK_ENTRY(hg->e_exp8mag),tmp);
treeview.c:      my_signal_connect (hg->e_exp8mag,
treeview.c:			 &hg->exp8mag);
treeview.c:      my_entry_set_width_chars(GTK_ENTRY(hg->e_exp8mag),4);
treeview.c:      if(hg->flag_secz){
treeview.c:			 &hg->flag_secz);
treeview.c:      sprintf(tmp,"%4.2f",hg->secz_factor);
treeview.c:			 &hg->secz_factor);
treeview.c:      g_signal_connect (hg->tree, "cursor-changed",
treeview.c:  hg->addobj_type=FCDB_TYPE_SIMBAD;
treeview.c:  hg->addobj_type=FCDB_TYPE_NED;
treeview.c:  hg->addobj_ra=0;
treeview.c:  hg->addobj_dec=0;
treeview.c:  if(hg->addobj_votype) g_free(hg->addobj_votype);
treeview.c:  hg->addobj_votype=NULL;
treeview.c:  if(hg->addobj_magsp) g_free(hg->addobj_magsp);
treeview.c:  hg->addobj_magsp=NULL;
treeview.c:  my_signal_connect (entry, "changed", cc_get_entry, &hg->addobj_name);
treeview.c:  hg->addobj_label = gtk_label_new ("Input Object Name to be added & resolve its coordinate in the database.");
treeview.c:  gtk_misc_set_alignment (GTK_MISC (hg->addobj_label), 0.5, 0.5);
treeview.c:  gtk_box_pack_start(GTK_BOX(hbox),hg->addobj_label,FALSE, FALSE, 0);
treeview.c:  hg->addobj_entry_ra = gtk_entry_new ();
treeview.c:  gtk_box_pack_start(GTK_BOX(hbox),hg->addobj_entry_ra,FALSE, FALSE, 0);
treeview.c:  gtk_entry_set_text(GTK_ENTRY(hg->addobj_entry_ra), "000000.00");
treeview.c:  gtk_entry_set_editable(GTK_ENTRY(hg->addobj_entry_ra),TRUE);
treeview.c:  my_entry_set_width_chars(GTK_ENTRY(hg->addobj_entry_ra),12);
treeview.c:  my_signal_connect (hg->addobj_entry_ra, "changed", 
treeview.c:		     cc_get_entry_double, &hg->addobj_ra);
treeview.c:  hg->addobj_entry_dec = gtk_entry_new ();
treeview.c:  gtk_box_pack_start(GTK_BOX(hbox),hg->addobj_entry_dec,FALSE, FALSE, 0);
treeview.c:  gtk_entry_set_text(GTK_ENTRY(hg->addobj_entry_dec), "000000.00");
treeview.c:  gtk_entry_set_editable(GTK_ENTRY(hg->addobj_entry_dec),TRUE);
treeview.c:  my_entry_set_width_chars(GTK_ENTRY(hg->addobj_entry_dec),12);
treeview.c:  my_signal_connect (hg->addobj_entry_dec, "changed", 
treeview.c:		     cc_get_entry_double, &hg->addobj_dec);
votable.c:    for(i_band=0;i_band<hg->obj[i].trdb_band_max;i_band++){
votable.c:      if((strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"HSC")==0)
votable.c:	 || (strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"SUP")==0)){
votable.c:	tmp_str1=g_strdup_printf((hg->obj[i].trdb_exp[i_band] > 10) ?
votable.c:				 hg->obj[i].trdb_band[i_band],
votable.c:				 hg->obj[i].trdb_exp[i_band],
votable.c:				 hg->obj[i].trdb_shot[i_band]);
votable.c:      else if((strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"HDS")==0)
votable.c:	      || (strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"FMS")==0)){
votable.c:	tmp_str1=g_strdup_printf((hg->obj[i].trdb_exp[i_band] > 10) ?
votable.c:				 hg->obj[i].trdb_band[i_band],
votable.c:				 hg->obj[i].trdb_exp[i_band],
votable.c:				 hg->obj[i].trdb_shot[i_band]);
votable.c:	if(g_ascii_strncasecmp(hg->obj[i].trdb_mode[i_band],
votable.c:	  tmp_str1=g_strdup_printf((hg->obj[i].trdb_exp[i_band] > 10) ?
votable.c:				   hg->obj[i].trdb_mode[i_band],
votable.c:				   hg->obj[i].trdb_band[i_band],
votable.c:				   hg->obj[i].trdb_exp[i_band],
votable.c:				   hg->obj[i].trdb_shot[i_band]);
votable.c:	  tmp_str1=g_strdup_printf((hg->obj[i].trdb_exp[i_band] > 10) ?
votable.c:				   hg->obj[i].trdb_mode[i_band],
votable.c:				   hg->obj[i].trdb_band[i_band],
votable.c:				   hg->obj[i].trdb_exp[i_band],
votable.c:				   hg->obj[i].trdb_shot[i_band]);
votable.c:    for(i_band=0;i_band<hg->obj[i].trdb_band_max;i_band++){
votable.c:      if(hg->trdb_hst_mode==TRDB_HST_MODE_IMAGE){ 
votable.c:	tmp_str1=g_strdup_printf((hg->obj[i].trdb_exp[i_band] > 10) ?
votable.c:				 hg->obj[i].trdb_band[i_band],
votable.c:				 hg->obj[i].trdb_exp[i_band],
votable.c:				 hg->obj[i].trdb_shot[i_band]);
votable.c:	tmp_str1=g_strdup_printf((hg->obj[i].trdb_exp[i_band] > 10) ?
votable.c:				 hg->obj[i].trdb_band[i_band],
votable.c:				 hg->obj[i].trdb_exp[i_band],
votable.c:				 hg->obj[i].trdb_shot[i_band]);
votable.c:    for(i_band=0;i_band<hg->obj[i].trdb_band_max;i_band++){
votable.c:      tmp_str1=g_strdup_printf((hg->obj[i].trdb_exp[i_band] > 10) ?
votable.c:			       hg->obj[i].trdb_mode[i_band],
votable.c:			       hg->obj[i].trdb_exp[i_band],
votable.c:			       hg->obj[i].trdb_shot[i_band]);
votable.c:    for(i_band=0;i_band<hg->obj[i].trdb_band_max;i_band++){
votable.c:      tmp_str1=g_strdup_printf((hg->obj[i].trdb_exp[i_band] > 10) ?
votable.c:			       hg->obj[i].trdb_band[i_band],
votable.c:			       hg->obj[i].trdb_exp[i_band],
votable.c:			       hg->obj[i].trdb_shot[i_band]);
votable.c:  if(hg->obj[i].trdb_str) g_free(hg->obj[i].trdb_str);
votable.c:  hg->obj[i].trdb_str=g_strdup(tmp_str3);
votable.c:  reader = Init_VO_Parser(hg->std_file,&votable);
votable.c:  d_ra0=ra_to_deg(hg->obj[hg->std_i].ra);
votable.c:  d_dec0=dec_to_deg(hg->obj[hg->std_i].dec);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->std_file);
votable.c:     if(hg->std[i_list].name) g_free(hg->std[i_list].name);
votable.c:     hg->std[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     hg->std[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->std[i_list].ra=deg_to_ra(hg->std[i_list].d_ra);
votable.c:     hg->std[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->std[i_list].dec=deg_to_dec(hg->std[i_list].d_dec);
votable.c:     if(hg->std[i_list].sp) g_free(hg->std[i_list].sp);
votable.c:     hg->std[i_list].sp=g_strdup(vtabledata_move->value);
votable.c:       hg->std[i_list].rot=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].rot=-100;
votable.c:       hg->std[i_list].u=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].u=+100;
votable.c:       hg->std[i_list].b=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].b=+100;
votable.c:       hg->std[i_list].v=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].v=+100;
votable.c:       hg->std[i_list].r=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].r=+100;
votable.c:       hg->std[i_list].i=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].i=+100;
votable.c:       hg->std[i_list].j=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].j=+100;
votable.c:       hg->std[i_list].h=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].h=+100;
votable.c:       hg->std[i_list].k=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].k=+100;
votable.c:       hg->std[i_list].pmra=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].pmra=0;
votable.c:       hg->std[i_list].pmdec=atof(vtabledata_move->value);
votable.c:       hg->std[i_list].pmdec=0;
votable.c:     if(hg->std[i_list].f12) g_free(hg->std[i_list].f12);
votable.c:     hg->std[i_list].f12=g_strdup(vtabledata_move->value);
votable.c:     if(hg->std[i_list].f25) g_free(hg->std[i_list].f25);
votable.c:     hg->std[i_list].f25=g_strdup(vtabledata_move->value);
votable.c:     if(hg->std[i_list].f60) g_free(hg->std[i_list].f60);
votable.c:     hg->std[i_list].f60=g_strdup(vtabledata_move->value);
votable.c:     if(hg->std[i_list].f100) g_free(hg->std[i_list].f100);
votable.c:     hg->std[i_list].f100=g_strdup(vtabledata_move->value);
votable.c:     if(hg->std[i_list].q12) g_free(hg->std[i_list].q12);
votable.c:     hg->std[i_list].q12=g_strdup(vtabledata_move->value);
votable.c:     if(hg->std[i_list].q25) g_free(hg->std[i_list].q25);
votable.c:     hg->std[i_list].q25=g_strdup(vtabledata_move->value);
votable.c:     if(hg->std[i_list].q60) g_free(hg->std[i_list].q60);
votable.c:     hg->std[i_list].q60=g_strdup(vtabledata_move->value);
votable.c:     if(hg->std[i_list].q100) g_free(hg->std[i_list].q100);
votable.c:     hg->std[i_list].q100=g_strdup(vtabledata_move->value);
votable.c: hg->std_i_max=i_list;
votable.c:  for(i_list=0;i_list<hg->std_i_max;i_list++){
votable.c:    if(!hg->std[i_list].sp) hg->std[i_list].sp=g_strdup("---");
votable.c:    if(!hg->std[i_list].f12) hg->std[i_list].f12=g_strdup("---");
votable.c:    if(!hg->std[i_list].f25) hg->std[i_list].f25=g_strdup("---");
votable.c:    if(!hg->std[i_list].f60) hg->std[i_list].f60=g_strdup("---");
votable.c:    if(!hg->std[i_list].f100) hg->std[i_list].f100=g_strdup("---");
votable.c:    if(!hg->std[i_list].q12) hg->std[i_list].q12=g_strdup(" ");
votable.c:    if(!hg->std[i_list].q25) hg->std[i_list].q25=g_strdup(" ");
votable.c:    if(!hg->std[i_list].q60) hg->std[i_list].q60=g_strdup(" ");
votable.c:    if(!hg->std[i_list].q100) hg->std[i_list].q100=g_strdup(" ");
votable.c:    if((fabs(hg->std[i_list].pmra)>50)||(fabs(hg->std[i_list].pmdec)>50)){
votable.c:      hg->std[i_list].pm=TRUE;
votable.c:      hg->std[i_list].pm=FALSE;
votable.c:    hg->std[i_list].equinox=2000.00;
votable.c:    hg->std[i_list].sep=deg_sep(d_ra0,d_dec0,
votable.c:				hg->std[i_list].d_ra,hg->std[i_list].d_dec);
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:     if(hg->fcdb[i_list].sp) g_free(hg->fcdb[i_list].sp);
votable.c:     hg->fcdb[i_list].sp=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].otype) g_free(hg->fcdb[i_list].otype);
votable.c:     hg->fcdb[i_list].otype=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].u=+100;
votable.c:       hg->fcdb[i_list].b=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].b=+100;
votable.c:       hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].v=+100;
votable.c:       hg->fcdb[i_list].r=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].r=+100;
votable.c:       hg->fcdb[i_list].i=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].i=+100;
votable.c:       hg->fcdb[i_list].j=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].j=+100;
votable.c:       hg->fcdb[i_list].h=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].h=+100;
votable.c:       hg->fcdb[i_list].k=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].k=+100;
votable.c:       hg->fcdb[i_list].pmra=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].pmra=0;
votable.c:       hg->fcdb[i_list].pmdec=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].pmdec=0;
votable.c:     if(hg->fcdb[i_list].f12) g_free(hg->fcdb[i_list].f12);
votable.c:     hg->fcdb[i_list].f12=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].f25) g_free(hg->fcdb[i_list].f25);
votable.c:     hg->fcdb[i_list].f25=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].f60) g_free(hg->fcdb[i_list].f60);
votable.c:     hg->fcdb[i_list].f60=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].f100) g_free(hg->fcdb[i_list].f100);
votable.c:     hg->fcdb[i_list].f100=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].q12) g_free(hg->fcdb[i_list].q12);
votable.c:     hg->fcdb[i_list].q12=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].q25) g_free(hg->fcdb[i_list].q25);
votable.c:     hg->fcdb[i_list].q25=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].q60) g_free(hg->fcdb[i_list].q60);
votable.c:     hg->fcdb[i_list].q60=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].q100) g_free(hg->fcdb[i_list].q100);
votable.c:     hg->fcdb[i_list].q100=g_strdup(vtabledata_move->value);
votable.c: hg->fcdb_i_max=i_list;
votable.c: hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    if(!hg->fcdb[i_list].sp) hg->fcdb[i_list].sp=g_strdup("---");
votable.c:    if(!hg->fcdb[i_list].otype) hg->fcdb[i_list].otype=g_strdup("---");
votable.c:    if(!hg->fcdb[i_list].f12) hg->fcdb[i_list].f12=g_strdup("---");
votable.c:    if(!hg->fcdb[i_list].f25) hg->fcdb[i_list].f25=g_strdup("---");
votable.c:    if(!hg->fcdb[i_list].f60) hg->fcdb[i_list].f60=g_strdup("---");
votable.c:    if(!hg->fcdb[i_list].f100) hg->fcdb[i_list].f100=g_strdup("---");
votable.c:    if(!hg->fcdb[i_list].q12) hg->fcdb[i_list].q12=g_strdup(" ");
votable.c:    if(!hg->fcdb[i_list].q25) hg->fcdb[i_list].q25=g_strdup(" ");
votable.c:    if(!hg->fcdb[i_list].q60) hg->fcdb[i_list].q60=g_strdup(" ");
votable.c:    if(!hg->fcdb[i_list].q100) hg->fcdb[i_list].q100=g_strdup(" ");
votable.c:    if((fabs(hg->fcdb[i_list].pmra)>50)||(fabs(hg->fcdb[i_list].pmdec)>50)){
votable.c:      hg->fcdb[i_list].pm=TRUE;
votable.c:      hg->fcdb[i_list].pm=FALSE;
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     if((!hg->fcdb_ned_ref)||(hg->fcdb[i_list].ref!=0)){
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:     if(hg->fcdb[i_list].otype) g_free(hg->fcdb[i_list].otype);
votable.c:     hg->fcdb[i_list].otype=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].nedvel=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].nedvel=-99999;
votable.c:       hg->fcdb[i_list].nedz=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].nedz=-100;
votable.c:     if(hg->fcdb[i_list].nedmag) g_free(hg->fcdb[i_list].nedmag);
votable.c:     hg->fcdb[i_list].nedmag=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].ref=atoi(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].ref=0;
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    if(!hg->fcdb[i_list].otype) hg->fcdb[i_list].otype=g_strdup("---");
votable.c:    if(!hg->fcdb[i_list].nedmag) hg->fcdb[i_list].nedmag=g_strdup("---");
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     if((!hg->fcdb_gsc_fil)||(hg->fcdb[i_list].r<=hg->fcdb_gsc_mag)){
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:       hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].u=+100;
votable.c:       hg->fcdb[i_list].b=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].b=+100;
votable.c:       hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].v=+100;
votable.c:       hg->fcdb[i_list].r=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].r=+100;
votable.c:       hg->fcdb[i_list].i=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].i=+100;
votable.c:       hg->fcdb[i_list].j=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].j=+100;
votable.c:       hg->fcdb[i_list].h=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].h=+100;
votable.c:       hg->fcdb[i_list].k=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].k=+100;
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     if((!hg->fcdb_ps1_fil)||(hg->fcdb[i_list].r<=hg->fcdb_ps1_mag)){
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:       hg->fcdb[i_list].ref=atoi(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].ref=0;
votable.c:       hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].v<-900) hg->fcdb[i_list].v=+100;
votable.c:       hg->fcdb[i_list].v=+100;
votable.c:       hg->fcdb[i_list].r=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].r<-900) hg->fcdb[i_list].r=+100;
votable.c:       hg->fcdb[i_list].r=+100;
votable.c:       hg->fcdb[i_list].i=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].i<-900) hg->fcdb[i_list].i=+100;
votable.c:       hg->fcdb[i_list].i=+100;
votable.c:       hg->fcdb[i_list].j=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].j<-900) hg->fcdb[i_list].j=+100;
votable.c:       hg->fcdb[i_list].j=+100;
votable.c:       hg->fcdb[i_list].h=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].h<-900) hg->fcdb[i_list].h=+100;
votable.c:       hg->fcdb[i_list].h=+100;
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:    if(hg->fcdb_sdss_search==FCDB_SDSS_SEARCH_IMAG){
votable.c:	if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:	hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:      hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:      hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:      if(hg->fcdb_sdss_search==FCDB_SDSS_SEARCH_IMAG){
votable.c:      hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:      hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:	hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:	if(hg->fcdb[i_list].u<-900) hg->fcdb[i_list].u=+100;
votable.c:	hg->fcdb[i_list].u=+100;
votable.c:	hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:	if(hg->fcdb[i_list].v<-900) hg->fcdb[i_list].v=+100;
votable.c:	hg->fcdb[i_list].v=+100;
votable.c:	hg->fcdb[i_list].r=atof(vtabledata_move->value);
votable.c:	if(hg->fcdb[i_list].r<-900) hg->fcdb[i_list].r=+100;
votable.c:	hg->fcdb[i_list].r=+100;
votable.c:	hg->fcdb[i_list].i=atof(vtabledata_move->value);
votable.c:	if(hg->fcdb[i_list].i<-900) hg->fcdb[i_list].i=+100;
votable.c:	hg->fcdb[i_list].i=+100;
votable.c:	hg->fcdb[i_list].j=atof(vtabledata_move->value);
votable.c:	if(hg->fcdb[i_list].j<-900) hg->fcdb[i_list].j=+100;
votable.c:	hg->fcdb[i_list].j=+100;
votable.c:	  hg->fcdb[i_list].nedz=-100;
votable.c:	  hg->fcdb[i_list].nedz=atof(vtabledata_move->value);
votable.c:	hg->fcdb[i_list].nedz=-100;
votable.c:      if(hg->fcdb_sdss_search==FCDB_SDSS_SEARCH_SPEC){
votable.c:      if(hg->fcdb[i_list].otype) g_free(hg->fcdb[i_list].otype);
votable.c:	hg->fcdb[i_list].otype=g_strdup("---");
votable.c:	hg->fcdb[i_list].otype=g_strdup(vtabledata_move->value);
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    if(!hg->fcdb[i_list].otype) hg->fcdb[i_list].otype=g_strdup("---");
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     if((!hg->fcdb_usno_fil)||
votable.c:	((hg->fcdb[i_list].r<=hg->fcdb_usno_mag)||(hg->fcdb[i_list].j<=hg->fcdb_usno_mag))){
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:       hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:       if(fabs(hg->fcdb[i_list].v)<1e-5) hg->fcdb[i_list].v=+100;
votable.c:       hg->fcdb[i_list].v=+100;
votable.c:       hg->fcdb[i_list].r=atof(vtabledata_move->value);
votable.c:       if(fabs(hg->fcdb[i_list].r)<1e-5) hg->fcdb[i_list].r=+100;
votable.c:       hg->fcdb[i_list].r=+100;
votable.c:       hg->fcdb[i_list].i=atof(vtabledata_move->value);
votable.c:       if(fabs(hg->fcdb[i_list].i)<1e-5) hg->fcdb[i_list].i=+100;
votable.c:       hg->fcdb[i_list].i=+100;
votable.c:       hg->fcdb[i_list].j=atof(vtabledata_move->value);
votable.c:       if(fabs(hg->fcdb[i_list].j)<1e-5) hg->fcdb[i_list].j=+100;
votable.c:       hg->fcdb[i_list].j=+100;
votable.c:       hg->fcdb[i_list].h=atof(vtabledata_move->value);
votable.c:       if(fabs(hg->fcdb[i_list].h)<1e-5) hg->fcdb[i_list].h=+100;
votable.c:       hg->fcdb[i_list].h=+100;
votable.c:       hg->fcdb[i_list].pmra=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].pmra=0;
votable.c:       hg->fcdb[i_list].pmdec=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].pmdec=0;
votable.c: hg->fcdb_i_max=i_list;
votable.c: hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    if((fabs(hg->fcdb[i_list].pmra)>50)||(fabs(hg->fcdb[i_list].pmdec)>50)){
votable.c:      hg->fcdb[i_list].pm=TRUE;
votable.c:      hg->fcdb[i_list].pm=FALSE;
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:      if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:      hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:      hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:      hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:      if((!hg->fcdb_gaia_fil)||(hg->fcdb[i_list].v<=hg->fcdb_gaia_mag)){
votable.c:      hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:      hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:	hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:	if(fabs(hg->fcdb[i_list].v)<1e-5) hg->fcdb[i_list].v=+100;
votable.c:	hg->fcdb[i_list].v=+100;
votable.c:	hg->fcdb[i_list].plx=atof(vtabledata_move->value);
votable.c:	hg->fcdb[i_list].plx=-1;
votable.c:	hg->fcdb[i_list].pmra=atof(vtabledata_move->value);
votable.c:	hg->fcdb[i_list].pmra=0;
votable.c:	hg->fcdb[i_list].pmdec=atof(vtabledata_move->value);
votable.c:	hg->fcdb[i_list].pmdec=0;
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    if((fabs(hg->fcdb[i_list].pmra)>50)||(fabs(hg->fcdb[i_list].pmdec)>50)){
votable.c:      hg->fcdb[i_list].pm=TRUE;
votable.c:      hg->fcdb[i_list].pm=FALSE;
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     if((!hg->fcdb_2mass_fil)||(hg->fcdb[i_list].h<=hg->fcdb_2mass_mag)){
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].j=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].j=+100;
votable.c:       hg->fcdb[i_list].h=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].h=+100;
votable.c:       hg->fcdb[i_list].k=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].k=+100;
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     if((!hg->fcdb_wise_fil)||(hg->fcdb[i_list].u<=hg->fcdb_wise_mag)){
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:       hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].u=+100;
votable.c:       hg->fcdb[i_list].b=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].b=+100;
votable.c:       hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].v=+100;
votable.c:       hg->fcdb[i_list].r=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].r=+100;
votable.c:       hg->fcdb[i_list].j=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].j=+100;
votable.c:       hg->fcdb[i_list].h=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].h=+100;
votable.c:       hg->fcdb[i_list].k=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].k=+100;
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].u=-100;
votable.c:       hg->fcdb[i_list].b=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].b=0;
votable.c:       hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].v=-100;
votable.c:       hg->fcdb[i_list].r=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].r=0;
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].u=-100;
votable.c:       hg->fcdb[i_list].b=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].b=0;
votable.c:       hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].v=-100;
votable.c:       hg->fcdb[i_list].r=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].r=0;
votable.c:       hg->fcdb[i_list].i=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].i=-100;
votable.c:       hg->fcdb[i_list].j=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].j=0;
votable.c:       hg->fcdb[i_list].h=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].h=-100;
votable.c:       hg->fcdb[i_list].k=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].k=0;
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:       hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].u<0) hg->fcdb[i_list].u=-1;
votable.c:       hg->fcdb[i_list].u=-1;
votable.c:       hg->fcdb[i_list].b=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].b<-10) hg->fcdb[i_list].b=-10;
votable.c:       hg->fcdb[i_list].b=-10;
votable.c:       hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].v<-900) hg->fcdb[i_list].v=+100;
votable.c:       hg->fcdb[i_list].v=+100;
votable.c:       hg->fcdb[i_list].r=atof(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].r=-99999;
votable.c:     if(hg->fcdb[i_list].otype) g_free(hg->fcdb[i_list].otype);
votable.c:     hg->fcdb[i_list].otype=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].sp) g_free(hg->fcdb[i_list].sp);
votable.c:     hg->fcdb[i_list].sp=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].ref=atoi(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].ref=0;
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    if(!hg->fcdb[i_list].otype) hg->fcdb[i_list].otype=g_strdup("---");
votable.c:    if(!hg->fcdb[i_list].sp) hg->fcdb[i_list].sp=g_strdup("---");
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  if((fp=fopen(hg->fcdb_file,"rb"))==NULL){
votable.c:		  hg->fcdb_file,
votable.c:    fprintf(stderr," File Open Error  \"%s\".\n",hg->fcdb_file);
votable.c:		    hg->fcdb_file,
votable.c:      fprintf(stderr," File Read Error  \"%s\".\n",hg->fcdb_file);
votable.c:		  hg->fcdb_file,
votable.c:    fprintf(stderr," File Read Error  \"%s\".\n",hg->fcdb_file);
votable.c:    hg->fcdb_i_max=0;
votable.c:    hg->fcdb_i_all=0;
votable.c:		    hg->fcdb_file,
votable.c:      fprintf(stderr," File Read Error  \"%s\".\n",hg->fcdb_file);
votable.c:      if(hg->fcdb[i_list].fid) g_free(hg->fcdb[i_list].fid);
votable.c:      hg->fcdb[i_list].fid=g_strstrip(g_strndup(cp,len_fid));
votable.c:      if(hg->fcdb[i_list].date) g_free(hg->fcdb[i_list].date);
votable.c:      hg->fcdb[i_list].date=g_strstrip(g_strndup(cp,len_date));
votable.c:      if(hg->fcdb[i_list].mode) g_free(hg->fcdb[i_list].mode);
votable.c:      hg->fcdb[i_list].mode=g_strstrip(g_strndup(cp,len_mode));
votable.c:      if(hg->fcdb[i_list].type) g_free(hg->fcdb[i_list].type);
votable.c:      hg->fcdb[i_list].type=g_strstrip(g_strndup(cp,len_type));
votable.c:      if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:      hg->fcdb[i_list].name=g_strstrip(g_strndup(cp,len_obj));
votable.c:      if(hg->fcdb[i_list].fil) g_free(hg->fcdb[i_list].fil);
votable.c:      hg->fcdb[i_list].fil=g_strstrip(g_strndup(cp,len_fil));
votable.c:      if(hg->fcdb[i_list].wv) g_free(hg->fcdb[i_list].wv);
votable.c:      hg->fcdb[i_list].wv=rm_spc(g_strndup(cp,len_wv));
votable.c:      hg->fcdb[i_list].d_ra=ln_hms_to_deg(&equ.ra);
votable.c:      hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:      hg->fcdb[i_list].d_dec=ln_dms_to_deg(&equ.dec);
votable.c:      hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:      hg->fcdb[i_list].u=(gdouble)g_strtod(buf_tmp1,NULL);
votable.c:      if(hg->fcdb[i_list].obs) g_free(hg->fcdb[i_list].obs);
votable.c:      hg->fcdb[i_list].obs=g_strstrip(g_strndup(cp,len_obs));
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  if((fp=fopen(hg->fcdb_file,"rb"))==NULL){
votable.c:		  hg->fcdb_file,
votable.c:    fprintf(stderr," File Open Error  \"%s\".\n",hg->fcdb_file);
votable.c:  hg->obj[hg->fcdb_i].trdb_band_max=0;
votable.c:		    hg->fcdb_file,
votable.c:      fprintf(stderr," File Read Error  \"%s\".\n",hg->fcdb_file);
votable.c:		  hg->fcdb_file,
votable.c:    fprintf(stderr," File Read Error  \"%s\".\n",hg->fcdb_file);
votable.c:    hg->fcdb_i_max=0;
votable.c:    hg->fcdb_i_all=0;
votable.c:    hg->obj[hg->fcdb_i].trdb_band_max=0;
votable.c:    if(hg->obj[hg->fcdb_i].trdb_str) g_free(hg->obj[hg->fcdb_i].trdb_str);
votable.c:    hg->obj[hg->fcdb_i].trdb_str=NULL;
votable.c:		    hg->fcdb_file,
votable.c:      fprintf(stderr," File Read Error  \"%s\".\n",hg->fcdb_file);
votable.c:      if(hg->fcdb[i_list].fid) g_free(hg->fcdb[i_list].fid);
votable.c:      hg->fcdb[i_list].fid=g_strstrip(g_strndup(cp,len_fid));
votable.c:      if(hg->fcdb[i_list].date) g_free(hg->fcdb[i_list].date);
votable.c:      hg->fcdb[i_list].date=g_strstrip(g_strndup(cp,len_date));
votable.c:      if(hg->fcdb[i_list].mode) g_free(hg->fcdb[i_list].mode);
votable.c:      hg->fcdb[i_list].mode=g_strstrip(g_strndup(cp,len_mode));
votable.c:      if(hg->fcdb[i_list].type) g_free(hg->fcdb[i_list].type);
votable.c:      hg->fcdb[i_list].type=g_strstrip(g_strndup(cp,len_type));
votable.c:      if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:      hg->fcdb[i_list].name=g_strstrip(g_strndup(cp,len_obj));
votable.c:      if(hg->fcdb[i_list].fil) g_free(hg->fcdb[i_list].fil);
votable.c:      hg->fcdb[i_list].fil=g_strstrip(g_strndup(cp,len_fil));
votable.c:      if(hg->fcdb[i_list].wv) g_free(hg->fcdb[i_list].wv);
votable.c:      hg->fcdb[i_list].wv=rm_spc(g_strndup(cp,len_wv));
votable.c:      hg->fcdb[i_list].d_ra=ln_hms_to_deg(&equ.ra);
votable.c:      hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:      hg->fcdb[i_list].d_dec=ln_dms_to_deg(&equ.dec);
votable.c:      hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:      hg->fcdb[i_list].u=(gdouble)g_strtod(buf_tmp1,NULL);
votable.c:      if(hg->fcdb[i_list].obs) g_free(hg->fcdb[i_list].obs);
votable.c:      hg->fcdb[i_list].obs=g_strstrip(g_strndup(cp,len_obs));
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:      if((strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"HSC")==0)
votable.c:	 || (strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"SUP")==0)){
votable.c:	if(strcmp(hg->fcdb[i_list].fil,
votable.c:		  hg->obj[hg->fcdb_i].trdb_band[i_band])==0){
votable.c:	  if(strcmp(hg->fcdb[i_list].type, "FOCUSING")!=0){
votable.c:	    hg->obj[hg->fcdb_i].trdb_exp[i_band]+=hg->fcdb[i_list].u;
votable.c:	    hg->obj[hg->fcdb_i].trdb_shot[i_band]++;
votable.c:      else if((strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"HDS")==0)
votable.c:	      || (strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"FMS")==0)){
votable.c:	if(strcmp(hg->fcdb[i_list].wv,
votable.c:		  hg->obj[hg->fcdb_i].trdb_band[i_band])==0){
votable.c:	  hg->obj[hg->fcdb_i].trdb_exp[i_band]+=hg->fcdb[i_list].u;
votable.c:	  hg->obj[hg->fcdb_i].trdb_shot[i_band]++;
votable.c:	if(strcmp(hg->fcdb[i_list].mode,
votable.c:		  hg->obj[hg->fcdb_i].trdb_mode[i_band])==0){
votable.c:	  if(g_ascii_strncasecmp(hg->obj[hg->fcdb_i].trdb_mode[i_band],
votable.c:	    if(strcmp(hg->fcdb[i_list].fil,
votable.c:		      hg->obj[hg->fcdb_i].trdb_band[i_band])==0){
votable.c:	      hg->obj[hg->fcdb_i].trdb_exp[i_band]+=hg->fcdb[i_list].u;
votable.c:	      hg->obj[hg->fcdb_i].trdb_shot[i_band]++;
votable.c:	  else if(g_ascii_strncasecmp(hg->obj[hg->fcdb_i].trdb_mode[i_band],
votable.c:	    if(strcmp(hg->fcdb[i_list].wv,
votable.c:		      hg->obj[hg->fcdb_i].trdb_band[i_band])==0){ 
votable.c:	      hg->obj[hg->fcdb_i].trdb_exp[i_band]+=hg->fcdb[i_list].u;
votable.c:	      hg->obj[hg->fcdb_i].trdb_shot[i_band]++;
votable.c:      if((strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"HSC")==0)
votable.c:	 || (strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"SUP")==0)){
votable.c:	if(strcmp(hg->fcdb[i_list].type, "FOCUSING")!=0){
votable.c:	  if(hg->obj[hg->fcdb_i].trdb_mode[i_band_max])
votable.c:	    g_free(hg->obj[hg->fcdb_i].trdb_mode[i_band_max]);
votable.c:	  hg->obj[hg->fcdb_i].trdb_mode[i_band_max]
votable.c:	  if(hg->obj[hg->fcdb_i].trdb_band[i_band_max])
votable.c:	    g_free(hg->obj[hg->fcdb_i].trdb_band[i_band_max]);
votable.c:	  hg->obj[hg->fcdb_i].trdb_band[i_band_max]
votable.c:	    =g_strdup(hg->fcdb[i_list].fil);
votable.c:	  hg->obj[hg->fcdb_i].trdb_exp[i_band_max]=hg->fcdb[i_list].u;
votable.c:	  hg->obj[hg->fcdb_i].trdb_shot[i_band_max]=1;
votable.c:      else if((strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"HDS")==0)
votable.c:	      || (strcmp(smoka_subaru[hg->trdb_smoka_inst].prm,"FMS")==0)){
votable.c:	if(hg->obj[hg->fcdb_i].trdb_mode[i_band_max])
votable.c:	  g_free(hg->obj[hg->fcdb_i].trdb_mode[i_band_max]);
votable.c:	hg->obj[hg->fcdb_i].trdb_mode[i_band_max]
votable.c:	if(hg->obj[hg->fcdb_i].trdb_band[i_band_max])
votable.c:	  g_free(hg->obj[hg->fcdb_i].trdb_band[i_band_max]);
votable.c:	hg->obj[hg->fcdb_i].trdb_band[i_band_max]
votable.c:	  =g_strdup(hg->fcdb[i_list].wv);
votable.c:	hg->obj[hg->fcdb_i].trdb_exp[i_band_max]=hg->fcdb[i_list].u;
votable.c:	hg->obj[hg->fcdb_i].trdb_shot[i_band_max]=1;
votable.c:	if(hg->obj[hg->fcdb_i].trdb_mode[i_band_max])
votable.c:	  g_free(hg->obj[hg->fcdb_i].trdb_mode[i_band_max]);
votable.c:	hg->obj[hg->fcdb_i].trdb_mode[i_band_max]
votable.c:	  =g_strdup(hg->fcdb[i_list].mode);
votable.c:	if(hg->obj[hg->fcdb_i].trdb_band[i_band_max])
votable.c:	  g_free(hg->obj[hg->fcdb_i].trdb_band[i_band_max]);
votable.c:	if(g_ascii_strncasecmp(hg->obj[hg->fcdb_i].trdb_mode[i_band_max],
votable.c:	  hg->obj[hg->fcdb_i].trdb_band[i_band_max]
votable.c:	    =g_strdup(hg->fcdb[i_list].fil);
votable.c:	  hg->obj[hg->fcdb_i].trdb_exp[i_band_max]=hg->fcdb[i_list].u;
votable.c:	  hg->obj[hg->fcdb_i].trdb_shot[i_band_max]=1;
votable.c:	else if(g_ascii_strncasecmp(hg->obj[hg->fcdb_i].trdb_mode[i_band],
votable.c:	  hg->obj[hg->fcdb_i].trdb_band[i_band_max]
votable.c:	    =g_strdup(hg->fcdb[i_list].wv);
votable.c:	  hg->obj[hg->fcdb_i].trdb_exp[i_band_max]=hg->fcdb[i_list].u;
votable.c:	  hg->obj[hg->fcdb_i].trdb_shot[i_band_max]=1;
votable.c:  if(i_band_max>0)   hg->trdb_i_max++;
votable.c:  hg->obj[hg->fcdb_i].trdb_band_max=i_band_max;
votable.c:  make_band_str(hg, hg->fcdb_i, TRDB_TYPE_SMOKA);
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].fid) g_free(hg->fcdb[i_list].fid);
votable.c:     hg->fcdb[i_list].fid=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:     if(hg->fcdb[i_list].date) g_free(hg->fcdb[i_list].date);
votable.c:     hg->fcdb[i_list].date=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].u<0) hg->fcdb[i_list].u=-1;
votable.c:       hg->fcdb[i_list].u=-1;
votable.c:     if(hg->fcdb[i_list].mode) g_free(hg->fcdb[i_list].mode);
votable.c:     hg->fcdb[i_list].mode=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].fil) g_free(hg->fcdb[i_list].fil);
votable.c:     hg->fcdb[i_list].fil=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].v<0) hg->fcdb[i_list].v=-1;
votable.c:       hg->fcdb[i_list].v=-1;
votable.c:     if(hg->fcdb[i_list].obs) g_free(hg->fcdb[i_list].obs);
votable.c:     hg->fcdb[i_list].obs=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].type) g_free(hg->fcdb[i_list].type);
votable.c:     hg->fcdb[i_list].type=g_strdup(vtabledata_move->value);
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].fid) g_free(hg->fcdb[i_list].fid);
votable.c:     hg->fcdb[i_list].fid=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:     if(hg->fcdb[i_list].date) g_free(hg->fcdb[i_list].date);
votable.c:     hg->fcdb[i_list].date=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].u<0) hg->fcdb[i_list].u=-1;
votable.c:       hg->fcdb[i_list].u=-1;
votable.c:     if(hg->fcdb[i_list].mode) g_free(hg->fcdb[i_list].mode);
votable.c:     hg->fcdb[i_list].mode=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].fil) g_free(hg->fcdb[i_list].fil);
votable.c:     hg->fcdb[i_list].fil=g_strdup(vtabledata_move->value);
votable.c:       hg->fcdb[i_list].v=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].v<0) hg->fcdb[i_list].v=-1;
votable.c:       hg->fcdb[i_list].v=-1;
votable.c:     if(hg->fcdb[i_list].obs) g_free(hg->fcdb[i_list].obs);
votable.c:     hg->fcdb[i_list].obs=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].type) g_free(hg->fcdb[i_list].type);
votable.c:     hg->fcdb[i_list].type=g_strdup(vtabledata_move->value);
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:      if(strcmp(hg->fcdb[i_list].mode,
votable.c:		hg->obj[hg->fcdb_i].trdb_mode[i_band])==0){
votable.c:	if(hg->trdb_hst_mode==TRDB_HST_MODE_IMAGE){ 
votable.c:	  if(strcmp(hg->fcdb[i_list].fil,
votable.c:		    hg->obj[hg->fcdb_i].trdb_band[i_band])==0){
votable.c:	    hg->obj[hg->fcdb_i].trdb_exp[i_band]+=hg->fcdb[i_list].u;
votable.c:	    hg->obj[hg->fcdb_i].trdb_shot[i_band]++;
votable.c:	  if((int)hg->fcdb[i_list].v
votable.c:	     ==atoi(hg->obj[hg->fcdb_i].trdb_band[i_band])){
votable.c:	    hg->obj[hg->fcdb_i].trdb_exp[i_band]+=hg->fcdb[i_list].u;
votable.c:	    hg->obj[hg->fcdb_i].trdb_shot[i_band]++;
votable.c:      if(hg->obj[hg->fcdb_i].trdb_mode[i_band_max])
votable.c:	g_free(hg->obj[hg->fcdb_i].trdb_mode[i_band_max]);
votable.c:      hg->obj[hg->fcdb_i].trdb_mode[i_band_max]
votable.c:	=g_strdup(hg->fcdb[i_list].mode);
votable.c:      if(hg->obj[hg->fcdb_i].trdb_band[i_band_max])
votable.c:	g_free(hg->obj[hg->fcdb_i].trdb_band[i_band_max]);
votable.c:      if(hg->trdb_hst_mode==TRDB_HST_MODE_IMAGE){ 
votable.c:	hg->obj[hg->fcdb_i].trdb_band[i_band_max]
votable.c:	  =g_strdup(hg->fcdb[i_list].fil);
votable.c:	hg->obj[hg->fcdb_i].trdb_exp[i_band_max]=hg->fcdb[i_list].u;
votable.c:	hg->obj[hg->fcdb_i].trdb_shot[i_band_max]=1;
votable.c:	hg->obj[hg->fcdb_i].trdb_band[i_band_max]
votable.c:	  =g_strdup_printf("%d",(int)hg->fcdb[i_list].v);
votable.c:	hg->obj[hg->fcdb_i].trdb_exp[i_band_max]=hg->fcdb[i_list].u;
votable.c:	hg->obj[hg->fcdb_i].trdb_shot[i_band_max]=1;
votable.c:  if(i_band_max>0)   hg->trdb_i_max++;
votable.c:  hg->obj[hg->fcdb_i].trdb_band_max=i_band_max;
votable.c:  make_band_str(hg, hg->fcdb_i, TRDB_TYPE_HST);
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:       hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].u<0) hg->fcdb[i_list].u=-1;
votable.c:       hg->fcdb[i_list].u=-1;
votable.c:     if(hg->fcdb[i_list].obs) g_free(hg->fcdb[i_list].obs);
votable.c:     hg->fcdb[i_list].obs=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].fid) g_free(hg->fcdb[i_list].fid);
votable.c:     hg->fcdb[i_list].fid=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].type) g_free(hg->fcdb[i_list].type);
votable.c:     hg->fcdb[i_list].type=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].mode) g_free(hg->fcdb[i_list].mode);
votable.c:     hg->fcdb[i_list].mode=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].date) g_free(hg->fcdb[i_list].date);
votable.c:     hg->fcdb[i_list].date=g_strdup(vtabledata_move->value);
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:     if(hg->fcdb[i_list].name) g_free(hg->fcdb[i_list].name);
votable.c:     hg->fcdb[i_list].name=g_strdup(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].d_ra=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].ra=deg_to_ra(hg->fcdb[i_list].d_ra);
votable.c:     hg->fcdb[i_list].d_dec=atof(vtabledata_move->value);
votable.c:     hg->fcdb[i_list].dec=deg_to_dec(hg->fcdb[i_list].d_dec);
votable.c:       hg->fcdb[i_list].u=atof(vtabledata_move->value);
votable.c:       if(hg->fcdb[i_list].u<0) hg->fcdb[i_list].u=-1;
votable.c:       hg->fcdb[i_list].u=-1;
votable.c:     if(hg->fcdb[i_list].obs) g_free(hg->fcdb[i_list].obs);
votable.c:     hg->fcdb[i_list].obs=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].fid) g_free(hg->fcdb[i_list].fid);
votable.c:     hg->fcdb[i_list].fid=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].type) g_free(hg->fcdb[i_list].type);
votable.c:     hg->fcdb[i_list].type=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].mode) g_free(hg->fcdb[i_list].mode);
votable.c:     hg->fcdb[i_list].mode=g_strdup(vtabledata_move->value);
votable.c:     if(hg->fcdb[i_list].date) g_free(hg->fcdb[i_list].date);
votable.c:     hg->fcdb[i_list].date=g_strdup(vtabledata_move->value);
votable.c:  hg->fcdb_i_max=i_list;
votable.c:  hg->fcdb_i_all=i_all;
votable.c:  for(i_list=0;i_list<hg->fcdb_i_max;i_list++){
votable.c:    hg->fcdb[i_list].equinox=2000.00;
votable.c:    hg->fcdb[i_list].sep=deg_sep(hg->fcdb[i_list].d_ra,hg->fcdb[i_list].d_dec,
votable.c:				 hg->fcdb_d_ra0,hg->fcdb_d_dec0);
votable.c:    hg->fcdb[i_list].pmra=0;
votable.c:    hg->fcdb[i_list].pmdec=0;
votable.c:    hg->fcdb[i_list].pm=FALSE;
votable.c:      if(strcmp(hg->fcdb[i_list].type,
votable.c:		hg->obj[hg->fcdb_i].trdb_mode[i_band])==0){
votable.c:	hg->obj[hg->fcdb_i].trdb_exp[i_band]+=hg->fcdb[i_list].u;
votable.c:	hg->obj[hg->fcdb_i].trdb_shot[i_band]++;
votable.c:      if(hg->obj[hg->fcdb_i].trdb_mode[i_band_max])
votable.c:	g_free(hg->obj[hg->fcdb_i].trdb_mode[i_band_max]);
votable.c:      hg->obj[hg->fcdb_i].trdb_mode[i_band_max]
votable.c:	=g_strdup(hg->fcdb[i_list].type);
votable.c:      if(hg->obj[hg->fcdb_i].trdb_band[i_band_max])
votable.c:	g_free(hg->obj[hg->fcdb_i].trdb_band[i_band_max]);
votable.c:      hg->obj[hg->fcdb_i].trdb_band[i_band_max]=NULL;
votable.c:      hg->obj[hg->fcdb_i].trdb_exp[i_band_max]=hg->fcdb[i_list].u;
votable.c:      hg->obj[hg->fcdb_i].trdb_shot[i_band_max]=1;
votable.c:  if(i_band_max>0)   hg->trdb_i_max++;
votable.c:  hg->obj[hg->fcdb_i].trdb_band_max=i_band_max;
votable.c:  make_band_str(hg, hg->fcdb_i, TRDB_TYPE_ESO);
votable.c:  reader = Init_VO_Parser(hg->fcdb_file,&votable);
votable.c:  if(hg->addobj_voname) g_free(hg->addobj_voname);
votable.c:  hg->addobj_voname=NULL;
votable.c:  Extract_Att_VO_Table(reader,&votable,hg->fcdb_file);
votable.c:  if(hg->addobj_type==FCDB_TYPE_SIMBAD){
votable.c:  else if (hg->addobj_type==FCDB_TYPE_NED){
votable.c:     if(hg->addobj_voname) g_free(hg->addobj_voname);
votable.c:     hg->addobj_voname=g_strdup(vtabledata_move->value);
votable.c:     hg->addobj_ra=deg_to_ra(tmp_d_ra);
votable.c:     hg->addobj_dec=deg_to_dec(tmp_d_dec);
votable.c:     if(hg->addobj_votype) g_free(hg->addobj_votype);
votable.c:     hg->addobj_votype=g_strdup(vtabledata_move->value);
votable.c:     if(hg->addobj_type==FCDB_TYPE_SIMBAD){
votable.c:     else if(hg->addobj_type==FCDB_TYPE_NED){
votable.c:	 if(hg->addobj_magsp) g_free(hg->addobj_magsp);
votable.c:	 hg->addobj_magsp=g_strdup(vtabledata_move->value);
votable.c: if(!hg->addobj_votype) hg->addobj_votype=g_strdup("(type unknown)");
votable.c: if(hg->addobj_type==FCDB_TYPE_SIMBAD){
votable.c:   if(hg->addobj_magsp) g_free(hg->addobj_magsp);
votable.c:       hg->addobj_magsp=g_strdup_printf("V=%.2lf %s",simbad_mag,simbad_sp);
votable.c:       hg->addobj_magsp=g_strdup_printf("V=%.2lf",simbad_mag);
votable.c:       hg->addobj_magsp=g_strdup_printf("V=unknown %s",simbad_sp);
votable.c:       hg->addobj_magsp=g_strdup("V=unknown");
votable.c: else if(hg->addobj_type==FCDB_TYPE_NED){
votable.c:   if(!hg->addobj_magsp) hg->addobj_magsp=g_strdup("mag=unknown");
